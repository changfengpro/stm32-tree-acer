ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"event_groups.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
  20              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  21              		.align	1
  22              		.global	xEventGroupCreateStatic
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	xEventGroupCreateStatic:
  28              	.LFB4:
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  29              		.loc 1 94 2
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 24
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 32
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  45              		.loc 1 98 3
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 0BD1     		bne	.L2
  49              	.LBB36:
  50              	.LBB37:
  51              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 4


  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 5


  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 6


 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 7


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  52              		.loc 2 195 2
  53              		.syntax unified
  54              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  55 000e 4FF05003 			mov r3, #80												
  56 0012 83F31188 		msr basepri, r3											
  57 0016 BFF36F8F 		isb														
  58 001a BFF34F8F 		dsb														
  59              	
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63 001e 3B61     		str	r3, [r7, #16]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  64              		.loc 2 203 1
  65 0020 00BF     		nop
  66              	.L3:
  67              	.LBE37:
  68              	.LBE36:
  69              		.loc 1 98 3
  70 0022 00BF     		nop
  71 0024 FDE7     		b	.L3
  72              	.L2:
  73              	.LBB38:
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
  74              		.loc 1 105 20
  75 0026 2023     		movs	r3, #32
  76 0028 BB60     		str	r3, [r7, #8]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  77              		.loc 1 106 4
  78 002a BB68     		ldr	r3, [r7, #8]
  79 002c 202B     		cmp	r3, #32
  80 002e 0BD0     		beq	.L4
  81              	.LBB39:
  82              	.LBB40:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
  83              		.loc 2 195 2
  84              		.syntax unified
  85              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  86 0030 4FF05003 			mov r3, #80												
  87 0034 83F31188 		msr basepri, r3											
  88 0038 BFF36F8F 		isb														
  89 003c BFF34F8F 		dsb														
  90              	
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 8


  91              	@ 0 "" 2
  92              		.thumb
  93              		.syntax unified
  94 0040 FB60     		str	r3, [r7, #12]
  95              		.loc 2 203 1
  96 0042 00BF     		nop
  97              	.L5:
  98              	.LBE40:
  99              	.LBE39:
 100              		.loc 1 106 4
 101 0044 00BF     		nop
 102 0046 FDE7     		b	.L5
 103              	.L4:
 104              	.LBE38:
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 105              		.loc 1 111 15
 106 0048 7B68     		ldr	r3, [r7, #4]
 107 004a 7B61     		str	r3, [r7, #20]
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 108              		.loc 1 113 5
 109 004c 7B69     		ldr	r3, [r7, #20]
 110 004e 002B     		cmp	r3, #0
 111 0050 0AD0     		beq	.L6
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 112              		.loc 1 115 29
 113 0052 7B69     		ldr	r3, [r7, #20]
 114 0054 0022     		movs	r2, #0
 115 0056 1A60     		str	r2, [r3]
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 116              		.loc 1 116 4
 117 0058 7B69     		ldr	r3, [r7, #20]
 118 005a 0433     		adds	r3, r3, #4
 119 005c 1846     		mov	r0, r3
 120 005e FFF7FEFF 		bl	vListInitialise
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 121              		.loc 1 123 40
 122 0062 7B69     		ldr	r3, [r7, #20]
 123 0064 0122     		movs	r2, #1
 124 0066 1A77     		strb	r2, [r3, #28]
 125              	.L6:
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 9


 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 126              		.loc 1 137 10
 127 0068 7B69     		ldr	r3, [r7, #20]
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 128              		.loc 1 138 2
 129 006a 1846     		mov	r0, r3
 130 006c 1837     		adds	r7, r7, #24
 131              	.LCFI3:
 132              		.cfi_def_cfa_offset 8
 133 006e BD46     		mov	sp, r7
 134              	.LCFI4:
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 0070 80BD     		pop	{r7, pc}
 138              		.cfi_endproc
 139              	.LFE4:
 141              		.section	.text.xEventGroupCreate,"ax",%progbits
 142              		.align	1
 143              		.global	xEventGroupCreate
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	xEventGroupCreate:
 149              	.LFB5:
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 150              		.loc 1 146 2
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              	.LCFI5:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 82B0     		sub	sp, sp, #8
 160              	.LCFI6:
 161              		.cfi_def_cfa_offset 16
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI7:
 164              		.cfi_def_cfa_register 7
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 10


 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 165              		.loc 1 162 36
 166 0006 2020     		movs	r0, #32
 167 0008 FFF7FEFF 		bl	pvPortMalloc
 168 000c 7860     		str	r0, [r7, #4]
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 169              		.loc 1 164 5
 170 000e 7B68     		ldr	r3, [r7, #4]
 171 0010 002B     		cmp	r3, #0
 172 0012 0AD0     		beq	.L9
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 173              		.loc 1 166 29
 174 0014 7B68     		ldr	r3, [r7, #4]
 175 0016 0022     		movs	r2, #0
 176 0018 1A60     		str	r2, [r3]
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 177              		.loc 1 167 4
 178 001a 7B68     		ldr	r3, [r7, #4]
 179 001c 0433     		adds	r3, r3, #4
 180 001e 1846     		mov	r0, r3
 181 0020 FFF7FEFF 		bl	vListInitialise
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 182              		.loc 1 174 40
 183 0024 7B68     		ldr	r3, [r7, #4]
 184 0026 0022     		movs	r2, #0
 185 0028 1A77     		strb	r2, [r3, #28]
 186              	.L9:
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 11


 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 187              		.loc 1 185 10
 188 002a 7B68     		ldr	r3, [r7, #4]
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189              		.loc 1 186 2
 190 002c 1846     		mov	r0, r3
 191 002e 0837     		adds	r7, r7, #8
 192              	.LCFI8:
 193              		.cfi_def_cfa_offset 8
 194 0030 BD46     		mov	sp, r7
 195              	.LCFI9:
 196              		.cfi_def_cfa_register 13
 197              		@ sp needed
 198 0032 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE5:
 202              		.section	.text.xEventGroupSync,"ax",%progbits
 203              		.align	1
 204              		.global	xEventGroupSync
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 209              	xEventGroupSync:
 210              	.LFB6:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 211              		.loc 1 192 1
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 48
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 80B5     		push	{r7, lr}
 216              	.LCFI10:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 8CB0     		sub	sp, sp, #48
 221              	.LCFI11:
 222              		.cfi_def_cfa_offset 56
 223 0004 00AF     		add	r7, sp, #0
 224              	.LCFI12:
 225              		.cfi_def_cfa_register 7
 226 0006 F860     		str	r0, [r7, #12]
 227 0008 B960     		str	r1, [r7, #8]
 228 000a 7A60     		str	r2, [r7, #4]
 229 000c 3B60     		str	r3, [r7]
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 230              		.loc 1 194 15
 231 000e FB68     		ldr	r3, [r7, #12]
 232 0010 BB62     		str	r3, [r7, #40]
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 12


 233              		.loc 1 196 12
 234 0012 0023     		movs	r3, #0
 235 0014 7B62     		str	r3, [r7, #36]
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 236              		.loc 1 198 2
 237 0016 7B68     		ldr	r3, [r7, #4]
 238 0018 B3F1807F 		cmp	r3, #16777216
 239 001c 0BD3     		bcc	.L12
 240              	.LBB41:
 241              	.LBB42:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 242              		.loc 2 195 2
 243              		.syntax unified
 244              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 245 001e 4FF05003 			mov r3, #80												
 246 0022 83F31188 		msr basepri, r3											
 247 0026 BFF36F8F 		isb														
 248 002a BFF34F8F 		dsb														
 249              	
 250              	@ 0 "" 2
 251              		.thumb
 252              		.syntax unified
 253 002e BB61     		str	r3, [r7, #24]
 254              		.loc 2 203 1
 255 0030 00BF     		nop
 256              	.L13:
 257              	.LBE42:
 258              	.LBE41:
 259              		.loc 1 198 2
 260 0032 00BF     		nop
 261 0034 FDE7     		b	.L13
 262              	.L12:
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 263              		.loc 1 199 2
 264 0036 7B68     		ldr	r3, [r7, #4]
 265 0038 002B     		cmp	r3, #0
 266 003a 0BD1     		bne	.L14
 267              	.LBB43:
 268              	.LBB44:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 269              		.loc 2 195 2
 270              		.syntax unified
 271              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 272 003c 4FF05003 			mov r3, #80												
 273 0040 83F31188 		msr basepri, r3											
 274 0044 BFF36F8F 		isb														
 275 0048 BFF34F8F 		dsb														
 276              	
 277              	@ 0 "" 2
 278              		.thumb
 279              		.syntax unified
 280 004c 7B61     		str	r3, [r7, #20]
 281              		.loc 2 203 1
 282 004e 00BF     		nop
 283              	.L15:
 284              	.LBE44:
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 13


 285              	.LBE43:
 286              		.loc 1 199 2
 287 0050 00BF     		nop
 288 0052 FDE7     		b	.L15
 289              	.L14:
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 290              		.loc 1 202 3
 291 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 292 0058 0346     		mov	r3, r0
 293              		.loc 1 202 3 is_stmt 0 discriminator 1
 294 005a 002B     		cmp	r3, #0
 295 005c 02D1     		bne	.L16
 296              		.loc 1 202 3 discriminator 2
 297 005e 3B68     		ldr	r3, [r7]
 298 0060 002B     		cmp	r3, #0
 299 0062 01D1     		bne	.L17
 300              	.L16:
 301              		.loc 1 202 3 discriminator 3
 302 0064 0123     		movs	r3, #1
 303              		.loc 1 202 3
 304 0066 00E0     		b	.L18
 305              	.L17:
 306              		.loc 1 202 3 discriminator 4
 307 0068 0023     		movs	r3, #0
 308              	.L18:
 309              		.loc 1 202 3 discriminator 6
 310 006a 002B     		cmp	r3, #0
 311 006c 0BD1     		bne	.L19
 312              	.LBB45:
 313              	.LBB46:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 314              		.loc 2 195 2 is_stmt 1
 315              		.syntax unified
 316              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 317 006e 4FF05003 			mov r3, #80												
 318 0072 83F31188 		msr basepri, r3											
 319 0076 BFF36F8F 		isb														
 320 007a BFF34F8F 		dsb														
 321              	
 322              	@ 0 "" 2
 323              		.thumb
 324              		.syntax unified
 325 007e 3B61     		str	r3, [r7, #16]
 326              		.loc 2 203 1
 327 0080 00BF     		nop
 328              	.L20:
 329              	.LBE46:
 330              	.LBE45:
 331              		.loc 1 202 3
 332 0082 00BF     		nop
 333 0084 FDE7     		b	.L20
 334              	.L19:
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 14


 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 335              		.loc 1 206 2
 336 0086 FFF7FEFF 		bl	vTaskSuspendAll
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 337              		.loc 1 208 22
 338 008a BB6A     		ldr	r3, [r7, #40]
 339 008c 1B68     		ldr	r3, [r3]
 340 008e 3B62     		str	r3, [r7, #32]
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 341              		.loc 1 210 12
 342 0090 B968     		ldr	r1, [r7, #8]
 343 0092 F868     		ldr	r0, [r7, #12]
 344 0094 FFF7FEFF 		bl	xEventGroupSetBits
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 345              		.loc 1 212 30
 346 0098 3A6A     		ldr	r2, [r7, #32]
 347 009a BB68     		ldr	r3, [r7, #8]
 348 009c 1A43     		orrs	r2, r2, r3
 349              		.loc 1 212 46
 350 009e 7B68     		ldr	r3, [r7, #4]
 351 00a0 1340     		ands	r3, r3, r2
 352              		.loc 1 212 5
 353 00a2 7A68     		ldr	r2, [r7, #4]
 354 00a4 9A42     		cmp	r2, r3
 355 00a6 0DD1     		bne	.L21
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 356              		.loc 1 215 13
 357 00a8 3A6A     		ldr	r2, [r7, #32]
 358 00aa BB68     		ldr	r3, [r7, #8]
 359 00ac 1343     		orrs	r3, r3, r2
 360 00ae FB62     		str	r3, [r7, #44]
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 361              		.loc 1 219 15
 362 00b0 BB6A     		ldr	r3, [r7, #40]
 363 00b2 1A68     		ldr	r2, [r3]
 364              		.loc 1 219 32
 365 00b4 7B68     		ldr	r3, [r7, #4]
 366 00b6 DB43     		mvns	r3, r3
 367              		.loc 1 219 29
 368 00b8 1A40     		ands	r2, r2, r3
 369 00ba BB6A     		ldr	r3, [r7, #40]
 370 00bc 1A60     		str	r2, [r3]
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 371              		.loc 1 221 17
 372 00be 0023     		movs	r3, #0
 373 00c0 3B60     		str	r3, [r7]
 374 00c2 13E0     		b	.L22
 375              	.L21:
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 15


 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 376              		.loc 1 225 6
 377 00c4 3B68     		ldr	r3, [r7]
 378 00c6 002B     		cmp	r3, #0
 379 00c8 0BD0     		beq	.L23
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 380              		.loc 1 232 5
 381 00ca BB6A     		ldr	r3, [r7, #40]
 382 00cc 181D     		adds	r0, r3, #4
 383 00ce 7B68     		ldr	r3, [r7, #4]
 384 00d0 43F0A063 		orr	r3, r3, #83886080
 385 00d4 3A68     		ldr	r2, [r7]
 386 00d6 1946     		mov	r1, r3
 387 00d8 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 388              		.loc 1 238 14
 389 00dc 0023     		movs	r3, #0
 390 00de FB62     		str	r3, [r7, #44]
 391 00e0 04E0     		b	.L22
 392              	.L23:
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 393              		.loc 1 244 14
 394 00e2 BB6A     		ldr	r3, [r7, #40]
 395 00e4 1B68     		ldr	r3, [r3]
 396 00e6 FB62     		str	r3, [r7, #44]
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 397              		.loc 1 245 22
 398 00e8 0123     		movs	r3, #1
 399 00ea 7B62     		str	r3, [r7, #36]
 400              	.L22:
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 401              		.loc 1 249 20
 402 00ec FFF7FEFF 		bl	xTaskResumeAll
 403 00f0 F861     		str	r0, [r7, #28]
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 16


 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 404              		.loc 1 251 4
 405 00f2 3B68     		ldr	r3, [r7]
 406 00f4 002B     		cmp	r3, #0
 407 00f6 2CD0     		beq	.L24
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 408              		.loc 1 253 5
 409 00f8 FB69     		ldr	r3, [r7, #28]
 410 00fa 002B     		cmp	r3, #0
 411 00fc 07D1     		bne	.L25
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 412              		.loc 1 255 4
 413 00fe 174B     		ldr	r3, .L29
 414 0100 4FF08052 		mov	r2, #268435456
 415 0104 1A60     		str	r2, [r3]
 416              		.syntax unified
 417              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 418 0106 BFF34F8F 		dsb
 419              	@ 0 "" 2
 420              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 421 010a BFF36F8F 		isb
 422              	@ 0 "" 2
 423              		.thumb
 424              		.syntax unified
 425              	.L25:
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 426              		.loc 1 266 14
 427 010e FFF7FEFF 		bl	uxTaskResetEventItemValue
 428 0112 F862     		str	r0, [r7, #44]
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429              		.loc 1 268 18
 430 0114 FB6A     		ldr	r3, [r7, #44]
 431 0116 03F00073 		and	r3, r3, #33554432
 432              		.loc 1 268 5
 433 011a 002B     		cmp	r3, #0
 434 011c 15D1     		bne	.L26
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 435              		.loc 1 271 4
 436 011e FFF7FEFF 		bl	vPortEnterCritical
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 437              		.loc 1 273 14
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 17


 438 0122 BB6A     		ldr	r3, [r7, #40]
 439 0124 1B68     		ldr	r3, [r3]
 440 0126 FB62     		str	r3, [r7, #44]
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 441              		.loc 1 279 20
 442 0128 FA6A     		ldr	r2, [r7, #44]
 443 012a 7B68     		ldr	r3, [r7, #4]
 444 012c 1340     		ands	r3, r3, r2
 445              		.loc 1 279 7
 446 012e 7A68     		ldr	r2, [r7, #4]
 447 0130 9A42     		cmp	r2, r3
 448 0132 06D1     		bne	.L27
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 449              		.loc 1 281 17
 450 0134 BB6A     		ldr	r3, [r7, #40]
 451 0136 1A68     		ldr	r2, [r3]
 452              		.loc 1 281 34
 453 0138 7B68     		ldr	r3, [r7, #4]
 454 013a DB43     		mvns	r3, r3
 455              		.loc 1 281 31
 456 013c 1A40     		ands	r2, r2, r3
 457 013e BB6A     		ldr	r3, [r7, #40]
 458 0140 1A60     		str	r2, [r3]
 459              	.L27:
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 460              		.loc 1 288 4
 461 0142 FFF7FEFF 		bl	vPortExitCritical
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 462              		.loc 1 290 21
 463 0146 0123     		movs	r3, #1
 464 0148 7B62     		str	r3, [r7, #36]
 465              	.L26:
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 466              		.loc 1 299 12
 467 014a FB6A     		ldr	r3, [r7, #44]
 468 014c 23F07F43 		bic	r3, r3, #-16777216
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 18


 469 0150 FB62     		str	r3, [r7, #44]
 470              	.L24:
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 471              		.loc 1 307 9
 472 0152 FB6A     		ldr	r3, [r7, #44]
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 473              		.loc 1 308 1
 474 0154 1846     		mov	r0, r3
 475 0156 3037     		adds	r7, r7, #48
 476              	.LCFI13:
 477              		.cfi_def_cfa_offset 8
 478 0158 BD46     		mov	sp, r7
 479              	.LCFI14:
 480              		.cfi_def_cfa_register 13
 481              		@ sp needed
 482 015a 80BD     		pop	{r7, pc}
 483              	.L30:
 484              		.align	2
 485              	.L29:
 486 015c 04ED00E0 		.word	-536810236
 487              		.cfi_endproc
 488              	.LFE6:
 490              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 491              		.align	1
 492              		.global	xEventGroupWaitBits
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 497              	xEventGroupWaitBits:
 498              	.LFB7:
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 499              		.loc 1 312 1
 500              		.cfi_startproc
 501              		@ args = 4, pretend = 0, frame = 64
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 80B5     		push	{r7, lr}
 504              	.LCFI15:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 90B0     		sub	sp, sp, #64
 509              	.LCFI16:
 510              		.cfi_def_cfa_offset 72
 511 0004 00AF     		add	r7, sp, #0
 512              	.LCFI17:
 513              		.cfi_def_cfa_register 7
 514 0006 F860     		str	r0, [r7, #12]
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 19


 515 0008 B960     		str	r1, [r7, #8]
 516 000a 7A60     		str	r2, [r7, #4]
 517 000c 3B60     		str	r3, [r7]
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 518              		.loc 1 313 15
 519 000e FB68     		ldr	r3, [r7, #12]
 520 0010 7B63     		str	r3, [r7, #52]
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 521              		.loc 1 314 23
 522 0012 0023     		movs	r3, #0
 523 0014 BB63     		str	r3, [r7, #56]
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 524              		.loc 1 316 12
 525 0016 0023     		movs	r3, #0
 526 0018 3B63     		str	r3, [r7, #48]
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 527              		.loc 1 320 2
 528 001a FB68     		ldr	r3, [r7, #12]
 529 001c 002B     		cmp	r3, #0
 530 001e 0BD1     		bne	.L32
 531              	.LBB47:
 532              	.LBB48:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 533              		.loc 2 195 2
 534              		.syntax unified
 535              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 536 0020 4FF05003 			mov r3, #80												
 537 0024 83F31188 		msr basepri, r3											
 538 0028 BFF36F8F 		isb														
 539 002c BFF34F8F 		dsb														
 540              	
 541              	@ 0 "" 2
 542              		.thumb
 543              		.syntax unified
 544 0030 3B62     		str	r3, [r7, #32]
 545              		.loc 2 203 1
 546 0032 00BF     		nop
 547              	.L33:
 548              	.LBE48:
 549              	.LBE47:
 550              		.loc 1 320 2
 551 0034 00BF     		nop
 552 0036 FDE7     		b	.L33
 553              	.L32:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 554              		.loc 1 321 2
 555 0038 BB68     		ldr	r3, [r7, #8]
 556 003a B3F1807F 		cmp	r3, #16777216
 557 003e 0BD3     		bcc	.L34
 558              	.LBB49:
 559              	.LBB50:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 560              		.loc 2 195 2
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 20


 561              		.syntax unified
 562              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 563 0040 4FF05003 			mov r3, #80												
 564 0044 83F31188 		msr basepri, r3											
 565 0048 BFF36F8F 		isb														
 566 004c BFF34F8F 		dsb														
 567              	
 568              	@ 0 "" 2
 569              		.thumb
 570              		.syntax unified
 571 0050 FB61     		str	r3, [r7, #28]
 572              		.loc 2 203 1
 573 0052 00BF     		nop
 574              	.L35:
 575              	.LBE50:
 576              	.LBE49:
 577              		.loc 1 321 2
 578 0054 00BF     		nop
 579 0056 FDE7     		b	.L35
 580              	.L34:
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 581              		.loc 1 322 2
 582 0058 BB68     		ldr	r3, [r7, #8]
 583 005a 002B     		cmp	r3, #0
 584 005c 0BD1     		bne	.L36
 585              	.LBB51:
 586              	.LBB52:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 587              		.loc 2 195 2
 588              		.syntax unified
 589              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 590 005e 4FF05003 			mov r3, #80												
 591 0062 83F31188 		msr basepri, r3											
 592 0066 BFF36F8F 		isb														
 593 006a BFF34F8F 		dsb														
 594              	
 595              	@ 0 "" 2
 596              		.thumb
 597              		.syntax unified
 598 006e BB61     		str	r3, [r7, #24]
 599              		.loc 2 203 1
 600 0070 00BF     		nop
 601              	.L37:
 602              	.LBE52:
 603              	.LBE51:
 604              		.loc 1 322 2
 605 0072 00BF     		nop
 606 0074 FDE7     		b	.L37
 607              	.L36:
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 608              		.loc 1 325 3
 609 0076 FFF7FEFF 		bl	xTaskGetSchedulerState
 610 007a 0346     		mov	r3, r0
 611              		.loc 1 325 3 is_stmt 0 discriminator 1
 612 007c 002B     		cmp	r3, #0
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 21


 613 007e 02D1     		bne	.L38
 614              		.loc 1 325 3 discriminator 2
 615 0080 BB6C     		ldr	r3, [r7, #72]
 616 0082 002B     		cmp	r3, #0
 617 0084 01D1     		bne	.L39
 618              	.L38:
 619              		.loc 1 325 3 discriminator 3
 620 0086 0123     		movs	r3, #1
 621              		.loc 1 325 3
 622 0088 00E0     		b	.L40
 623              	.L39:
 624              		.loc 1 325 3 discriminator 4
 625 008a 0023     		movs	r3, #0
 626              	.L40:
 627              		.loc 1 325 3 discriminator 6
 628 008c 002B     		cmp	r3, #0
 629 008e 0BD1     		bne	.L41
 630              	.LBB53:
 631              	.LBB54:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 632              		.loc 2 195 2 is_stmt 1
 633              		.syntax unified
 634              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 635 0090 4FF05003 			mov r3, #80												
 636 0094 83F31188 		msr basepri, r3											
 637 0098 BFF36F8F 		isb														
 638 009c BFF34F8F 		dsb														
 639              	
 640              	@ 0 "" 2
 641              		.thumb
 642              		.syntax unified
 643 00a0 7B61     		str	r3, [r7, #20]
 644              		.loc 2 203 1
 645 00a2 00BF     		nop
 646              	.L42:
 647              	.LBE54:
 648              	.LBE53:
 649              		.loc 1 325 3
 650 00a4 00BF     		nop
 651 00a6 FDE7     		b	.L42
 652              	.L41:
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 653              		.loc 1 329 2
 654 00a8 FFF7FEFF 		bl	vTaskSuspendAll
 655              	.LBB55:
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 656              		.loc 1 331 21
 657 00ac 7B6B     		ldr	r3, [r7, #52]
 658 00ae 1B68     		ldr	r3, [r3]
 659 00b0 FB62     		str	r3, [r7, #44]
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 22


 660              		.loc 1 334 23
 661 00b2 3A68     		ldr	r2, [r7]
 662 00b4 B968     		ldr	r1, [r7, #8]
 663 00b6 F86A     		ldr	r0, [r7, #44]
 664 00b8 FFF7FEFF 		bl	prvTestWaitCondition
 665 00bc B862     		str	r0, [r7, #40]
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 666              		.loc 1 336 5
 667 00be BB6A     		ldr	r3, [r7, #40]
 668 00c0 002B     		cmp	r3, #0
 669 00c2 0ED0     		beq	.L43
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 670              		.loc 1 340 13
 671 00c4 FB6A     		ldr	r3, [r7, #44]
 672 00c6 FB63     		str	r3, [r7, #60]
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 673              		.loc 1 341 17
 674 00c8 0023     		movs	r3, #0
 675 00ca BB64     		str	r3, [r7, #72]
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 676              		.loc 1 344 6
 677 00cc 7B68     		ldr	r3, [r7, #4]
 678 00ce 002B     		cmp	r3, #0
 679 00d0 28D0     		beq	.L44
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 680              		.loc 1 346 16
 681 00d2 7B6B     		ldr	r3, [r7, #52]
 682 00d4 1A68     		ldr	r2, [r3]
 683              		.loc 1 346 33
 684 00d6 BB68     		ldr	r3, [r7, #8]
 685 00d8 DB43     		mvns	r3, r3
 686              		.loc 1 346 30
 687 00da 1A40     		ands	r2, r2, r3
 688 00dc 7B6B     		ldr	r3, [r7, #52]
 689 00de 1A60     		str	r2, [r3]
 690 00e0 20E0     		b	.L44
 691              	.L43:
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 692              		.loc 1 353 10
 693 00e2 BB6C     		ldr	r3, [r7, #72]
 694 00e4 002B     		cmp	r3, #0
 695 00e6 04D1     		bne	.L45
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 23


 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 696              		.loc 1 357 13
 697 00e8 FB6A     		ldr	r3, [r7, #44]
 698 00ea FB63     		str	r3, [r7, #60]
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 699              		.loc 1 358 21
 700 00ec 0123     		movs	r3, #1
 701 00ee 3B63     		str	r3, [r7, #48]
 702 00f0 18E0     		b	.L44
 703              	.L45:
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 704              		.loc 1 366 6
 705 00f2 7B68     		ldr	r3, [r7, #4]
 706 00f4 002B     		cmp	r3, #0
 707 00f6 03D0     		beq	.L46
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 708              		.loc 1 368 19
 709 00f8 BB6B     		ldr	r3, [r7, #56]
 710 00fa 43F08073 		orr	r3, r3, #16777216
 711 00fe BB63     		str	r3, [r7, #56]
 712              	.L46:
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 713              		.loc 1 375 6
 714 0100 3B68     		ldr	r3, [r7]
 715 0102 002B     		cmp	r3, #0
 716 0104 03D0     		beq	.L47
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 717              		.loc 1 377 19
 718 0106 BB6B     		ldr	r3, [r7, #56]
 719 0108 43F08063 		orr	r3, r3, #67108864
 720 010c BB63     		str	r3, [r7, #56]
 721              	.L47:
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 24


 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 722              		.loc 1 387 4
 723 010e 7B6B     		ldr	r3, [r7, #52]
 724 0110 181D     		adds	r0, r3, #4
 725 0112 BA68     		ldr	r2, [r7, #8]
 726 0114 BB6B     		ldr	r3, [r7, #56]
 727 0116 1343     		orrs	r3, r3, r2
 728 0118 BA6C     		ldr	r2, [r7, #72]
 729 011a 1946     		mov	r1, r3
 730 011c FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 731              		.loc 1 392 13
 732 0120 0023     		movs	r3, #0
 733 0122 FB63     		str	r3, [r7, #60]
 734              	.L44:
 735              	.LBE55:
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 736              		.loc 1 397 20
 737 0124 FFF7FEFF 		bl	xTaskResumeAll
 738 0128 7862     		str	r0, [r7, #36]
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 739              		.loc 1 399 4
 740 012a BB6C     		ldr	r3, [r7, #72]
 741 012c 002B     		cmp	r3, #0
 742 012e 31D0     		beq	.L48
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 743              		.loc 1 401 5
 744 0130 7B6A     		ldr	r3, [r7, #36]
 745 0132 002B     		cmp	r3, #0
 746 0134 07D1     		bne	.L49
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 747              		.loc 1 403 4
 748 0136 1A4B     		ldr	r3, .L53
 749 0138 4FF08052 		mov	r2, #268435456
 750 013c 1A60     		str	r2, [r3]
 751              		.syntax unified
 752              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 753 013e BFF34F8F 		dsb
 754              	@ 0 "" 2
 755              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 756 0142 BFF36F8F 		isb
 757              	@ 0 "" 2
 758              		.thumb
 759              		.syntax unified
 760              	.L49:
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 25


 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 761              		.loc 1 414 14
 762 0146 FFF7FEFF 		bl	uxTaskResetEventItemValue
 763 014a F863     		str	r0, [r7, #60]
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 764              		.loc 1 416 18
 765 014c FB6B     		ldr	r3, [r7, #60]
 766 014e 03F00073 		and	r3, r3, #33554432
 767              		.loc 1 416 5
 768 0152 002B     		cmp	r3, #0
 769 0154 1AD1     		bne	.L50
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 770              		.loc 1 418 4
 771 0156 FFF7FEFF 		bl	vPortEnterCritical
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 772              		.loc 1 421 14
 773 015a 7B6B     		ldr	r3, [r7, #52]
 774 015c 1B68     		ldr	r3, [r3]
 775 015e FB63     		str	r3, [r7, #60]
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 776              		.loc 1 425 9
 777 0160 3A68     		ldr	r2, [r7]
 778 0162 B968     		ldr	r1, [r7, #8]
 779 0164 F86B     		ldr	r0, [r7, #60]
 780 0166 FFF7FEFF 		bl	prvTestWaitCondition
 781 016a 0346     		mov	r3, r0
 782              		.loc 1 425 7 discriminator 1
 783 016c 002B     		cmp	r3, #0
 784 016e 09D0     		beq	.L51
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 785              		.loc 1 427 8
 786 0170 7B68     		ldr	r3, [r7, #4]
 787 0172 002B     		cmp	r3, #0
 788 0174 06D0     		beq	.L51
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 789              		.loc 1 429 18
 790 0176 7B6B     		ldr	r3, [r7, #52]
 791 0178 1A68     		ldr	r2, [r3]
 792              		.loc 1 429 35
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 26


 793 017a BB68     		ldr	r3, [r7, #8]
 794 017c DB43     		mvns	r3, r3
 795              		.loc 1 429 32
 796 017e 1A40     		ands	r2, r2, r3
 797 0180 7B6B     		ldr	r3, [r7, #52]
 798 0182 1A60     		str	r2, [r3]
 799              	.L51:
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 800              		.loc 1 440 22
 801 0184 0123     		movs	r3, #1
 802 0186 3B63     		str	r3, [r7, #48]
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 803              		.loc 1 442 4
 804 0188 FFF7FEFF 		bl	vPortExitCritical
 805              	.L50:
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 806              		.loc 1 450 12
 807 018c FB6B     		ldr	r3, [r7, #60]
 808 018e 23F07F43 		bic	r3, r3, #-16777216
 809 0192 FB63     		str	r3, [r7, #60]
 810              	.L48:
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 811              		.loc 1 457 9
 812 0194 FB6B     		ldr	r3, [r7, #60]
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 813              		.loc 1 458 1
 814 0196 1846     		mov	r0, r3
 815 0198 4037     		adds	r7, r7, #64
 816              	.LCFI18:
 817              		.cfi_def_cfa_offset 8
 818 019a BD46     		mov	sp, r7
 819              	.LCFI19:
 820              		.cfi_def_cfa_register 13
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 27


 821              		@ sp needed
 822 019c 80BD     		pop	{r7, pc}
 823              	.L54:
 824 019e 00BF     		.align	2
 825              	.L53:
 826 01a0 04ED00E0 		.word	-536810236
 827              		.cfi_endproc
 828              	.LFE7:
 830              		.section	.text.xEventGroupClearBits,"ax",%progbits
 831              		.align	1
 832              		.global	xEventGroupClearBits
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 837              	xEventGroupClearBits:
 838              	.LFB8:
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 839              		.loc 1 462 1
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 24
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0000 80B5     		push	{r7, lr}
 844              	.LCFI20:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 86B0     		sub	sp, sp, #24
 849              	.LCFI21:
 850              		.cfi_def_cfa_offset 32
 851 0004 00AF     		add	r7, sp, #0
 852              	.LCFI22:
 853              		.cfi_def_cfa_register 7
 854 0006 7860     		str	r0, [r7, #4]
 855 0008 3960     		str	r1, [r7]
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 856              		.loc 1 463 15
 857 000a 7B68     		ldr	r3, [r7, #4]
 858 000c 7B61     		str	r3, [r7, #20]
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 859              		.loc 1 468 2
 860 000e 7B68     		ldr	r3, [r7, #4]
 861 0010 002B     		cmp	r3, #0
 862 0012 0BD1     		bne	.L56
 863              	.LBB56:
 864              	.LBB57:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 865              		.loc 2 195 2
 866              		.syntax unified
 867              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 868 0014 4FF05003 			mov r3, #80												
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 28


 869 0018 83F31188 		msr basepri, r3											
 870 001c BFF36F8F 		isb														
 871 0020 BFF34F8F 		dsb														
 872              	
 873              	@ 0 "" 2
 874              		.thumb
 875              		.syntax unified
 876 0024 FB60     		str	r3, [r7, #12]
 877              		.loc 2 203 1
 878 0026 00BF     		nop
 879              	.L57:
 880              	.LBE57:
 881              	.LBE56:
 882              		.loc 1 468 2
 883 0028 00BF     		nop
 884 002a FDE7     		b	.L57
 885              	.L56:
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 886              		.loc 1 469 2
 887 002c 3B68     		ldr	r3, [r7]
 888 002e B3F1807F 		cmp	r3, #16777216
 889 0032 0BD3     		bcc	.L58
 890              	.LBB58:
 891              	.LBB59:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 892              		.loc 2 195 2
 893              		.syntax unified
 894              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 895 0034 4FF05003 			mov r3, #80												
 896 0038 83F31188 		msr basepri, r3											
 897 003c BFF36F8F 		isb														
 898 0040 BFF34F8F 		dsb														
 899              	
 900              	@ 0 "" 2
 901              		.thumb
 902              		.syntax unified
 903 0044 BB60     		str	r3, [r7, #8]
 904              		.loc 2 203 1
 905 0046 00BF     		nop
 906              	.L59:
 907              	.LBE59:
 908              	.LBE58:
 909              		.loc 1 469 2
 910 0048 00BF     		nop
 911 004a FDE7     		b	.L59
 912              	.L58:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 913              		.loc 1 471 2
 914 004c FFF7FEFF 		bl	vPortEnterCritical
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 915              		.loc 1 477 12
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 29


 916 0050 7B69     		ldr	r3, [r7, #20]
 917 0052 1B68     		ldr	r3, [r3]
 918 0054 3B61     		str	r3, [r7, #16]
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 919              		.loc 1 480 14
 920 0056 7B69     		ldr	r3, [r7, #20]
 921 0058 1A68     		ldr	r2, [r3]
 922              		.loc 1 480 31
 923 005a 3B68     		ldr	r3, [r7]
 924 005c DB43     		mvns	r3, r3
 925              		.loc 1 480 28
 926 005e 1A40     		ands	r2, r2, r3
 927 0060 7B69     		ldr	r3, [r7, #20]
 928 0062 1A60     		str	r2, [r3]
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 929              		.loc 1 482 2
 930 0064 FFF7FEFF 		bl	vPortExitCritical
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 931              		.loc 1 484 9
 932 0068 3B69     		ldr	r3, [r7, #16]
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 933              		.loc 1 485 1
 934 006a 1846     		mov	r0, r3
 935 006c 1837     		adds	r7, r7, #24
 936              	.LCFI23:
 937              		.cfi_def_cfa_offset 8
 938 006e BD46     		mov	sp, r7
 939              	.LCFI24:
 940              		.cfi_def_cfa_register 13
 941              		@ sp needed
 942 0070 80BD     		pop	{r7, pc}
 943              		.cfi_endproc
 944              	.LFE8:
 946              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 947              		.align	1
 948              		.global	xEventGroupClearBitsFromISR
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	xEventGroupClearBitsFromISR:
 954              	.LFB9:
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 955              		.loc 1 491 2
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 16
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}
 960              	.LCFI25:
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 30


 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 84B0     		sub	sp, sp, #16
 965              	.LCFI26:
 966              		.cfi_def_cfa_offset 24
 967 0004 00AF     		add	r7, sp, #0
 968              	.LCFI27:
 969              		.cfi_def_cfa_register 7
 970 0006 7860     		str	r0, [r7, #4]
 971 0008 3960     		str	r1, [r7]
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 972              		.loc 1 495 13
 973 000a 0023     		movs	r3, #0
 974 000c 3A68     		ldr	r2, [r7]
 975 000e 7968     		ldr	r1, [r7, #4]
 976 0010 0448     		ldr	r0, .L63
 977 0012 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 978 0016 F860     		str	r0, [r7, #12]
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 979              		.loc 1 497 10
 980 0018 FB68     		ldr	r3, [r7, #12]
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 981              		.loc 1 498 2
 982 001a 1846     		mov	r0, r3
 983 001c 1037     		adds	r7, r7, #16
 984              	.LCFI28:
 985              		.cfi_def_cfa_offset 8
 986 001e BD46     		mov	sp, r7
 987              	.LCFI29:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 0020 80BD     		pop	{r7, pc}
 991              	.L64:
 992 0022 00BF     		.align	2
 993              	.L63:
 994 0024 00000000 		.word	vEventGroupClearBitsCallback
 995              		.cfi_endproc
 996              	.LFE9:
 998              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 999              		.align	1
 1000              		.global	xEventGroupGetBitsFromISR
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1005              	xEventGroupGetBitsFromISR:
 1006              	.LFB10:
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 31


 1007              		.loc 1 504 1
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 32
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 0000 80B4     		push	{r7}
 1013              	.LCFI30:
 1014              		.cfi_def_cfa_offset 4
 1015              		.cfi_offset 7, -4
 1016 0002 89B0     		sub	sp, sp, #36
 1017              	.LCFI31:
 1018              		.cfi_def_cfa_offset 40
 1019 0004 00AF     		add	r7, sp, #0
 1020              	.LCFI32:
 1021              		.cfi_def_cfa_register 7
 1022 0006 7860     		str	r0, [r7, #4]
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 1023              		.loc 1 506 28
 1024 0008 7B68     		ldr	r3, [r7, #4]
 1025 000a FB61     		str	r3, [r7, #28]
 1026              	.LBB60:
 1027              	.LBB61:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1028              		.loc 2 211 2
 1029              		.syntax unified
 1030              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1031 000c EFF31182 			mrs r2, basepri											
 1032 0010 4FF05003 		mov r3, #80												
 1033 0014 83F31188 		msr basepri, r3											
 1034 0018 BFF36F8F 		isb														
 1035 001c BFF34F8F 		dsb														
 1036              	
 1037              	@ 0 "" 2
 1038              		.thumb
 1039              		.syntax unified
 1040 0020 FA60     		str	r2, [r7, #12]
 1041 0022 BB60     		str	r3, [r7, #8]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 32


 1042              		.loc 2 223 9
 1043 0024 FB68     		ldr	r3, [r7, #12]
 1044              	.LBE61:
 1045              	.LBE60:
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1046              		.loc 1 509 27
 1047 0026 BB61     		str	r3, [r7, #24]
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 1048              		.loc 1 511 12
 1049 0028 FB69     		ldr	r3, [r7, #28]
 1050 002a 1B68     		ldr	r3, [r3]
 1051 002c 7B61     		str	r3, [r7, #20]
 1052 002e BB69     		ldr	r3, [r7, #24]
 1053 0030 3B61     		str	r3, [r7, #16]
 1054              	.LBB62:
 1055              	.LBB63:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1056              		.loc 2 229 2
 1057 0032 3B69     		ldr	r3, [r7, #16]
 1058              		.syntax unified
 1059              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1060 0034 83F31188 			msr basepri, r3	
 1061              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1062              		.loc 2 233 1
 1063              		.thumb
 1064              		.syntax unified
 1065 0038 00BF     		nop
 1066              	.LBE63:
 1067              	.LBE62:
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 1068              		.loc 1 515 9
 1069 003a 7B69     		ldr	r3, [r7, #20]
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 1070              		.loc 1 516 1
 1071 003c 1846     		mov	r0, r3
 1072 003e 2437     		adds	r7, r7, #36
 1073              	.LCFI33:
 1074              		.cfi_def_cfa_offset 4
 1075 0040 BD46     		mov	sp, r7
 1076              	.LCFI34:
 1077              		.cfi_def_cfa_register 13
 1078              		@ sp needed
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 33


 1079 0042 5DF8047B 		ldr	r7, [sp], #4
 1080              	.LCFI35:
 1081              		.cfi_restore 7
 1082              		.cfi_def_cfa_offset 0
 1083 0046 7047     		bx	lr
 1084              		.cfi_endproc
 1085              	.LFE10:
 1087              		.section	.text.xEventGroupSetBits,"ax",%progbits
 1088              		.align	1
 1089              		.global	xEventGroupSetBits
 1090              		.syntax unified
 1091              		.thumb
 1092              		.thumb_func
 1094              	xEventGroupSetBits:
 1095              	.LFB11:
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1096              		.loc 1 520 1
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 56
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100 0000 80B5     		push	{r7, lr}
 1101              	.LCFI36:
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 7, -8
 1104              		.cfi_offset 14, -4
 1105 0002 8EB0     		sub	sp, sp, #56
 1106              	.LCFI37:
 1107              		.cfi_def_cfa_offset 64
 1108 0004 00AF     		add	r7, sp, #0
 1109              	.LCFI38:
 1110              		.cfi_def_cfa_register 7
 1111 0006 7860     		str	r0, [r7, #4]
 1112 0008 3960     		str	r1, [r7]
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1113              		.loc 1 524 13
 1114 000a 0023     		movs	r3, #0
 1115 000c 3B63     		str	r3, [r7, #48]
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1116              		.loc 1 525 15
 1117 000e 7B68     		ldr	r3, [r7, #4]
 1118 0010 BB62     		str	r3, [r7, #40]
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 1119              		.loc 1 526 12
 1120 0012 0023     		movs	r3, #0
 1121 0014 FB62     		str	r3, [r7, #44]
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 1122              		.loc 1 530 2
 1123 0016 7B68     		ldr	r3, [r7, #4]
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 34


 1124 0018 002B     		cmp	r3, #0
 1125 001a 0BD1     		bne	.L69
 1126              	.LBB64:
 1127              	.LBB65:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1128              		.loc 2 195 2
 1129              		.syntax unified
 1130              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1131 001c 4FF05003 			mov r3, #80												
 1132 0020 83F31188 		msr basepri, r3											
 1133 0024 BFF36F8F 		isb														
 1134 0028 BFF34F8F 		dsb														
 1135              	
 1136              	@ 0 "" 2
 1137              		.thumb
 1138              		.syntax unified
 1139 002c 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1140              		.loc 2 203 1
 1141 002e 00BF     		nop
 1142              	.L70:
 1143              	.LBE65:
 1144              	.LBE64:
 1145              		.loc 1 530 2
 1146 0030 00BF     		nop
 1147 0032 FDE7     		b	.L70
 1148              	.L69:
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 1149              		.loc 1 531 2
 1150 0034 3B68     		ldr	r3, [r7]
 1151 0036 B3F1807F 		cmp	r3, #16777216
 1152 003a 0BD3     		bcc	.L71
 1153              	.LBB66:
 1154              	.LBB67:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1155              		.loc 2 195 2
 1156              		.syntax unified
 1157              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1158 003c 4FF05003 			mov r3, #80												
 1159 0040 83F31188 		msr basepri, r3											
 1160 0044 BFF36F8F 		isb														
 1161 0048 BFF34F8F 		dsb														
 1162              	
 1163              	@ 0 "" 2
 1164              		.thumb
 1165              		.syntax unified
 1166 004c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1167              		.loc 2 203 1
 1168 004e 00BF     		nop
 1169              	.L72:
 1170              	.LBE67:
 1171              	.LBE66:
 1172              		.loc 1 531 2
 1173 0050 00BF     		nop
 1174 0052 FDE7     		b	.L72
 1175              	.L71:
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 35


 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 1176              		.loc 1 533 9
 1177 0054 BB6A     		ldr	r3, [r7, #40]
 1178 0056 0433     		adds	r3, r3, #4
 1179 0058 7B62     		str	r3, [r7, #36]
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 1180              		.loc 1 534 12
 1181 005a 7B6A     		ldr	r3, [r7, #36]
 1182 005c 0833     		adds	r3, r3, #8
 1183 005e 3B62     		str	r3, [r7, #32]
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1184              		.loc 1 535 2
 1185 0060 FFF7FEFF 		bl	vTaskSuspendAll
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 1186              		.loc 1 539 14
 1187 0064 7B6A     		ldr	r3, [r7, #36]
 1188 0066 DB68     		ldr	r3, [r3, #12]
 1189 0068 7B63     		str	r3, [r7, #52]
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 1190              		.loc 1 542 14
 1191 006a BB6A     		ldr	r3, [r7, #40]
 1192 006c 1A68     		ldr	r2, [r3]
 1193              		.loc 1 542 28
 1194 006e 3B68     		ldr	r3, [r7]
 1195 0070 1A43     		orrs	r2, r2, r3
 1196 0072 BB6A     		ldr	r3, [r7, #40]
 1197 0074 1A60     		str	r2, [r3]
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 1198              		.loc 1 545 8
 1199 0076 3CE0     		b	.L73
 1200              	.L78:
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 1201              		.loc 1 547 11
 1202 0078 7B6B     		ldr	r3, [r7, #52]
 1203 007a 5B68     		ldr	r3, [r3, #4]
 1204 007c FB61     		str	r3, [r7, #28]
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1205              		.loc 1 548 20
 1206 007e 7B6B     		ldr	r3, [r7, #52]
 1207 0080 1B68     		ldr	r3, [r3]
 1208 0082 BB61     		str	r3, [r7, #24]
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 1209              		.loc 1 549 16
 1210 0084 0023     		movs	r3, #0
 1211 0086 FB62     		str	r3, [r7, #44]
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 36


 1212              		.loc 1 552 18
 1213 0088 BB69     		ldr	r3, [r7, #24]
 1214 008a 03F07F43 		and	r3, r3, #-16777216
 1215 008e 7B61     		str	r3, [r7, #20]
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 1216              		.loc 1 553 20
 1217 0090 BB69     		ldr	r3, [r7, #24]
 1218 0092 23F07F43 		bic	r3, r3, #-16777216
 1219 0096 BB61     		str	r3, [r7, #24]
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 1220              		.loc 1 555 24
 1221 0098 7B69     		ldr	r3, [r7, #20]
 1222 009a 03F08063 		and	r3, r3, #67108864
 1223              		.loc 1 555 6
 1224 009e 002B     		cmp	r3, #0
 1225 00a0 08D1     		bne	.L74
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 1226              		.loc 1 558 40
 1227 00a2 BB6A     		ldr	r3, [r7, #40]
 1228 00a4 1A68     		ldr	r2, [r3]
 1229              		.loc 1 558 27
 1230 00a6 BB69     		ldr	r3, [r7, #24]
 1231 00a8 1340     		ands	r3, r3, r2
 1232              		.loc 1 558 7
 1233 00aa 002B     		cmp	r3, #0
 1234 00ac 0BD0     		beq	.L75
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 1235              		.loc 1 560 18
 1236 00ae 0123     		movs	r3, #1
 1237 00b0 FB62     		str	r3, [r7, #44]
 1238 00b2 08E0     		b	.L75
 1239              	.L74:
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 1240              		.loc 1 567 44
 1241 00b4 BB6A     		ldr	r3, [r7, #40]
 1242 00b6 1A68     		ldr	r2, [r3]
 1243              		.loc 1 567 31
 1244 00b8 BB69     		ldr	r3, [r7, #24]
 1245 00ba 1340     		ands	r3, r3, r2
 1246              		.loc 1 567 11
 1247 00bc BA69     		ldr	r2, [r7, #24]
 1248 00be 9A42     		cmp	r2, r3
 1249 00c0 01D1     		bne	.L75
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 1250              		.loc 1 570 17
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 37


 1251 00c2 0123     		movs	r3, #1
 1252 00c4 FB62     		str	r3, [r7, #44]
 1253              	.L75:
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 1254              		.loc 1 577 6
 1255 00c6 FB6A     		ldr	r3, [r7, #44]
 1256 00c8 002B     		cmp	r3, #0
 1257 00ca 10D0     		beq	.L76
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 1258              		.loc 1 580 25
 1259 00cc 7B69     		ldr	r3, [r7, #20]
 1260 00ce 03F08073 		and	r3, r3, #16777216
 1261              		.loc 1 580 7
 1262 00d2 002B     		cmp	r3, #0
 1263 00d4 03D0     		beq	.L77
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 1264              		.loc 1 582 20
 1265 00d6 3A6B     		ldr	r2, [r7, #48]
 1266 00d8 BB69     		ldr	r3, [r7, #24]
 1267 00da 1343     		orrs	r3, r3, r2
 1268 00dc 3B63     		str	r3, [r7, #48]
 1269              	.L77:
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 1270              		.loc 1 594 63
 1271 00de BB6A     		ldr	r3, [r7, #40]
 1272 00e0 1B68     		ldr	r3, [r3]
 1273              		.loc 1 594 5
 1274 00e2 43F00073 		orr	r3, r3, #33554432
 1275 00e6 1946     		mov	r1, r3
 1276 00e8 786B     		ldr	r0, [r7, #52]
 1277 00ea FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1278              	.L76:
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 38


 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 1279              		.loc 1 600 15
 1280 00ee FB69     		ldr	r3, [r7, #28]
 1281 00f0 7B63     		str	r3, [r7, #52]
 1282              	.L73:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1283              		.loc 1 545 21
 1284 00f2 7A6B     		ldr	r2, [r7, #52]
 1285 00f4 3B6A     		ldr	r3, [r7, #32]
 1286 00f6 9A42     		cmp	r2, r3
 1287 00f8 BED1     		bne	.L78
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1288              		.loc 1 605 14
 1289 00fa BB6A     		ldr	r3, [r7, #40]
 1290 00fc 1A68     		ldr	r2, [r3]
 1291              		.loc 1 605 31
 1292 00fe 3B6B     		ldr	r3, [r7, #48]
 1293 0100 DB43     		mvns	r3, r3
 1294              		.loc 1 605 28
 1295 0102 1A40     		ands	r2, r2, r3
 1296 0104 BB6A     		ldr	r3, [r7, #40]
 1297 0106 1A60     		str	r2, [r3]
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1298              		.loc 1 607 11
 1299 0108 FFF7FEFF 		bl	xTaskResumeAll
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 1300              		.loc 1 609 20
 1301 010c BB6A     		ldr	r3, [r7, #40]
 1302 010e 1B68     		ldr	r3, [r3]
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1303              		.loc 1 610 1
 1304 0110 1846     		mov	r0, r3
 1305 0112 3837     		adds	r7, r7, #56
 1306              	.LCFI39:
 1307              		.cfi_def_cfa_offset 8
 1308 0114 BD46     		mov	sp, r7
 1309              	.LCFI40:
 1310              		.cfi_def_cfa_register 13
 1311              		@ sp needed
 1312 0116 80BD     		pop	{r7, pc}
 1313              		.cfi_endproc
 1314              	.LFE11:
 1316              		.section	.text.vEventGroupDelete,"ax",%progbits
 1317              		.align	1
 1318              		.global	vEventGroupDelete
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1323              	vEventGroupDelete:
 1324              	.LFB12:
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 39


 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1325              		.loc 1 614 1
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 24
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329 0000 80B5     		push	{r7, lr}
 1330              	.LCFI41:
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334 0002 86B0     		sub	sp, sp, #24
 1335              	.LCFI42:
 1336              		.cfi_def_cfa_offset 32
 1337 0004 00AF     		add	r7, sp, #0
 1338              	.LCFI43:
 1339              		.cfi_def_cfa_register 7
 1340 0006 7860     		str	r0, [r7, #4]
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1341              		.loc 1 615 15
 1342 0008 7B68     		ldr	r3, [r7, #4]
 1343 000a 7B61     		str	r3, [r7, #20]
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1344              		.loc 1 616 15
 1345 000c 7B69     		ldr	r3, [r7, #20]
 1346 000e 0433     		adds	r3, r3, #4
 1347 0010 3B61     		str	r3, [r7, #16]
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1348              		.loc 1 618 2
 1349 0012 FFF7FEFF 		bl	vTaskSuspendAll
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 1350              		.loc 1 622 8
 1351 0016 18E0     		b	.L81
 1352              	.L84:
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 1353              		.loc 1 626 4
 1354 0018 3B69     		ldr	r3, [r7, #16]
 1355 001a DA68     		ldr	r2, [r3, #12]
 1356 001c 3B69     		ldr	r3, [r7, #16]
 1357 001e 0833     		adds	r3, r3, #8
 1358 0020 9A42     		cmp	r2, r3
 1359 0022 0BD1     		bne	.L82
 1360              	.LBB68:
 1361              	.LBB69:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1362              		.loc 2 195 2
 1363              		.syntax unified
 1364              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1365 0024 4FF05003 			mov r3, #80												
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 40


 1366 0028 83F31188 		msr basepri, r3											
 1367 002c BFF36F8F 		isb														
 1368 0030 BFF34F8F 		dsb														
 1369              	
 1370              	@ 0 "" 2
 1371              		.thumb
 1372              		.syntax unified
 1373 0034 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1374              		.loc 2 203 1
 1375 0036 00BF     		nop
 1376              	.L83:
 1377              	.LBE69:
 1378              	.LBE68:
 1379              		.loc 1 626 4
 1380 0038 00BF     		nop
 1381 003a FDE7     		b	.L83
 1382              	.L82:
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1383              		.loc 1 627 70
 1384 003c 3B69     		ldr	r3, [r7, #16]
 1385 003e DB68     		ldr	r3, [r3, #12]
 1386              		.loc 1 627 4
 1387 0040 4FF00071 		mov	r1, #33554432
 1388 0044 1846     		mov	r0, r3
 1389 0046 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1390              	.L81:
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1391              		.loc 1 622 10
 1392 004a 3B69     		ldr	r3, [r7, #16]
 1393 004c 1B68     		ldr	r3, [r3]
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1394              		.loc 1 622 59
 1395 004e 002B     		cmp	r3, #0
 1396 0050 E2D1     		bne	.L84
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 1397              		.loc 1 640 19
 1398 0052 7B69     		ldr	r3, [r7, #20]
 1399 0054 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1400              		.loc 1 640 6
 1401 0056 002B     		cmp	r3, #0
 1402 0058 02D1     		bne	.L85
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 1403              		.loc 1 642 5
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 41


 1404 005a 7869     		ldr	r0, [r7, #20]
 1405 005c FFF7FEFF 		bl	vPortFree
 1406              	.L85:
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1407              		.loc 1 651 11
 1408 0060 FFF7FEFF 		bl	xTaskResumeAll
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1409              		.loc 1 652 1
 1410 0064 00BF     		nop
 1411 0066 1837     		adds	r7, r7, #24
 1412              	.LCFI44:
 1413              		.cfi_def_cfa_offset 8
 1414 0068 BD46     		mov	sp, r7
 1415              	.LCFI45:
 1416              		.cfi_def_cfa_register 13
 1417              		@ sp needed
 1418 006a 80BD     		pop	{r7, pc}
 1419              		.cfi_endproc
 1420              	.LFE12:
 1422              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1423              		.align	1
 1424              		.global	vEventGroupSetBitsCallback
 1425              		.syntax unified
 1426              		.thumb
 1427              		.thumb_func
 1429              	vEventGroupSetBitsCallback:
 1430              	.LFB13:
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1431              		.loc 1 658 1
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 8
 1434              		@ frame_needed = 1, uses_anonymous_args = 0
 1435 0000 80B5     		push	{r7, lr}
 1436              	.LCFI46:
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 7, -8
 1439              		.cfi_offset 14, -4
 1440 0002 82B0     		sub	sp, sp, #8
 1441              	.LCFI47:
 1442              		.cfi_def_cfa_offset 16
 1443 0004 00AF     		add	r7, sp, #0
 1444              	.LCFI48:
 1445              		.cfi_def_cfa_register 7
 1446 0006 7860     		str	r0, [r7, #4]
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 42


 1447 0008 3960     		str	r1, [r7]
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1448              		.loc 1 659 11
 1449 000a 3968     		ldr	r1, [r7]
 1450 000c 7868     		ldr	r0, [r7, #4]
 1451 000e FFF7FEFF 		bl	xEventGroupSetBits
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1452              		.loc 1 660 1
 1453 0012 00BF     		nop
 1454 0014 0837     		adds	r7, r7, #8
 1455              	.LCFI49:
 1456              		.cfi_def_cfa_offset 8
 1457 0016 BD46     		mov	sp, r7
 1458              	.LCFI50:
 1459              		.cfi_def_cfa_register 13
 1460              		@ sp needed
 1461 0018 80BD     		pop	{r7, pc}
 1462              		.cfi_endproc
 1463              	.LFE13:
 1465              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1466              		.align	1
 1467              		.global	vEventGroupClearBitsCallback
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1472              	vEventGroupClearBitsCallback:
 1473              	.LFB14:
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1474              		.loc 1 666 1
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 8
 1477              		@ frame_needed = 1, uses_anonymous_args = 0
 1478 0000 80B5     		push	{r7, lr}
 1479              	.LCFI51:
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 7, -8
 1482              		.cfi_offset 14, -4
 1483 0002 82B0     		sub	sp, sp, #8
 1484              	.LCFI52:
 1485              		.cfi_def_cfa_offset 16
 1486 0004 00AF     		add	r7, sp, #0
 1487              	.LCFI53:
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
 1490 0008 3960     		str	r1, [r7]
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 1491              		.loc 1 667 11
 1492 000a 3968     		ldr	r1, [r7]
 1493 000c 7868     		ldr	r0, [r7, #4]
 1494 000e FFF7FEFF 		bl	xEventGroupClearBits
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1495              		.loc 1 668 1
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 43


 1496 0012 00BF     		nop
 1497 0014 0837     		adds	r7, r7, #8
 1498              	.LCFI54:
 1499              		.cfi_def_cfa_offset 8
 1500 0016 BD46     		mov	sp, r7
 1501              	.LCFI55:
 1502              		.cfi_def_cfa_register 13
 1503              		@ sp needed
 1504 0018 80BD     		pop	{r7, pc}
 1505              		.cfi_endproc
 1506              	.LFE14:
 1508              		.section	.text.prvTestWaitCondition,"ax",%progbits
 1509              		.align	1
 1510              		.syntax unified
 1511              		.thumb
 1512              		.thumb_func
 1514              	prvTestWaitCondition:
 1515              	.LFB15:
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1516              		.loc 1 672 1
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 24
 1519              		@ frame_needed = 1, uses_anonymous_args = 0
 1520              		@ link register save eliminated.
 1521 0000 80B4     		push	{r7}
 1522              	.LCFI56:
 1523              		.cfi_def_cfa_offset 4
 1524              		.cfi_offset 7, -4
 1525 0002 87B0     		sub	sp, sp, #28
 1526              	.LCFI57:
 1527              		.cfi_def_cfa_offset 32
 1528 0004 00AF     		add	r7, sp, #0
 1529              	.LCFI58:
 1530              		.cfi_def_cfa_register 7
 1531 0006 F860     		str	r0, [r7, #12]
 1532 0008 B960     		str	r1, [r7, #8]
 1533 000a 7A60     		str	r2, [r7, #4]
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 1534              		.loc 1 673 12
 1535 000c 0023     		movs	r3, #0
 1536 000e 7B61     		str	r3, [r7, #20]
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 1537              		.loc 1 675 4
 1538 0010 7B68     		ldr	r3, [r7, #4]
 1539 0012 002B     		cmp	r3, #0
 1540 0014 07D1     		bne	.L89
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1541              		.loc 1 679 28
 1542 0016 FA68     		ldr	r2, [r7, #12]
 1543 0018 BB68     		ldr	r3, [r7, #8]
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 44


 1544 001a 1340     		ands	r3, r3, r2
 1545              		.loc 1 679 5
 1546 001c 002B     		cmp	r3, #0
 1547 001e 0AD0     		beq	.L90
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1548              		.loc 1 681 22
 1549 0020 0123     		movs	r3, #1
 1550 0022 7B61     		str	r3, [r7, #20]
 1551 0024 07E0     		b	.L90
 1552              	.L89:
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1553              		.loc 1 692 28
 1554 0026 FA68     		ldr	r2, [r7, #12]
 1555 0028 BB68     		ldr	r3, [r7, #8]
 1556 002a 1340     		ands	r3, r3, r2
 1557              		.loc 1 692 5
 1558 002c BA68     		ldr	r2, [r7, #8]
 1559 002e 9A42     		cmp	r2, r3
 1560 0030 01D1     		bne	.L90
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1561              		.loc 1 694 22
 1562 0032 0123     		movs	r3, #1
 1563 0034 7B61     		str	r3, [r7, #20]
 1564              	.L90:
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 1565              		.loc 1 702 9
 1566 0036 7B69     		ldr	r3, [r7, #20]
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1567              		.loc 1 703 1
 1568 0038 1846     		mov	r0, r3
 1569 003a 1C37     		adds	r7, r7, #28
 1570              	.LCFI59:
 1571              		.cfi_def_cfa_offset 4
 1572 003c BD46     		mov	sp, r7
 1573              	.LCFI60:
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 003e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 45


 1577              	.LCFI61:
 1578              		.cfi_restore 7
 1579              		.cfi_def_cfa_offset 0
 1580 0042 7047     		bx	lr
 1581              		.cfi_endproc
 1582              	.LFE15:
 1584              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1585              		.align	1
 1586              		.global	xEventGroupSetBitsFromISR
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1591              	xEventGroupSetBitsFromISR:
 1592              	.LFB16:
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1593              		.loc 1 709 2
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 24
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597 0000 80B5     		push	{r7, lr}
 1598              	.LCFI62:
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 86B0     		sub	sp, sp, #24
 1603              	.LCFI63:
 1604              		.cfi_def_cfa_offset 32
 1605 0004 00AF     		add	r7, sp, #0
 1606              	.LCFI64:
 1607              		.cfi_def_cfa_register 7
 1608 0006 F860     		str	r0, [r7, #12]
 1609 0008 B960     		str	r1, [r7, #8]
 1610 000a 7A60     		str	r2, [r7, #4]
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1611              		.loc 1 713 13
 1612 000c 7B68     		ldr	r3, [r7, #4]
 1613 000e BA68     		ldr	r2, [r7, #8]
 1614 0010 F968     		ldr	r1, [r7, #12]
 1615 0012 0448     		ldr	r0, .L94
 1616 0014 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1617 0018 7861     		str	r0, [r7, #20]
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1618              		.loc 1 715 10
 1619 001a 7B69     		ldr	r3, [r7, #20]
 716:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1620              		.loc 1 716 2
 1621 001c 1846     		mov	r0, r3
 1622 001e 1837     		adds	r7, r7, #24
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 46


 1623              	.LCFI65:
 1624              		.cfi_def_cfa_offset 8
 1625 0020 BD46     		mov	sp, r7
 1626              	.LCFI66:
 1627              		.cfi_def_cfa_register 13
 1628              		@ sp needed
 1629 0022 80BD     		pop	{r7, pc}
 1630              	.L95:
 1631              		.align	2
 1632              	.L94:
 1633 0024 00000000 		.word	vEventGroupSetBitsCallback
 1634              		.cfi_endproc
 1635              	.LFE16:
 1637              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1638              		.align	1
 1639              		.global	uxEventGroupGetNumber
 1640              		.syntax unified
 1641              		.thumb
 1642              		.thumb_func
 1644              	uxEventGroupGetNumber:
 1645              	.LFB17:
 717:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 719:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 720:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 722:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 724:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1646              		.loc 1 724 2
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 16
 1649              		@ frame_needed = 1, uses_anonymous_args = 0
 1650              		@ link register save eliminated.
 1651 0000 80B4     		push	{r7}
 1652              	.LCFI67:
 1653              		.cfi_def_cfa_offset 4
 1654              		.cfi_offset 7, -4
 1655 0002 85B0     		sub	sp, sp, #20
 1656              	.LCFI68:
 1657              		.cfi_def_cfa_offset 24
 1658 0004 00AF     		add	r7, sp, #0
 1659              	.LCFI69:
 1660              		.cfi_def_cfa_register 7
 1661 0006 7860     		str	r0, [r7, #4]
 725:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupH
 1662              		.loc 1 726 22
 1663 0008 7B68     		ldr	r3, [r7, #4]
 1664 000a BB60     		str	r3, [r7, #8]
 727:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1665              		.loc 1 728 5
 1666 000c 7B68     		ldr	r3, [r7, #4]
 1667 000e 002B     		cmp	r3, #0
 1668 0010 02D1     		bne	.L97
 729:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 47


 730:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 1669              		.loc 1 730 12
 1670 0012 0023     		movs	r3, #0
 1671 0014 FB60     		str	r3, [r7, #12]
 1672 0016 02E0     		b	.L98
 1673              	.L97:
 731:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 732:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 733:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 734:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1674              		.loc 1 734 12
 1675 0018 BB68     		ldr	r3, [r7, #8]
 1676 001a 9B69     		ldr	r3, [r3, #24]
 1677 001c FB60     		str	r3, [r7, #12]
 1678              	.L98:
 735:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 736:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 737:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1679              		.loc 1 737 10
 1680 001e FB68     		ldr	r3, [r7, #12]
 738:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1681              		.loc 1 738 2
 1682 0020 1846     		mov	r0, r3
 1683 0022 1437     		adds	r7, r7, #20
 1684              	.LCFI70:
 1685              		.cfi_def_cfa_offset 4
 1686 0024 BD46     		mov	sp, r7
 1687              	.LCFI71:
 1688              		.cfi_def_cfa_register 13
 1689              		@ sp needed
 1690 0026 5DF8047B 		ldr	r7, [sp], #4
 1691              	.LCFI72:
 1692              		.cfi_restore 7
 1693              		.cfi_def_cfa_offset 0
 1694 002a 7047     		bx	lr
 1695              		.cfi_endproc
 1696              	.LFE17:
 1698              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1699              		.align	1
 1700              		.global	vEventGroupSetNumber
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1705              	vEventGroupSetNumber:
 1706              	.LFB18:
 739:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 741:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 742:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 744:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 745:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 746:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1707              		.loc 1 746 2
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 8
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 48


 1711              		@ link register save eliminated.
 1712 0000 80B4     		push	{r7}
 1713              	.LCFI73:
 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 83B0     		sub	sp, sp, #12
 1717              	.LCFI74:
 1718              		.cfi_def_cfa_offset 16
 1719 0004 00AF     		add	r7, sp, #0
 1720              	.LCFI75:
 1721              		.cfi_def_cfa_register 7
 1722 0006 7860     		str	r0, [r7, #4]
 1723 0008 3960     		str	r1, [r7]
 747:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079
 1724              		.loc 1 747 58
 1725 000a 7B68     		ldr	r3, [r7, #4]
 1726 000c 3A68     		ldr	r2, [r7]
 1727 000e 9A61     		str	r2, [r3, #24]
 748:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1728              		.loc 1 748 2
 1729 0010 00BF     		nop
 1730 0012 0C37     		adds	r7, r7, #12
 1731              	.LCFI76:
 1732              		.cfi_def_cfa_offset 4
 1733 0014 BD46     		mov	sp, r7
 1734              	.LCFI77:
 1735              		.cfi_def_cfa_register 13
 1736              		@ sp needed
 1737 0016 5DF8047B 		ldr	r7, [sp], #4
 1738              	.LCFI78:
 1739              		.cfi_restore 7
 1740              		.cfi_def_cfa_offset 0
 1741 001a 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE18:
 1745              		.text
 1746              	.Letext0:
 1747              		.file 3 "D:/msys64/mingw64/lib/gcc/arm-none-eabi/13.3.0/include/stddef.h"
 1748              		.file 4 "D:/msys64/mingw64/arm-none-eabi/include/machine/_default_types.h"
 1749              		.file 5 "D:/msys64/mingw64/arm-none-eabi/include/sys/_stdint.h"
 1750              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1751              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1752              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1753              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1754              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 1755              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  D:\msys64\tmp\cculaJq7.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
D:\msys64\tmp\cculaJq7.s:21     .text.xEventGroupCreateStatic:00000000 $t
D:\msys64\tmp\cculaJq7.s:27     .text.xEventGroupCreateStatic:00000000 xEventGroupCreateStatic
D:\msys64\tmp\cculaJq7.s:142    .text.xEventGroupCreate:00000000 $t
D:\msys64\tmp\cculaJq7.s:148    .text.xEventGroupCreate:00000000 xEventGroupCreate
D:\msys64\tmp\cculaJq7.s:203    .text.xEventGroupSync:00000000 $t
D:\msys64\tmp\cculaJq7.s:209    .text.xEventGroupSync:00000000 xEventGroupSync
D:\msys64\tmp\cculaJq7.s:1094   .text.xEventGroupSetBits:00000000 xEventGroupSetBits
D:\msys64\tmp\cculaJq7.s:486    .text.xEventGroupSync:0000015c $d
D:\msys64\tmp\cculaJq7.s:491    .text.xEventGroupWaitBits:00000000 $t
D:\msys64\tmp\cculaJq7.s:497    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
D:\msys64\tmp\cculaJq7.s:1514   .text.prvTestWaitCondition:00000000 prvTestWaitCondition
D:\msys64\tmp\cculaJq7.s:826    .text.xEventGroupWaitBits:000001a0 $d
D:\msys64\tmp\cculaJq7.s:831    .text.xEventGroupClearBits:00000000 $t
D:\msys64\tmp\cculaJq7.s:837    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
D:\msys64\tmp\cculaJq7.s:947    .text.xEventGroupClearBitsFromISR:00000000 $t
D:\msys64\tmp\cculaJq7.s:953    .text.xEventGroupClearBitsFromISR:00000000 xEventGroupClearBitsFromISR
D:\msys64\tmp\cculaJq7.s:994    .text.xEventGroupClearBitsFromISR:00000024 $d
D:\msys64\tmp\cculaJq7.s:1472   .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
D:\msys64\tmp\cculaJq7.s:999    .text.xEventGroupGetBitsFromISR:00000000 $t
D:\msys64\tmp\cculaJq7.s:1005   .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
D:\msys64\tmp\cculaJq7.s:1088   .text.xEventGroupSetBits:00000000 $t
D:\msys64\tmp\cculaJq7.s:1317   .text.vEventGroupDelete:00000000 $t
D:\msys64\tmp\cculaJq7.s:1323   .text.vEventGroupDelete:00000000 vEventGroupDelete
D:\msys64\tmp\cculaJq7.s:1423   .text.vEventGroupSetBitsCallback:00000000 $t
D:\msys64\tmp\cculaJq7.s:1429   .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
D:\msys64\tmp\cculaJq7.s:1466   .text.vEventGroupClearBitsCallback:00000000 $t
D:\msys64\tmp\cculaJq7.s:1509   .text.prvTestWaitCondition:00000000 $t
D:\msys64\tmp\cculaJq7.s:1585   .text.xEventGroupSetBitsFromISR:00000000 $t
D:\msys64\tmp\cculaJq7.s:1591   .text.xEventGroupSetBitsFromISR:00000000 xEventGroupSetBitsFromISR
D:\msys64\tmp\cculaJq7.s:1633   .text.xEventGroupSetBitsFromISR:00000024 $d
D:\msys64\tmp\cculaJq7.s:1638   .text.uxEventGroupGetNumber:00000000 $t
D:\msys64\tmp\cculaJq7.s:1644   .text.uxEventGroupGetNumber:00000000 uxEventGroupGetNumber
D:\msys64\tmp\cculaJq7.s:1699   .text.vEventGroupSetNumber:00000000 $t
D:\msys64\tmp\cculaJq7.s:1705   .text.vEventGroupSetNumber:00000000 vEventGroupSetNumber

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
