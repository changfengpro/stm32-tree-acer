ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"Bsp_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Bsp/Bsp_can.c"
  20              		.section	.text.can_user_init,"ax",%progbits
  21              		.align	1
  22              		.global	can_user_init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	can_user_init:
  28              	.LVL0:
  29              	.LFB134:
   1:Bsp/Bsp_can.c **** /*
   2:Bsp/Bsp_can.c ****  * Bsp_can.c
   3:Bsp/Bsp_can.c ****  *
   4:Bsp/Bsp_can.c ****  *  Created on: Jul 14, 2024
   5:Bsp/Bsp_can.c ****  *      Author: auroranebulas
   6:Bsp/Bsp_can.c ****  */
   7:Bsp/Bsp_can.c ****  
   8:Bsp/Bsp_can.c **** 
   9:Bsp/Bsp_can.c **** #include "Bsp_can.h"
  10:Bsp/Bsp_can.c **** #include "chassis_control.h"
  11:Bsp/Bsp_can.c **** #include "djimotor.h"
  12:Bsp/Bsp_can.c **** 
  13:Bsp/Bsp_can.c **** 
  14:Bsp/Bsp_can.c **** moto_info_t motor_info[MOTOR_MAX_NUM] = { 0 };
  15:Bsp/Bsp_can.c **** uint32_t index_check;
  16:Bsp/Bsp_can.c **** 
  17:Bsp/Bsp_can.c **** 
  18:Bsp/Bsp_can.c **** void can_user_init(CAN_HandleTypeDef* hcan )
  19:Bsp/Bsp_can.c **** {
  30              		.loc 1 19 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 40
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 19 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 2


  40 0002 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  20:Bsp/Bsp_can.c ****   CAN_FilterTypeDef  can_filter;
  43              		.loc 1 20 3 is_stmt 1 view .LVU2
  21:Bsp/Bsp_can.c **** 
  22:Bsp/Bsp_can.c ****   can_filter.FilterBank = 0;                       // filter 0
  44              		.loc 1 22 3 view .LVU3
  45              		.loc 1 22 25 is_stmt 0 view .LVU4
  46 0004 0023     		movs	r3, #0
  47 0006 0593     		str	r3, [sp, #20]
  23:Bsp/Bsp_can.c ****   can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
  48              		.loc 1 23 3 is_stmt 1 view .LVU5
  49              		.loc 1 23 25 is_stmt 0 view .LVU6
  50 0008 0693     		str	r3, [sp, #24]
  24:Bsp/Bsp_can.c ****   can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
  51              		.loc 1 24 3 is_stmt 1 view .LVU7
  52              		.loc 1 24 26 is_stmt 0 view .LVU8
  53 000a 0122     		movs	r2, #1
  54 000c 0792     		str	r2, [sp, #28]
  25:Bsp/Bsp_can.c ****   can_filter.FilterIdHigh = 0;
  55              		.loc 1 25 3 is_stmt 1 view .LVU9
  56              		.loc 1 25 27 is_stmt 0 view .LVU10
  57 000e 0093     		str	r3, [sp]
  26:Bsp/Bsp_can.c ****   can_filter.FilterIdLow  = 0;
  58              		.loc 1 26 3 is_stmt 1 view .LVU11
  59              		.loc 1 26 27 is_stmt 0 view .LVU12
  60 0010 0193     		str	r3, [sp, #4]
  27:Bsp/Bsp_can.c ****   can_filter.FilterMaskIdHigh = 0;
  61              		.loc 1 27 3 is_stmt 1 view .LVU13
  62              		.loc 1 27 31 is_stmt 0 view .LVU14
  63 0012 0293     		str	r3, [sp, #8]
  28:Bsp/Bsp_can.c ****   can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
  64              		.loc 1 28 3 is_stmt 1 view .LVU15
  65              		.loc 1 28 31 is_stmt 0 view .LVU16
  66 0014 0393     		str	r3, [sp, #12]
  29:Bsp/Bsp_can.c ****   can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
  67              		.loc 1 29 3 is_stmt 1 view .LVU17
  68              		.loc 1 29 35 is_stmt 0 view .LVU18
  69 0016 0493     		str	r3, [sp, #16]
  30:Bsp/Bsp_can.c ****   can_filter.FilterActivation = ENABLE;           // enable can filter
  70              		.loc 1 30 3 is_stmt 1 view .LVU19
  71              		.loc 1 30 31 is_stmt 0 view .LVU20
  72 0018 0892     		str	r2, [sp, #32]
  31:Bsp/Bsp_can.c ****   can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
  73              		.loc 1 31 3 is_stmt 1 view .LVU21
  74              		.loc 1 31 36 is_stmt 0 view .LVU22
  75 001a 0E23     		movs	r3, #14
  76 001c 0993     		str	r3, [sp, #36]
  32:Bsp/Bsp_can.c ****   HAL_CAN_ConfigFilter(&hcan1, &can_filter);      // init can filter
  77              		.loc 1 32 3 is_stmt 1 view .LVU23
  78 001e 084C     		ldr	r4, .L3
  79 0020 6946     		mov	r1, sp
  80 0022 2046     		mov	r0, r4
  81              	.LVL1:
  82              		.loc 1 32 3 is_stmt 0 view .LVU24
  83 0024 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 3


  84              	.LVL2:
  33:Bsp/Bsp_can.c ****   HAL_CAN_Start(&hcan1);                          // start can1
  85              		.loc 1 33 3 is_stmt 1 view .LVU25
  86 0028 2046     		mov	r0, r4
  87 002a FFF7FEFF 		bl	HAL_CAN_Start
  88              	.LVL3:
  34:Bsp/Bsp_can.c **** 
  35:Bsp/Bsp_can.c ****   can_filter.FilterBank = 15;
  89              		.loc 1 35 3 view .LVU26
  90              		.loc 1 35 25 is_stmt 0 view .LVU27
  91 002e 0F23     		movs	r3, #15
  92 0030 0593     		str	r3, [sp, #20]
  36:Bsp/Bsp_can.c **** 
  37:Bsp/Bsp_can.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
  93              		.loc 1 37 3 is_stmt 1 view .LVU28
  94 0032 0221     		movs	r1, #2
  95 0034 2046     		mov	r0, r4
  96 0036 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
  97              	.LVL4:
  38:Bsp/Bsp_can.c **** 
  39:Bsp/Bsp_can.c **** }
  98              		.loc 1 39 1 is_stmt 0 view .LVU29
  99 003a 0AB0     		add	sp, sp, #40
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 8
 102              		@ sp needed
 103 003c 10BD     		pop	{r4, pc}
 104              	.L4:
 105 003e 00BF     		.align	2
 106              	.L3:
 107 0040 00000000 		.word	hcan1
 108              		.cfi_endproc
 109              	.LFE134:
 111              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 112              		.align	1
 113              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	HAL_CAN_RxFifo0MsgPendingCallback:
 119              	.LVL5:
 120              	.LFB135:
  40:Bsp/Bsp_can.c **** 
  41:Bsp/Bsp_can.c **** 
  42:Bsp/Bsp_can.c **** 
  43:Bsp/Bsp_can.c **** 
  44:Bsp/Bsp_can.c **** 
  45:Bsp/Bsp_can.c **** 
  46:Bsp/Bsp_can.c **** 
  47:Bsp/Bsp_can.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
  48:Bsp/Bsp_can.c **** {
 121              		.loc 1 48 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 40
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		.loc 1 48 1 is_stmt 0 view .LVU31
 126 0000 00B5     		push	{lr}
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 4


 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 14, -4
 130 0002 8BB0     		sub	sp, sp, #44
 131              	.LCFI4:
 132              		.cfi_def_cfa_offset 48
  49:Bsp/Bsp_can.c ****   CAN_RxHeaderTypeDef rx_header;
 133              		.loc 1 49 3 is_stmt 1 view .LVU32
  50:Bsp/Bsp_can.c ****   uint8_t             rx_data[8];
 134              		.loc 1 50 3 view .LVU33
  51:Bsp/Bsp_can.c ****   uint8_t index;
 135              		.loc 1 51 3 view .LVU34
  52:Bsp/Bsp_can.c ****   // if(hcan->Instance == CAN1)
  53:Bsp/Bsp_can.c ****   // {
  54:Bsp/Bsp_can.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 136              		.loc 1 54 3 view .LVU35
 137 0004 01AB     		add	r3, sp, #4
 138 0006 03AA     		add	r2, sp, #12
 139 0008 0021     		movs	r1, #0
 140 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 141              	.LVL6:
  55:Bsp/Bsp_can.c ****   // }
  56:Bsp/Bsp_can.c ****   if ((rx_header.StdId >= MOTOR_3508_FEEDBACK_ID_BASE)
 142              		.loc 1 56 3 view .LVU36
 143              		.loc 1 56 17 is_stmt 0 view .LVU37
 144 000e 039B     		ldr	r3, [sp, #12]
  57:Bsp/Bsp_can.c ****    && (rx_header.StdId <  MOTOR_3508_FEEDBACK_ID_BASE + MOTOR_CHASSIS_MAX_NUM))                  //
 145              		.loc 1 57 4 view .LVU38
 146 0010 A3F50072 		sub	r2, r3, #512
  56:Bsp/Bsp_can.c ****    && (rx_header.StdId <  MOTOR_3508_FEEDBACK_ID_BASE + MOTOR_CHASSIS_MAX_NUM))                  //
 147              		.loc 1 56 6 view .LVU39
 148 0014 032A     		cmp	r2, #3
 149 0016 1ED8     		bhi	.L5
  58:Bsp/Bsp_can.c ****   {
  59:Bsp/Bsp_can.c **** 
  60:Bsp/Bsp_can.c **** 	index=rx_header.StdId - MOTOR_3508_FEEDBACK_ID_BASE;                  // get motor index by can_id
 150              		.loc 1 60 2 is_stmt 1 view .LVU40
 151              	.LVL7:
  61:Bsp/Bsp_can.c ****     motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 152              		.loc 1 61 5 view .LVU41
 153              		.loc 1 61 49 is_stmt 0 view .LVU42
 154 0018 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 155              		.loc 1 61 68 view .LVU43
 156 001c 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 157              		.loc 1 61 22 view .LVU44
 158 0020 DBB2     		uxtb	r3, r3
 159              		.loc 1 61 59 view .LVU45
 160 0022 41EA0221 		orr	r1, r1, r2, lsl #8
 161              		.loc 1 61 38 view .LVU46
 162 0026 03EB8302 		add	r2, r3, r3, lsl #2
 163 002a 03EB4203 		add	r3, r3, r2, lsl #1
 164              	.LVL8:
 165              		.loc 1 61 38 view .LVU47
 166 002e 0B4A     		ldr	r2, .L8
 167 0030 1344     		add	r3, r3, r2
 168 0032 9980     		strh	r1, [r3, #4]	@ unaligned
  62:Bsp/Bsp_can.c ****     motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 5


 169              		.loc 1 62 5 is_stmt 1 view .LVU48
 170              		.loc 1 62 49 is_stmt 0 view .LVU49
 171 0034 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
 172              		.loc 1 62 68 view .LVU50
 173 0038 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 174              		.loc 1 62 59 view .LVU51
 175 003c 42EA0122 		orr	r2, r2, r1, lsl #8
 176              		.loc 1 62 38 view .LVU52
 177 0040 DA80     		strh	r2, [r3, #6]	@ unaligned
  63:Bsp/Bsp_can.c ****     motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 178              		.loc 1 63 5 is_stmt 1 view .LVU53
 179              		.loc 1 63 49 is_stmt 0 view .LVU54
 180 0042 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 181              		.loc 1 63 68 view .LVU55
 182 0046 9DF80920 		ldrb	r2, [sp, #9]	@ zero_extendqisi2
 183              		.loc 1 63 59 view .LVU56
 184 004a 42EA0122 		orr	r2, r2, r1, lsl #8
 185              		.loc 1 63 38 view .LVU57
 186 004e 1A81     		strh	r2, [r3, #8]	@ unaligned
  64:Bsp/Bsp_can.c ****     motor_info[index].temp           =   rx_data[6];
 187              		.loc 1 64 5 is_stmt 1 view .LVU58
 188              		.loc 1 64 49 is_stmt 0 view .LVU59
 189 0050 9DF80A20 		ldrb	r2, [sp, #10]	@ zero_extendqisi2
 190              		.loc 1 64 38 view .LVU60
 191 0054 9A72     		strb	r2, [r3, #10]
 192              	.LVL9:
  65:Bsp/Bsp_can.c ****     
  66:Bsp/Bsp_can.c ****   }
  67:Bsp/Bsp_can.c **** 
  68:Bsp/Bsp_can.c ****   if(index > 0 && index < 5)
 193              		.loc 1 68 3 is_stmt 1 view .LVU61
  69:Bsp/Bsp_can.c ****   {
  70:Bsp/Bsp_can.c ****    
  71:Bsp/Bsp_can.c **** 
  72:Bsp/Bsp_can.c ****   }
 194              		.loc 1 72 3 view .LVU62
 195              	.L5:
  73:Bsp/Bsp_can.c **** 
  74:Bsp/Bsp_can.c **** 
  75:Bsp/Bsp_can.c **** }
 196              		.loc 1 75 1 is_stmt 0 view .LVU63
 197 0056 0BB0     		add	sp, sp, #44
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 4
 200              		@ sp needed
 201 0058 5DF804FB 		ldr	pc, [sp], #4
 202              	.L9:
 203              		.align	2
 204              	.L8:
 205 005c 00000000 		.word	motor_info
 206              		.cfi_endproc
 207              	.LFE135:
 209              		.section	.text.set_motor_value,"ax",%progbits
 210              		.align	1
 211              		.global	set_motor_value
 212              		.syntax unified
 213              		.thumb
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 6


 214              		.thumb_func
 216              	set_motor_value:
 217              	.LVL10:
 218              	.LFB136:
  76:Bsp/Bsp_can.c **** 
  77:Bsp/Bsp_can.c **** 
  78:Bsp/Bsp_can.c **** 
  79:Bsp/Bsp_can.c **** 
  80:Bsp/Bsp_can.c **** 
  81:Bsp/Bsp_can.c **** void set_motor_value(uint16_t tx_ID, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
  82:Bsp/Bsp_can.c **** {
 219              		.loc 1 82 1 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 4, pretend = 0, frame = 32
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		.loc 1 82 1 is_stmt 0 view .LVU65
 224 0000 00B5     		push	{lr}
 225              	.LCFI6:
 226              		.cfi_def_cfa_offset 4
 227              		.cfi_offset 14, -4
 228 0002 89B0     		sub	sp, sp, #36
 229              	.LCFI7:
 230              		.cfi_def_cfa_offset 40
 231 0004 BDF928C0 		ldrsh	ip, [sp, #40]
  83:Bsp/Bsp_can.c ****   CAN_TxHeaderTypeDef tx_header;
 232              		.loc 1 83 3 is_stmt 1 view .LVU66
  84:Bsp/Bsp_can.c ****   uint8_t             tx_data[8];
 233              		.loc 1 84 3 view .LVU67
  85:Bsp/Bsp_can.c **** 
  86:Bsp/Bsp_can.c ****   tx_header.StdId = tx_ID;
 234              		.loc 1 86 3 view .LVU68
 235              		.loc 1 86 19 is_stmt 0 view .LVU69
 236 0008 0290     		str	r0, [sp, #8]
  87:Bsp/Bsp_can.c ****   tx_header.IDE   = CAN_ID_STD;
 237              		.loc 1 87 3 is_stmt 1 view .LVU70
 238              		.loc 1 87 19 is_stmt 0 view .LVU71
 239 000a 0020     		movs	r0, #0
 240              	.LVL11:
 241              		.loc 1 87 19 view .LVU72
 242 000c 0490     		str	r0, [sp, #16]
  88:Bsp/Bsp_can.c ****   tx_header.RTR   = CAN_RTR_DATA;
 243              		.loc 1 88 3 is_stmt 1 view .LVU73
 244              		.loc 1 88 19 is_stmt 0 view .LVU74
 245 000e 0590     		str	r0, [sp, #20]
  89:Bsp/Bsp_can.c ****   tx_header.DLC   = 8;
 246              		.loc 1 89 3 is_stmt 1 view .LVU75
 247              		.loc 1 89 19 is_stmt 0 view .LVU76
 248 0010 0820     		movs	r0, #8
 249 0012 0690     		str	r0, [sp, #24]
  90:Bsp/Bsp_can.c **** 
  91:Bsp/Bsp_can.c ****   tx_data[0] = (v1>>8)&0xff;
 250              		.loc 1 91 3 is_stmt 1 view .LVU77
 251              		.loc 1 91 14 is_stmt 0 view .LVU78
 252 0014 41FA00F0 		asr	r0, r1, r0
 253 0018 8DF80000 		strb	r0, [sp]
  92:Bsp/Bsp_can.c ****   tx_data[1] =    (v1)&0xff;
 254              		.loc 1 92 3 is_stmt 1 view .LVU79
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 7


 255              		.loc 1 92 14 is_stmt 0 view .LVU80
 256 001c 8DF80110 		strb	r1, [sp, #1]
  93:Bsp/Bsp_can.c ****   tx_data[2] = (v2>>8)&0xff;
 257              		.loc 1 93 3 is_stmt 1 view .LVU81
 258              		.loc 1 93 14 is_stmt 0 view .LVU82
 259 0020 1112     		asrs	r1, r2, #8
 260              	.LVL12:
 261              		.loc 1 93 14 view .LVU83
 262 0022 8DF80210 		strb	r1, [sp, #2]
  94:Bsp/Bsp_can.c ****   tx_data[3] =    (v2)&0xff;
 263              		.loc 1 94 3 is_stmt 1 view .LVU84
 264              		.loc 1 94 14 is_stmt 0 view .LVU85
 265 0026 8DF80320 		strb	r2, [sp, #3]
  95:Bsp/Bsp_can.c ****   tx_data[4] = (v3>>8)&0xff;
 266              		.loc 1 95 3 is_stmt 1 view .LVU86
 267              		.loc 1 95 14 is_stmt 0 view .LVU87
 268 002a 1A12     		asrs	r2, r3, #8
 269              	.LVL13:
 270              		.loc 1 95 14 view .LVU88
 271 002c 8DF80420 		strb	r2, [sp, #4]
  96:Bsp/Bsp_can.c ****   tx_data[5] =    (v3)&0xff;
 272              		.loc 1 96 3 is_stmt 1 view .LVU89
 273              		.loc 1 96 14 is_stmt 0 view .LVU90
 274 0030 8DF80530 		strb	r3, [sp, #5]
  97:Bsp/Bsp_can.c ****   tx_data[6] = (v4>>8)&0xff;
 275              		.loc 1 97 3 is_stmt 1 view .LVU91
 276              		.loc 1 97 14 is_stmt 0 view .LVU92
 277 0034 9DF92930 		ldrsb	r3, [sp, #41]
 278              	.LVL14:
 279              		.loc 1 97 14 view .LVU93
 280 0038 8DF80630 		strb	r3, [sp, #6]
  98:Bsp/Bsp_can.c ****   tx_data[7] =    (v4)&0xff;
 281              		.loc 1 98 3 is_stmt 1 view .LVU94
 282              		.loc 1 98 14 is_stmt 0 view .LVU95
 283 003c 8DF807C0 		strb	ip, [sp, #7]
  99:Bsp/Bsp_can.c ****   HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0);
 284              		.loc 1 99 3 is_stmt 1 view .LVU96
 285 0040 0123     		movs	r3, #1
 286 0042 6A46     		mov	r2, sp
 287 0044 02A9     		add	r1, sp, #8
 288              	.LVL15:
 289              		.loc 1 99 3 is_stmt 0 view .LVU97
 290 0046 0348     		ldr	r0, .L12
 291 0048 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 292              	.LVL16:
 100:Bsp/Bsp_can.c ****   
 101:Bsp/Bsp_can.c **** }
 293              		.loc 1 101 1 view .LVU98
 294 004c 09B0     		add	sp, sp, #36
 295              	.LCFI8:
 296              		.cfi_def_cfa_offset 4
 297              		@ sp needed
 298 004e 5DF804FB 		ldr	pc, [sp], #4
 299              	.LVL17:
 300              	.L13:
 301              		.loc 1 101 1 view .LVU99
 302 0052 00BF     		.align	2
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 8


 303              	.L12:
 304 0054 00000000 		.word	hcan1
 305              		.cfi_endproc
 306              	.LFE136:
 308              		.global	index_check
 309              		.section	.bss.index_check,"aw",%nobits
 310              		.align	2
 313              	index_check:
 314 0000 00000000 		.space	4
 315              		.global	motor_info
 316              		.section	.bss.motor_info,"aw",%nobits
 317              		.align	2
 320              	motor_info:
 321 0000 00000000 		.space	66
 321      00000000 
 321      00000000 
 321      00000000 
 321      00000000 
 322              		.text
 323              	.Letext0:
 324              		.file 2 "D:/msys64/mingw64/arm-none-eabi/include/machine/_default_types.h"
 325              		.file 3 "D:/msys64/mingw64/arm-none-eabi/include/sys/_stdint.h"
 326              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 327              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 328              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 329              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 330              		.file 8 "Bsp/Bsp_can.h"
 331              		.file 9 "Core/Inc/can.h"
ARM GAS  D:\msys64\tmp\ccOSXQkf.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 Bsp_can.c
D:\msys64\tmp\ccOSXQkf.s:21     .text.can_user_init:00000000 $t
D:\msys64\tmp\ccOSXQkf.s:27     .text.can_user_init:00000000 can_user_init
D:\msys64\tmp\ccOSXQkf.s:107    .text.can_user_init:00000040 $d
D:\msys64\tmp\ccOSXQkf.s:112    .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
D:\msys64\tmp\ccOSXQkf.s:118    .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
D:\msys64\tmp\ccOSXQkf.s:205    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000005c $d
D:\msys64\tmp\ccOSXQkf.s:320    .bss.motor_info:00000000 motor_info
D:\msys64\tmp\ccOSXQkf.s:210    .text.set_motor_value:00000000 $t
D:\msys64\tmp\ccOSXQkf.s:216    .text.set_motor_value:00000000 set_motor_value
D:\msys64\tmp\ccOSXQkf.s:304    .text.set_motor_value:00000054 $d
D:\msys64\tmp\ccOSXQkf.s:313    .bss.index_check:00000000 index_check
D:\msys64\tmp\ccOSXQkf.s:310    .bss.index_check:00000000 $d
D:\msys64\tmp\ccOSXQkf.s:317    .bss.motor_info:00000000 $d

UNDEFINED SYMBOLS
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
hcan1
HAL_CAN_GetRxMessage
HAL_CAN_AddTxMessage
