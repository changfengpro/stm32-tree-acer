ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	1120
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.xPendedTicks,"aw",%nobits
 106              		.align	2
 109              	xPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.text.xTaskCreateStatic,"ax",%progbits
 148              		.align	1
 149              		.global	xTaskCreateStatic
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 154              	xTaskCreateStatic:
 155              	.LFB4:
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 588 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 14


 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 592 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0BD1     		bne	.L2
 179              	.LBB119:
 180              	.LBB120:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 15


  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 16


 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 17


 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 18


 194              		.loc 2 203 1
 195 0026 00BF     		nop
 196              	.L3:
 197              	.LBE120:
 198              	.LBE119:
 199              		.loc 1 592 3
 200 0028 00BF     		nop
 201 002a FDE7     		b	.L3
 202              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 203              		.loc 1 593 3
 204 002c BB6B     		ldr	r3, [r7, #56]
 205 002e 002B     		cmp	r3, #0
 206 0030 0BD1     		bne	.L4
 207              	.LBB121:
 208              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 209              		.loc 2 195 2
 210              		.syntax unified
 211              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 212 0032 4FF05003 			mov r3, #80												
 213 0036 83F31188 		msr basepri, r3											
 214 003a BFF36F8F 		isb														
 215 003e BFF34F8F 		dsb														
 216              	
 217              	@ 0 "" 2
 218              		.thumb
 219              		.syntax unified
 220 0042 FB61     		str	r3, [r7, #28]
 221              		.loc 2 203 1
 222 0044 00BF     		nop
 223              	.L5:
 224              	.LBE122:
 225              	.LBE121:
 226              		.loc 1 593 3
 227 0046 00BF     		nop
 228 0048 FDE7     		b	.L5
 229              	.L4:
 230              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 231              		.loc 1 600 20
 232 004a 5C23     		movs	r3, #92
 233 004c 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 234              		.loc 1 601 4
 235 004e 3B69     		ldr	r3, [r7, #16]
 236 0050 5C2B     		cmp	r3, #92
 237 0052 0BD0     		beq	.L6
 238              	.LBB124:
 239              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 19


 240              		.loc 2 195 2
 241              		.syntax unified
 242              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 243 0054 4FF05003 			mov r3, #80												
 244 0058 83F31188 		msr basepri, r3											
 245 005c BFF36F8F 		isb														
 246 0060 BFF34F8F 		dsb														
 247              	
 248              	@ 0 "" 2
 249              		.thumb
 250              		.syntax unified
 251 0064 BB61     		str	r3, [r7, #24]
 252              		.loc 2 203 1
 253 0066 00BF     		nop
 254              	.L7:
 255              	.LBE125:
 256              	.LBE124:
 257              		.loc 1 601 4
 258 0068 00BF     		nop
 259 006a FDE7     		b	.L7
 260              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 261              		.loc 1 602 4
 262 006c 3B69     		ldr	r3, [r7, #16]
 263              	.LBE123:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 264              		.loc 1 607 5
 265 006e BB6B     		ldr	r3, [r7, #56]
 266 0070 002B     		cmp	r3, #0
 267 0072 1ED0     		beq	.L8
 268              		.loc 1 607 32 discriminator 1
 269 0074 7B6B     		ldr	r3, [r7, #52]
 270 0076 002B     		cmp	r3, #0
 271 0078 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 272              		.loc 1 611 13
 273 007a BB6B     		ldr	r3, [r7, #56]
 274 007c 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 275              		.loc 1 612 22
 276 007e 7B6A     		ldr	r3, [r7, #36]
 277 0080 7A6B     		ldr	r2, [r7, #52]
 278 0082 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 279              		.loc 1 618 37
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 20


 280 0084 7B6A     		ldr	r3, [r7, #36]
 281 0086 0222     		movs	r2, #2
 282 0088 83F85920 		strb	r2, [r3, #89]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 283              		.loc 1 622 4
 284 008c 0023     		movs	r3, #0
 285 008e 0393     		str	r3, [sp, #12]
 286 0090 7B6A     		ldr	r3, [r7, #36]
 287 0092 0293     		str	r3, [sp, #8]
 288 0094 07F11403 		add	r3, r7, #20
 289 0098 0193     		str	r3, [sp, #4]
 290 009a 3B6B     		ldr	r3, [r7, #48]
 291 009c 0093     		str	r3, [sp]
 292 009e 3B68     		ldr	r3, [r7]
 293 00a0 7A68     		ldr	r2, [r7, #4]
 294 00a2 B968     		ldr	r1, [r7, #8]
 295 00a4 F868     		ldr	r0, [r7, #12]
 296 00a6 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 297              		.loc 1 623 4
 298 00aa 786A     		ldr	r0, [r7, #36]
 299 00ac FFF7FEFF 		bl	prvAddNewTaskToReadyList
 300 00b0 01E0     		b	.L9
 301              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 302              		.loc 1 627 12
 303 00b2 0023     		movs	r3, #0
 304 00b4 7B61     		str	r3, [r7, #20]
 305              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 306              		.loc 1 630 10
 307 00b6 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 631 2
 309 00b8 1846     		mov	r0, r3
 310 00ba 2837     		adds	r7, r7, #40
 311              	.LCFI3:
 312              		.cfi_def_cfa_offset 8
 313 00bc BD46     		mov	sp, r7
 314              	.LCFI4:
 315              		.cfi_def_cfa_register 13
 316              		@ sp needed
 317 00be 80BD     		pop	{r7, pc}
 318              		.cfi_endproc
 319              	.LFE4:
 321              		.section	.text.xTaskCreate,"ax",%progbits
 322              		.align	1
 323              		.global	xTaskCreate
 324              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 21


 325              		.thumb
 326              		.thumb_func
 328              	xTaskCreate:
 329              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 22


 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 330              		.loc 1 739 2
 331              		.cfi_startproc
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 23


 332              		@ args = 8, pretend = 0, frame = 32
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334 0000 80B5     		push	{r7, lr}
 335              	.LCFI5:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 7, -8
 338              		.cfi_offset 14, -4
 339 0002 8CB0     		sub	sp, sp, #48
 340              	.LCFI6:
 341              		.cfi_def_cfa_offset 56
 342 0004 04AF     		add	r7, sp, #16
 343              	.LCFI7:
 344              		.cfi_def_cfa 7, 40
 345 0006 F860     		str	r0, [r7, #12]
 346 0008 B960     		str	r1, [r7, #8]
 347 000a 3B60     		str	r3, [r7]
 348 000c 1346     		mov	r3, r2	@ movhi
 349 000e FB80     		strh	r3, [r7, #6]	@ movhi
 350              	.LBB126:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 351              		.loc 1 773 32
 352 0010 FB88     		ldrh	r3, [r7, #6]
 353              		.loc 1 773 14
 354 0012 9B00     		lsls	r3, r3, #2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 24


 355 0014 1846     		mov	r0, r3
 356 0016 FFF7FEFF 		bl	pvPortMalloc
 357 001a 7861     		str	r0, [r7, #20]
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 358              		.loc 1 775 6
 359 001c 7B69     		ldr	r3, [r7, #20]
 360 001e 002B     		cmp	r3, #0
 361 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 362              		.loc 1 778 28
 363 0022 5C20     		movs	r0, #92
 364 0024 FFF7FEFF 		bl	pvPortMalloc
 365 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 366              		.loc 1 780 7
 367 002a FB69     		ldr	r3, [r7, #28]
 368 002c 002B     		cmp	r3, #0
 369 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 370              		.loc 1 783 24
 371 0030 FB69     		ldr	r3, [r7, #28]
 372 0032 7A69     		ldr	r2, [r7, #20]
 373 0034 1A63     		str	r2, [r3, #48]
 374 0036 05E0     		b	.L14
 375              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 376              		.loc 1 789 6
 377 0038 7869     		ldr	r0, [r7, #20]
 378 003a FFF7FEFF 		bl	vPortFree
 379 003e 01E0     		b	.L14
 380              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 381              		.loc 1 794 14
 382 0040 0023     		movs	r3, #0
 383 0042 FB61     		str	r3, [r7, #28]
 384              	.L14:
 385              	.LBE126:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 25


 386              		.loc 1 799 5
 387 0044 FB69     		ldr	r3, [r7, #28]
 388 0046 002B     		cmp	r3, #0
 389 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 390              		.loc 1 805 37
 391 004a FB69     		ldr	r3, [r7, #28]
 392 004c 0022     		movs	r2, #0
 393 004e 83F85920 		strb	r2, [r3, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 394              		.loc 1 809 4
 395 0052 FA88     		ldrh	r2, [r7, #6]
 396 0054 0023     		movs	r3, #0
 397 0056 0393     		str	r3, [sp, #12]
 398 0058 FB69     		ldr	r3, [r7, #28]
 399 005a 0293     		str	r3, [sp, #8]
 400 005c FB6A     		ldr	r3, [r7, #44]
 401 005e 0193     		str	r3, [sp, #4]
 402 0060 BB6A     		ldr	r3, [r7, #40]
 403 0062 0093     		str	r3, [sp]
 404 0064 3B68     		ldr	r3, [r7]
 405 0066 B968     		ldr	r1, [r7, #8]
 406 0068 F868     		ldr	r0, [r7, #12]
 407 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 408              		.loc 1 810 4
 409 006e F869     		ldr	r0, [r7, #28]
 410 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 411              		.loc 1 811 12
 412 0074 0123     		movs	r3, #1
 413 0076 BB61     		str	r3, [r7, #24]
 414 0078 02E0     		b	.L16
 415              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 416              		.loc 1 815 12
 417 007a 4FF0FF33 		mov	r3, #-1
 418 007e BB61     		str	r3, [r7, #24]
 419              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 420              		.loc 1 818 10
 421 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 422              		.loc 1 819 2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 26


 423 0082 1846     		mov	r0, r3
 424 0084 2037     		adds	r7, r7, #32
 425              	.LCFI8:
 426              		.cfi_def_cfa_offset 8
 427 0086 BD46     		mov	sp, r7
 428              	.LCFI9:
 429              		.cfi_def_cfa_register 13
 430              		@ sp needed
 431 0088 80BD     		pop	{r7, pc}
 432              		.cfi_endproc
 433              	.LFE5:
 435              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 436              		.align	1
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 441              	prvInitialiseNewTask:
 442              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 443              		.loc 1 832 1
 444              		.cfi_startproc
 445              		@ args = 16, pretend = 0, frame = 32
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 0000 80B5     		push	{r7, lr}
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 88B0     		sub	sp, sp, #32
 453              	.LCFI11:
 454              		.cfi_def_cfa_offset 40
 455 0004 00AF     		add	r7, sp, #0
 456              	.LCFI12:
 457              		.cfi_def_cfa_register 7
 458 0006 F860     		str	r0, [r7, #12]
 459 0008 B960     		str	r1, [r7, #8]
 460 000a 7A60     		str	r2, [r7, #4]
 461 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 27


 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 462              		.loc 1 854 28
 463 000e 3B6B     		ldr	r3, [r7, #48]
 464 0010 186B     		ldr	r0, [r3, #48]
 465              		.loc 1 854 12
 466 0012 7B68     		ldr	r3, [r7, #4]
 467 0014 9B00     		lsls	r3, r3, #2
 468 0016 1A46     		mov	r2, r3
 469 0018 A521     		movs	r1, #165
 470 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 471              		.loc 1 864 29
 472 001e 3B6B     		ldr	r3, [r7, #48]
 473 0020 1A6B     		ldr	r2, [r3, #48]
 474              		.loc 1 864 38
 475 0022 7B68     		ldr	r3, [r7, #4]
 476 0024 03F18043 		add	r3, r3, #1073741824
 477 0028 013B     		subs	r3, r3, #1
 478 002a 9B00     		lsls	r3, r3, #2
 479              		.loc 1 864 16
 480 002c 1344     		add	r3, r3, r2
 481 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 482              		.loc 1 865 40
 483 0030 BB69     		ldr	r3, [r7, #24]
 484              		.loc 1 865 81
 485 0032 23F00703 		bic	r3, r3, #7
 486              		.loc 1 865 16
 487 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 488              		.loc 1 868 3
 489 0038 BB69     		ldr	r3, [r7, #24]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 28


 490 003a 03F00703 		and	r3, r3, #7
 491 003e 002B     		cmp	r3, #0
 492 0040 0BD0     		beq	.L19
 493              	.LBB127:
 494              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 495              		.loc 2 195 2
 496              		.syntax unified
 497              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 498 0042 4FF05003 			mov r3, #80												
 499 0046 83F31188 		msr basepri, r3											
 500 004a BFF36F8F 		isb														
 501 004e BFF34F8F 		dsb														
 502              	
 503              	@ 0 "" 2
 504              		.thumb
 505              		.syntax unified
 506 0052 7B61     		str	r3, [r7, #20]
 507              		.loc 2 203 1
 508 0054 00BF     		nop
 509              	.L20:
 510              	.LBE128:
 511              	.LBE127:
 512              		.loc 1 868 3
 513 0056 00BF     		nop
 514 0058 FDE7     		b	.L20
 515              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 516              		.loc 1 892 4
 517 005a BB68     		ldr	r3, [r7, #8]
 518 005c 002B     		cmp	r3, #0
 519 005e 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 29


 520              		.loc 1 894 10
 521 0060 0023     		movs	r3, #0
 522 0062 FB61     		str	r3, [r7, #28]
 523              		.loc 1 894 3
 524 0064 12E0     		b	.L22
 525              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 526              		.loc 1 896 38
 527 0066 BA68     		ldr	r2, [r7, #8]
 528 0068 FB69     		ldr	r3, [r7, #28]
 529 006a 1344     		add	r3, r3, r2
 530 006c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 531              		.loc 1 896 30
 532 006e 3A6B     		ldr	r2, [r7, #48]
 533 0070 FB69     		ldr	r3, [r7, #28]
 534 0072 1344     		add	r3, r3, r2
 535 0074 3433     		adds	r3, r3, #52
 536 0076 0A46     		mov	r2, r1
 537 0078 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 538              		.loc 1 901 14
 539 007a BA68     		ldr	r2, [r7, #8]
 540 007c FB69     		ldr	r3, [r7, #28]
 541 007e 1344     		add	r3, r3, r2
 542 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 543              		.loc 1 901 6
 544 0082 002B     		cmp	r3, #0
 545 0084 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 546              		.loc 1 894 77 discriminator 2
 547 0086 FB69     		ldr	r3, [r7, #28]
 548 0088 0133     		adds	r3, r3, #1
 549 008a FB61     		str	r3, [r7, #28]
 550              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 551              		.loc 1 894 33 discriminator 1
 552 008c FB69     		ldr	r3, [r7, #28]
 553 008e 0F2B     		cmp	r3, #15
 554 0090 E9D9     		bls	.L25
 555 0092 00E0     		b	.L24
 556              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 557              		.loc 1 903 5
 558 0094 00BF     		nop
 559              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 30


 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 560              		.loc 1 913 55
 561 0096 3B6B     		ldr	r3, [r7, #48]
 562 0098 0022     		movs	r2, #0
 563 009a 83F84320 		strb	r2, [r3, #67]
 564 009e 03E0     		b	.L26
 565              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 566              		.loc 1 919 29
 567 00a0 3B6B     		ldr	r3, [r7, #48]
 568 00a2 0022     		movs	r2, #0
 569 00a4 83F83420 		strb	r2, [r3, #52]
 570              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 571              		.loc 1 924 4
 572 00a8 BB6A     		ldr	r3, [r7, #40]
 573 00aa 372B     		cmp	r3, #55
 574 00ac 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 575              		.loc 1 926 14
 576 00ae 3723     		movs	r3, #55
 577 00b0 BB62     		str	r3, [r7, #40]
 578              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 579              		.loc 1 933 23
 580 00b2 3B6B     		ldr	r3, [r7, #48]
 581 00b4 BA6A     		ldr	r2, [r7, #40]
 582 00b6 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 583              		.loc 1 936 28
 584 00b8 3B6B     		ldr	r3, [r7, #48]
 585 00ba BA6A     		ldr	r2, [r7, #40]
 586 00bc DA64     		str	r2, [r3, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 587              		.loc 1 937 27
 588 00be 3B6B     		ldr	r3, [r7, #48]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 31


 589 00c0 0022     		movs	r2, #0
 590 00c2 1A65     		str	r2, [r3, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 591              		.loc 1 941 2
 592 00c4 3B6B     		ldr	r3, [r7, #48]
 593 00c6 0433     		adds	r3, r3, #4
 594 00c8 1846     		mov	r0, r3
 595 00ca FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 596              		.loc 1 942 2
 597 00ce 3B6B     		ldr	r3, [r7, #48]
 598 00d0 1833     		adds	r3, r3, #24
 599 00d2 1846     		mov	r0, r3
 600 00d4 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 601              		.loc 1 946 2
 602 00d8 3B6B     		ldr	r3, [r7, #48]
 603 00da 3A6B     		ldr	r2, [r7, #48]
 604 00dc 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 605              		.loc 1 949 2
 606 00de BB6A     		ldr	r3, [r7, #40]
 607 00e0 C3F13802 		rsb	r2, r3, #56
 608 00e4 3B6B     		ldr	r3, [r7, #48]
 609 00e6 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 610              		.loc 1 950 2
 611 00e8 3B6B     		ldr	r3, [r7, #48]
 612 00ea 3A6B     		ldr	r2, [r7, #48]
 613 00ec 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 32


 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 614              		.loc 1 992 29
 615 00ee 3B6B     		ldr	r3, [r7, #48]
 616 00f0 0022     		movs	r2, #0
 617 00f2 5A65     		str	r2, [r3, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 618              		.loc 1 993 27
 619 00f4 3B6B     		ldr	r3, [r7, #48]
 620 00f6 0022     		movs	r2, #0
 621 00f8 83F85820 		strb	r2, [r3, #88]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 33


1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 622              		.loc 1 1058 29
 623 00fc 3A68     		ldr	r2, [r7]
 624 00fe F968     		ldr	r1, [r7, #12]
 625 0100 B869     		ldr	r0, [r7, #24]
 626 0102 FFF7FEFF 		bl	pxPortInitialiseStack
 627 0106 0246     		mov	r2, r0
 628              		.loc 1 1058 27 discriminator 1
 629 0108 3B6B     		ldr	r3, [r7, #48]
 630 010a 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 631              		.loc 1 1064 4
 632 010c FB6A     		ldr	r3, [r7, #44]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 34


 633 010e 002B     		cmp	r3, #0
 634 0110 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 635              		.loc 1 1068 18
 636 0112 FB6A     		ldr	r3, [r7, #44]
 637 0114 3A6B     		ldr	r2, [r7, #48]
 638 0116 1A60     		str	r2, [r3]
 639              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 640              		.loc 1 1074 1
 641 0118 00BF     		nop
 642 011a 2037     		adds	r7, r7, #32
 643              	.LCFI13:
 644              		.cfi_def_cfa_offset 8
 645 011c BD46     		mov	sp, r7
 646              	.LCFI14:
 647              		.cfi_def_cfa_register 13
 648              		@ sp needed
 649 011e 80BD     		pop	{r7, pc}
 650              		.cfi_endproc
 651              	.LFE6:
 653              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 654              		.align	1
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 659              	prvAddNewTaskToReadyList:
 660              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 661              		.loc 1 1078 1
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 8
 664              		@ frame_needed = 1, uses_anonymous_args = 0
 665 0000 80B5     		push	{r7, lr}
 666              	.LCFI15:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 7, -8
 669              		.cfi_offset 14, -4
 670 0002 82B0     		sub	sp, sp, #8
 671              	.LCFI16:
 672              		.cfi_def_cfa_offset 16
 673 0004 00AF     		add	r7, sp, #0
 674              	.LCFI17:
 675              		.cfi_def_cfa_register 7
 676 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 35


1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 677              		.loc 1 1081 2
 678 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 679              		.loc 1 1083 25
 680 000c 2D4B     		ldr	r3, .L37
 681 000e 1B68     		ldr	r3, [r3]
 682 0010 0133     		adds	r3, r3, #1
 683 0012 2C4A     		ldr	r2, .L37
 684 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 685              		.loc 1 1084 20
 686 0016 2C4B     		ldr	r3, .L37+4
 687 0018 1B68     		ldr	r3, [r3]
 688              		.loc 1 1084 5
 689 001a 002B     		cmp	r3, #0
 690 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 691              		.loc 1 1088 17
 692 001e 2A4A     		ldr	r2, .L37+4
 693 0020 7B68     		ldr	r3, [r7, #4]
 694 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 695              		.loc 1 1090 31
 696 0024 274B     		ldr	r3, .L37
 697 0026 1B68     		ldr	r3, [r3]
 698              		.loc 1 1090 6
 699 0028 012B     		cmp	r3, #1
 700 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 701              		.loc 1 1095 5
 702 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 703 0030 0DE0     		b	.L33
 704              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 705              		.loc 1 1107 26
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 36


 706 0032 264B     		ldr	r3, .L37+8
 707 0034 1B68     		ldr	r3, [r3]
 708              		.loc 1 1107 6
 709 0036 002B     		cmp	r3, #0
 710 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 711              		.loc 1 1109 21
 712 003a 234B     		ldr	r3, .L37+4
 713 003c 1B68     		ldr	r3, [r3]
 714 003e DA6A     		ldr	r2, [r3, #44]
 715              		.loc 1 1109 45
 716 0040 7B68     		ldr	r3, [r7, #4]
 717 0042 DB6A     		ldr	r3, [r3, #44]
 718              		.loc 1 1109 7
 719 0044 9A42     		cmp	r2, r3
 720 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 721              		.loc 1 1111 19
 722 0048 1F4A     		ldr	r2, .L37+4
 723 004a 7B68     		ldr	r3, [r7, #4]
 724 004c 1360     		str	r3, [r2]
 725              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 726              		.loc 1 1124 15
 727 004e 204B     		ldr	r3, .L37+12
 728 0050 1B68     		ldr	r3, [r3]
 729 0052 0133     		adds	r3, r3, #1
 730 0054 1E4A     		ldr	r2, .L37+12
 731 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 732              		.loc 1 1129 26
 733 0058 1D4B     		ldr	r3, .L37+12
 734 005a 1A68     		ldr	r2, [r3]
 735 005c 7B68     		ldr	r3, [r7, #4]
 736 005e 5A64     		str	r2, [r3, #68]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 37


1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 737              		.loc 1 1134 3
 738 0060 7B68     		ldr	r3, [r7, #4]
 739 0062 DA6A     		ldr	r2, [r3, #44]
 740 0064 1B4B     		ldr	r3, .L37+16
 741 0066 1B68     		ldr	r3, [r3]
 742 0068 9A42     		cmp	r2, r3
 743 006a 03D9     		bls	.L34
 744              		.loc 1 1134 3 is_stmt 0 discriminator 1
 745 006c 7B68     		ldr	r3, [r7, #4]
 746 006e DB6A     		ldr	r3, [r3, #44]
 747 0070 184A     		ldr	r2, .L37+16
 748 0072 1360     		str	r3, [r2]
 749              	.L34:
 750              		.loc 1 1134 3 discriminator 3
 751 0074 7B68     		ldr	r3, [r7, #4]
 752 0076 DA6A     		ldr	r2, [r3, #44]
 753 0078 1346     		mov	r3, r2
 754 007a 9B00     		lsls	r3, r3, #2
 755 007c 1344     		add	r3, r3, r2
 756 007e 9B00     		lsls	r3, r3, #2
 757 0080 154A     		ldr	r2, .L37+20
 758 0082 1A44     		add	r2, r2, r3
 759 0084 7B68     		ldr	r3, [r7, #4]
 760 0086 0433     		adds	r3, r3, #4
 761 0088 1946     		mov	r1, r3
 762 008a 1046     		mov	r0, r2
 763 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 764              		.loc 1 1138 2 is_stmt 1
 765 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 766              		.loc 1 1140 24
 767 0094 0D4B     		ldr	r3, .L37+8
 768 0096 1B68     		ldr	r3, [r3]
 769              		.loc 1 1140 4
 770 0098 002B     		cmp	r3, #0
 771 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 772              		.loc 1 1144 19
 773 009c 0A4B     		ldr	r3, .L37+4
 774 009e 1B68     		ldr	r3, [r3]
 775 00a0 DA6A     		ldr	r2, [r3, #44]
 776              		.loc 1 1144 42
 777 00a2 7B68     		ldr	r3, [r7, #4]
 778 00a4 DB6A     		ldr	r3, [r3, #44]
 779              		.loc 1 1144 5
 780 00a6 9A42     		cmp	r2, r3
 781 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 38


1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 782              		.loc 1 1146 4
 783 00aa 0C4B     		ldr	r3, .L37+24
 784 00ac 4FF08052 		mov	r2, #268435456
 785 00b0 1A60     		str	r2, [r3]
 786              		.syntax unified
 787              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 788 00b2 BFF34F8F 		dsb
 789              	@ 0 "" 2
 790              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 791 00b6 BFF36F8F 		isb
 792              	@ 0 "" 2
 793              		.thumb
 794              		.syntax unified
 795              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 796              		.loc 1 1157 1
 797 00ba 00BF     		nop
 798 00bc 0837     		adds	r7, r7, #8
 799              	.LCFI18:
 800              		.cfi_def_cfa_offset 8
 801 00be BD46     		mov	sp, r7
 802              	.LCFI19:
 803              		.cfi_def_cfa_register 13
 804              		@ sp needed
 805 00c0 80BD     		pop	{r7, pc}
 806              	.L38:
 807 00c2 00BF     		.align	2
 808              	.L37:
 809 00c4 00000000 		.word	uxCurrentNumberOfTasks
 810 00c8 00000000 		.word	pxCurrentTCB
 811 00cc 00000000 		.word	xSchedulerRunning
 812 00d0 00000000 		.word	uxTaskNumber
 813 00d4 00000000 		.word	uxTopReadyPriority
 814 00d8 00000000 		.word	pxReadyTasksLists
 815 00dc 04ED00E0 		.word	-536810236
 816              		.cfi_endproc
 817              	.LFE7:
 819              		.section	.text.vTaskDelete,"ax",%progbits
 820              		.align	1
 821              		.global	vTaskDelete
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 826              	vTaskDelete:
 827              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 39


1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 828              		.loc 1 1163 2
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 16
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832 0000 80B5     		push	{r7, lr}
 833              	.LCFI20:
 834              		.cfi_def_cfa_offset 8
 835              		.cfi_offset 7, -8
 836              		.cfi_offset 14, -4
 837 0002 84B0     		sub	sp, sp, #16
 838              	.LCFI21:
 839              		.cfi_def_cfa_offset 24
 840 0004 00AF     		add	r7, sp, #0
 841              	.LCFI22:
 842              		.cfi_def_cfa_register 7
 843 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 844              		.loc 1 1166 3
 845 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 846              		.loc 1 1170 12
 847 000c 7B68     		ldr	r3, [r7, #4]
 848 000e 002B     		cmp	r3, #0
 849 0010 02D1     		bne	.L40
 850              		.loc 1 1170 12 is_stmt 0 discriminator 1
 851 0012 2D4B     		ldr	r3, .L49
 852 0014 1B68     		ldr	r3, [r3]
 853 0016 00E0     		b	.L41
 854              	.L40:
 855              		.loc 1 1170 12 discriminator 2
 856 0018 7B68     		ldr	r3, [r7, #4]
 857              	.L41:
 858              		.loc 1 1170 10 is_stmt 1 discriminator 4
 859 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 860              		.loc 1 1173 8
 861 001c FB68     		ldr	r3, [r7, #12]
 862 001e 0433     		adds	r3, r3, #4
 863 0020 1846     		mov	r0, r3
 864 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 40


1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 865              		.loc 1 1183 8
 866 0026 FB68     		ldr	r3, [r7, #12]
 867 0028 9B6A     		ldr	r3, [r3, #40]
 868              		.loc 1 1183 6
 869 002a 002B     		cmp	r3, #0
 870 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 871              		.loc 1 1185 14
 872 002e FB68     		ldr	r3, [r7, #12]
 873 0030 1833     		adds	r3, r3, #24
 874 0032 1846     		mov	r0, r3
 875 0034 FFF7FEFF 		bl	uxListRemove
 876              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 877              		.loc 1 1196 16
 878 0038 244B     		ldr	r3, .L49+4
 879 003a 1B68     		ldr	r3, [r3]
 880 003c 0133     		adds	r3, r3, #1
 881 003e 234A     		ldr	r2, .L49+4
 882 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 883              		.loc 1 1198 14
 884 0042 214B     		ldr	r3, .L49
 885 0044 1B68     		ldr	r3, [r3]
 886              		.loc 1 1198 6
 887 0046 FA68     		ldr	r2, [r7, #12]
 888 0048 9A42     		cmp	r2, r3
 889 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 890              		.loc 1 1205 5
 891 004c FB68     		ldr	r3, [r7, #12]
 892 004e 0433     		adds	r3, r3, #4
 893 0050 1946     		mov	r1, r3
 894 0052 1F48     		ldr	r0, .L49+8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 41


 895 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 896              		.loc 1 1210 5
 897 0058 1E4B     		ldr	r3, .L49+12
 898 005a 1B68     		ldr	r3, [r3]
 899 005c 0133     		adds	r3, r3, #1
 900 005e 1D4A     		ldr	r2, .L49+12
 901 0060 1360     		str	r3, [r2]
 902 0062 09E0     		b	.L44
 903              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 904              		.loc 1 1225 5
 905 0064 1C4B     		ldr	r3, .L49+16
 906 0066 1B68     		ldr	r3, [r3]
 907 0068 013B     		subs	r3, r3, #1
 908 006a 1B4A     		ldr	r2, .L49+16
 909 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 910              		.loc 1 1227 5
 911 006e F868     		ldr	r0, [r7, #12]
 912 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 913              		.loc 1 1231 5
 914 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 915              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 916              		.loc 1 1234 3
 917 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 918              		.loc 1 1238 25
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 42


 919 007c 174B     		ldr	r3, .L49+20
 920 007e 1B68     		ldr	r3, [r3]
 921              		.loc 1 1238 5
 922 0080 002B     		cmp	r3, #0
 923 0082 1CD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 924              		.loc 1 1240 14
 925 0084 104B     		ldr	r3, .L49
 926 0086 1B68     		ldr	r3, [r3]
 927              		.loc 1 1240 6
 928 0088 FA68     		ldr	r2, [r7, #12]
 929 008a 9A42     		cmp	r2, r3
 930 008c 17D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 931              		.loc 1 1242 5
 932 008e 144B     		ldr	r3, .L49+24
 933 0090 1B68     		ldr	r3, [r3]
 934 0092 002B     		cmp	r3, #0
 935 0094 0BD0     		beq	.L46
 936              	.LBB129:
 937              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 938              		.loc 2 195 2
 939              		.syntax unified
 940              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 941 0096 4FF05003 			mov r3, #80												
 942 009a 83F31188 		msr basepri, r3											
 943 009e BFF36F8F 		isb														
 944 00a2 BFF34F8F 		dsb														
 945              	
 946              	@ 0 "" 2
 947              		.thumb
 948              		.syntax unified
 949 00a6 BB60     		str	r3, [r7, #8]
 950              		.loc 2 203 1
 951 00a8 00BF     		nop
 952              	.L47:
 953              	.LBE130:
 954              	.LBE129:
 955              		.loc 1 1242 5
 956 00aa 00BF     		nop
 957 00ac FDE7     		b	.L47
 958              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 959              		.loc 1 1243 5
 960 00ae 0D4B     		ldr	r3, .L49+28
 961 00b0 4FF08052 		mov	r2, #268435456
 962 00b4 1A60     		str	r2, [r3]
 963              		.syntax unified
 964              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 965 00b6 BFF34F8F 		dsb
 966              	@ 0 "" 2
 967              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 968 00ba BFF36F8F 		isb
 969              	@ 0 "" 2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 43


 970              		.thumb
 971              		.syntax unified
 972              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 973              		.loc 1 1250 2
 974 00be 00BF     		nop
 975 00c0 1037     		adds	r7, r7, #16
 976              	.LCFI23:
 977              		.cfi_def_cfa_offset 8
 978 00c2 BD46     		mov	sp, r7
 979              	.LCFI24:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 00c4 80BD     		pop	{r7, pc}
 983              	.L50:
 984 00c6 00BF     		.align	2
 985              	.L49:
 986 00c8 00000000 		.word	pxCurrentTCB
 987 00cc 00000000 		.word	uxTaskNumber
 988 00d0 00000000 		.word	xTasksWaitingTermination
 989 00d4 00000000 		.word	uxDeletedTasksWaitingCleanUp
 990 00d8 00000000 		.word	uxCurrentNumberOfTasks
 991 00dc 00000000 		.word	xSchedulerRunning
 992 00e0 00000000 		.word	uxSchedulerSuspended
 993 00e4 04ED00E0 		.word	-536810236
 994              		.cfi_endproc
 995              	.LFE8:
 997              		.section	.text.vTaskDelayUntil,"ax",%progbits
 998              		.align	1
 999              		.global	vTaskDelayUntil
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1004              	vTaskDelayUntil:
 1005              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1006              		.loc 1 1258 2
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 40
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              	.LCFI25:
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 44


 1014              		.cfi_offset 14, -4
 1015 0002 8AB0     		sub	sp, sp, #40
 1016              	.LCFI26:
 1017              		.cfi_def_cfa_offset 48
 1018 0004 00AF     		add	r7, sp, #0
 1019              	.LCFI27:
 1020              		.cfi_def_cfa_register 7
 1021 0006 7860     		str	r0, [r7, #4]
 1022 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1023              		.loc 1 1260 30
 1024 000a 0023     		movs	r3, #0
 1025 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1026              		.loc 1 1262 3
 1027 000e 7B68     		ldr	r3, [r7, #4]
 1028 0010 002B     		cmp	r3, #0
 1029 0012 0BD1     		bne	.L52
 1030              	.LBB131:
 1031              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1032              		.loc 2 195 2
 1033              		.syntax unified
 1034              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1035 0014 4FF05003 			mov r3, #80												
 1036 0018 83F31188 		msr basepri, r3											
 1037 001c BFF36F8F 		isb														
 1038 0020 BFF34F8F 		dsb														
 1039              	
 1040              	@ 0 "" 2
 1041              		.thumb
 1042              		.syntax unified
 1043 0024 7B61     		str	r3, [r7, #20]
 1044              		.loc 2 203 1
 1045 0026 00BF     		nop
 1046              	.L53:
 1047              	.LBE132:
 1048              	.LBE131:
 1049              		.loc 1 1262 3
 1050 0028 00BF     		nop
 1051 002a FDE7     		b	.L53
 1052              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1053              		.loc 1 1263 3
 1054 002c 3B68     		ldr	r3, [r7]
 1055 002e 002B     		cmp	r3, #0
 1056 0030 0BD1     		bne	.L54
 1057              	.LBB133:
 1058              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1059              		.loc 2 195 2
 1060              		.syntax unified
 1061              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1062 0032 4FF05003 			mov r3, #80												
 1063 0036 83F31188 		msr basepri, r3											
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 45


 1064 003a BFF36F8F 		isb														
 1065 003e BFF34F8F 		dsb														
 1066              	
 1067              	@ 0 "" 2
 1068              		.thumb
 1069              		.syntax unified
 1070 0042 3B61     		str	r3, [r7, #16]
 1071              		.loc 2 203 1
 1072 0044 00BF     		nop
 1073              	.L55:
 1074              	.LBE134:
 1075              	.LBE133:
 1076              		.loc 1 1263 3
 1077 0046 00BF     		nop
 1078 0048 FDE7     		b	.L55
 1079              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1080              		.loc 1 1264 3
 1081 004a 2A4B     		ldr	r3, .L64
 1082 004c 1B68     		ldr	r3, [r3]
 1083 004e 002B     		cmp	r3, #0
 1084 0050 0BD0     		beq	.L56
 1085              	.LBB135:
 1086              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1087              		.loc 2 195 2
 1088              		.syntax unified
 1089              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1090 0052 4FF05003 			mov r3, #80												
 1091 0056 83F31188 		msr basepri, r3											
 1092 005a BFF36F8F 		isb														
 1093 005e BFF34F8F 		dsb														
 1094              	
 1095              	@ 0 "" 2
 1096              		.thumb
 1097              		.syntax unified
 1098 0062 FB60     		str	r3, [r7, #12]
 1099              		.loc 2 203 1
 1100 0064 00BF     		nop
 1101              	.L57:
 1102              	.LBE136:
 1103              	.LBE135:
 1104              		.loc 1 1264 3
 1105 0066 00BF     		nop
 1106 0068 FDE7     		b	.L57
 1107              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1108              		.loc 1 1266 3
 1109 006a FFF7FEFF 		bl	vTaskSuspendAll
 1110              	.LBB137:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1111              		.loc 1 1270 21
 1112 006e 224B     		ldr	r3, .L64+4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 46


 1113 0070 1B68     		ldr	r3, [r3]
 1114 0072 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1115              		.loc 1 1273 18
 1116 0074 7B68     		ldr	r3, [r7, #4]
 1117 0076 1B68     		ldr	r3, [r3]
 1118              		.loc 1 1273 16
 1119 0078 3A68     		ldr	r2, [r7]
 1120 007a 1344     		add	r3, r3, r2
 1121 007c FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1122              		.loc 1 1275 26
 1123 007e 7B68     		ldr	r3, [r7, #4]
 1124 0080 1B68     		ldr	r3, [r3]
 1125              		.loc 1 1275 6
 1126 0082 3A6A     		ldr	r2, [r7, #32]
 1127 0084 9A42     		cmp	r2, r3
 1128 0086 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1129              		.loc 1 1282 25
 1130 0088 7B68     		ldr	r3, [r7, #4]
 1131 008a 1B68     		ldr	r3, [r3]
 1132              		.loc 1 1282 7
 1133 008c FA69     		ldr	r2, [r7, #28]
 1134 008e 9A42     		cmp	r2, r3
 1135 0090 11D2     		bcs	.L59
 1136              		.loc 1 1282 47 discriminator 1
 1137 0092 FA69     		ldr	r2, [r7, #28]
 1138 0094 3B6A     		ldr	r3, [r7, #32]
 1139 0096 9A42     		cmp	r2, r3
 1140 0098 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1141              		.loc 1 1284 19
 1142 009a 0123     		movs	r3, #1
 1143 009c 7B62     		str	r3, [r7, #36]
 1144 009e 0AE0     		b	.L59
 1145              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 47


1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1146              		.loc 1 1296 25
 1147 00a0 7B68     		ldr	r3, [r7, #4]
 1148 00a2 1B68     		ldr	r3, [r3]
 1149              		.loc 1 1296 7
 1150 00a4 FA69     		ldr	r2, [r7, #28]
 1151 00a6 9A42     		cmp	r2, r3
 1152 00a8 03D3     		bcc	.L60
 1153              		.loc 1 1296 47 discriminator 1
 1154 00aa FA69     		ldr	r2, [r7, #28]
 1155 00ac 3B6A     		ldr	r3, [r7, #32]
 1156 00ae 9A42     		cmp	r2, r3
 1157 00b0 01D9     		bls	.L59
 1158              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1159              		.loc 1 1298 19
 1160 00b2 0123     		movs	r3, #1
 1161 00b4 7B62     		str	r3, [r7, #36]
 1162              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1163              		.loc 1 1307 24
 1164 00b6 7B68     		ldr	r3, [r7, #4]
 1165 00b8 FA69     		ldr	r2, [r7, #28]
 1166 00ba 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1167              		.loc 1 1309 6
 1168 00bc 7B6A     		ldr	r3, [r7, #36]
 1169 00be 002B     		cmp	r3, #0
 1170 00c0 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1171              		.loc 1 1315 5
 1172 00c2 FA69     		ldr	r2, [r7, #28]
 1173 00c4 3B6A     		ldr	r3, [r7, #32]
 1174 00c6 D31A     		subs	r3, r2, r3
 1175 00c8 0021     		movs	r1, #0
 1176 00ca 1846     		mov	r0, r3
 1177 00cc FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1178              	.L61:
 1179              	.LBE137:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 48


1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1180              		.loc 1 1322 21
 1181 00d0 FFF7FEFF 		bl	xTaskResumeAll
 1182 00d4 B861     		str	r0, [r7, #24]
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1183              		.loc 1 1326 5
 1184 00d6 BB69     		ldr	r3, [r7, #24]
 1185 00d8 002B     		cmp	r3, #0
 1186 00da 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1187              		.loc 1 1328 4
 1188 00dc 074B     		ldr	r3, .L64+8
 1189 00de 4FF08052 		mov	r2, #268435456
 1190 00e2 1A60     		str	r2, [r3]
 1191              		.syntax unified
 1192              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1193 00e4 BFF34F8F 		dsb
 1194              	@ 0 "" 2
 1195              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1196 00e8 BFF36F8F 		isb
 1197              	@ 0 "" 2
 1198              		.thumb
 1199              		.syntax unified
 1200              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1201              		.loc 1 1334 2
 1202 00ec 00BF     		nop
 1203 00ee 2837     		adds	r7, r7, #40
 1204              	.LCFI28:
 1205              		.cfi_def_cfa_offset 8
 1206 00f0 BD46     		mov	sp, r7
 1207              	.LCFI29:
 1208              		.cfi_def_cfa_register 13
 1209              		@ sp needed
 1210 00f2 80BD     		pop	{r7, pc}
 1211              	.L65:
 1212              		.align	2
 1213              	.L64:
 1214 00f4 00000000 		.word	uxSchedulerSuspended
 1215 00f8 00000000 		.word	xTickCount
 1216 00fc 04ED00E0 		.word	-536810236
 1217              		.cfi_endproc
 1218              	.LFE9:
 1220              		.section	.text.vTaskDelay,"ax",%progbits
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 49


 1221              		.align	1
 1222              		.global	vTaskDelay
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1227              	vTaskDelay:
 1228              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1229              		.loc 1 1342 2
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 16
 1232              		@ frame_needed = 1, uses_anonymous_args = 0
 1233 0000 80B5     		push	{r7, lr}
 1234              	.LCFI30:
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238 0002 84B0     		sub	sp, sp, #16
 1239              	.LCFI31:
 1240              		.cfi_def_cfa_offset 24
 1241 0004 00AF     		add	r7, sp, #0
 1242              	.LCFI32:
 1243              		.cfi_def_cfa_register 7
 1244 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1245              		.loc 1 1343 13
 1246 0008 0023     		movs	r3, #0
 1247 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1248              		.loc 1 1346 5
 1249 000c 7B68     		ldr	r3, [r7, #4]
 1250 000e 002B     		cmp	r3, #0
 1251 0010 18D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1252              		.loc 1 1348 4
 1253 0012 144B     		ldr	r3, .L72
 1254 0014 1B68     		ldr	r3, [r3]
 1255 0016 002B     		cmp	r3, #0
 1256 0018 0BD0     		beq	.L68
 1257              	.LBB138:
 1258              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1259              		.loc 2 195 2
 1260              		.syntax unified
 1261              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1262 001a 4FF05003 			mov r3, #80												
 1263 001e 83F31188 		msr basepri, r3											
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 50


 1264 0022 BFF36F8F 		isb														
 1265 0026 BFF34F8F 		dsb														
 1266              	
 1267              	@ 0 "" 2
 1268              		.thumb
 1269              		.syntax unified
 1270 002a BB60     		str	r3, [r7, #8]
 1271              		.loc 2 203 1
 1272 002c 00BF     		nop
 1273              	.L69:
 1274              	.LBE139:
 1275              	.LBE138:
 1276              		.loc 1 1348 4
 1277 002e 00BF     		nop
 1278 0030 FDE7     		b	.L69
 1279              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1280              		.loc 1 1349 4
 1281 0032 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1282              		.loc 1 1360 5
 1283 0036 0021     		movs	r1, #0
 1284 0038 7868     		ldr	r0, [r7, #4]
 1285 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1286              		.loc 1 1362 22
 1287 003e FFF7FEFF 		bl	xTaskResumeAll
 1288 0042 F860     		str	r0, [r7, #12]
 1289              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1290              		.loc 1 1371 5
 1291 0044 FB68     		ldr	r3, [r7, #12]
 1292 0046 002B     		cmp	r3, #0
 1293 0048 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1294              		.loc 1 1373 4
 1295 004a 074B     		ldr	r3, .L72+4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 51


 1296 004c 4FF08052 		mov	r2, #268435456
 1297 0050 1A60     		str	r2, [r3]
 1298              		.syntax unified
 1299              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1300 0052 BFF34F8F 		dsb
 1301              	@ 0 "" 2
 1302              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1303 0056 BFF36F8F 		isb
 1304              	@ 0 "" 2
 1305              		.thumb
 1306              		.syntax unified
 1307              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1308              		.loc 1 1379 2
 1309 005a 00BF     		nop
 1310 005c 1037     		adds	r7, r7, #16
 1311              	.LCFI33:
 1312              		.cfi_def_cfa_offset 8
 1313 005e BD46     		mov	sp, r7
 1314              	.LCFI34:
 1315              		.cfi_def_cfa_register 13
 1316              		@ sp needed
 1317 0060 80BD     		pop	{r7, pc}
 1318              	.L73:
 1319 0062 00BF     		.align	2
 1320              	.L72:
 1321 0064 00000000 		.word	uxSchedulerSuspended
 1322 0068 04ED00E0 		.word	-536810236
 1323              		.cfi_endproc
 1324              	.LFE10:
 1326              		.section	.text.eTaskGetState,"ax",%progbits
 1327              		.align	1
 1328              		.global	eTaskGetState
 1329              		.syntax unified
 1330              		.thumb
 1331              		.thumb_func
 1333              	eTaskGetState:
 1334              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1335              		.loc 1 1387 2
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 32
 1338              		@ frame_needed = 1, uses_anonymous_args = 0
 1339 0000 80B5     		push	{r7, lr}
 1340              	.LCFI35:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 52


 1341              		.cfi_def_cfa_offset 8
 1342              		.cfi_offset 7, -8
 1343              		.cfi_offset 14, -4
 1344 0002 88B0     		sub	sp, sp, #32
 1345              	.LCFI36:
 1346              		.cfi_def_cfa_offset 40
 1347 0004 00AF     		add	r7, sp, #0
 1348              	.LCFI37:
 1349              		.cfi_def_cfa_register 7
 1350 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1351              		.loc 1 1390 22
 1352 0008 7B68     		ldr	r3, [r7, #4]
 1353 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1354              		.loc 1 1392 3
 1355 000c BB69     		ldr	r3, [r7, #24]
 1356 000e 002B     		cmp	r3, #0
 1357 0010 0BD1     		bne	.L75
 1358              	.LBB140:
 1359              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1360              		.loc 2 195 2
 1361              		.syntax unified
 1362              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1363 0012 4FF05003 			mov r3, #80												
 1364 0016 83F31188 		msr basepri, r3											
 1365 001a BFF36F8F 		isb														
 1366 001e BFF34F8F 		dsb														
 1367              	
 1368              	@ 0 "" 2
 1369              		.thumb
 1370              		.syntax unified
 1371 0022 BB60     		str	r3, [r7, #8]
 1372              		.loc 2 203 1
 1373 0024 00BF     		nop
 1374              	.L76:
 1375              	.LBE141:
 1376              	.LBE140:
 1377              		.loc 1 1392 3
 1378 0026 00BF     		nop
 1379 0028 FDE7     		b	.L76
 1380              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1381              		.loc 1 1394 13
 1382 002a 244B     		ldr	r3, .L87
 1383 002c 1B68     		ldr	r3, [r3]
 1384              		.loc 1 1394 5
 1385 002e BA69     		ldr	r2, [r7, #24]
 1386 0030 9A42     		cmp	r2, r3
 1387 0032 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 53


1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1388              		.loc 1 1397 12
 1389 0034 0023     		movs	r3, #0
 1390 0036 FB77     		strb	r3, [r7, #31]
 1391 0038 3AE0     		b	.L78
 1392              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1393              		.loc 1 1401 4
 1394 003a FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1395              		.loc 1 1403 17
 1396 003e BB69     		ldr	r3, [r7, #24]
 1397 0040 5B69     		ldr	r3, [r3, #20]
 1398 0042 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1399              		.loc 1 1404 19
 1400 0044 1E4B     		ldr	r3, .L87+4
 1401 0046 1B68     		ldr	r3, [r3]
 1402 0048 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1403              		.loc 1 1405 29
 1404 004a 1E4B     		ldr	r3, .L87+8
 1405 004c 1B68     		ldr	r3, [r3]
 1406 004e FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1407              		.loc 1 1407 4
 1408 0050 FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1409              		.loc 1 1409 6
 1410 0054 7A69     		ldr	r2, [r7, #20]
 1411 0056 3B69     		ldr	r3, [r7, #16]
 1412 0058 9A42     		cmp	r2, r3
 1413 005a 03D0     		beq	.L79
 1414              		.loc 1 1409 41 discriminator 1
 1415 005c 7A69     		ldr	r2, [r7, #20]
 1416 005e FB68     		ldr	r3, [r7, #12]
 1417 0060 9A42     		cmp	r2, r3
 1418 0062 02D1     		bne	.L80
 1419              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1420              		.loc 1 1413 13
 1421 0064 0223     		movs	r3, #2
 1422 0066 FB77     		strb	r3, [r7, #31]
 1423 0068 22E0     		b	.L78
 1424              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 54


1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1425              		.loc 1 1417 12
 1426 006a 7B69     		ldr	r3, [r7, #20]
 1427 006c 164A     		ldr	r2, .L87+12
 1428 006e 9342     		cmp	r3, r2
 1429 0070 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1430              		.loc 1 1422 10
 1431 0072 BB69     		ldr	r3, [r7, #24]
 1432 0074 9B6A     		ldr	r3, [r3, #40]
 1433              		.loc 1 1422 8
 1434 0076 002B     		cmp	r3, #0
 1435 0078 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1436              		.loc 1 1430 17
 1437 007a BB69     		ldr	r3, [r7, #24]
 1438 007c 93F85830 		ldrb	r3, [r3, #88]
 1439 0080 DBB2     		uxtb	r3, r3
 1440              		.loc 1 1430 10
 1441 0082 012B     		cmp	r3, #1
 1442 0084 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1443              		.loc 1 1432 17
 1444 0086 0223     		movs	r3, #2
 1445 0088 FB77     		strb	r3, [r7, #31]
 1446 008a 11E0     		b	.L78
 1447              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1448              		.loc 1 1436 17
 1449 008c 0323     		movs	r3, #3
 1450 008e FB77     		strb	r3, [r7, #31]
 1451 0090 0EE0     		b	.L78
 1452              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 55


1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1453              		.loc 1 1447 15
 1454 0092 0223     		movs	r3, #2
 1455 0094 FB77     		strb	r3, [r7, #31]
 1456 0096 0BE0     		b	.L78
 1457              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1458              		.loc 1 1453 12
 1459 0098 7B69     		ldr	r3, [r7, #20]
 1460 009a 0C4A     		ldr	r2, .L87+16
 1461 009c 9342     		cmp	r3, r2
 1462 009e 02D0     		beq	.L84
 1463              		.loc 1 1453 59 discriminator 1
 1464 00a0 7B69     		ldr	r3, [r7, #20]
 1465 00a2 002B     		cmp	r3, #0
 1466 00a4 02D1     		bne	.L85
 1467              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1468              		.loc 1 1458 14
 1469 00a6 0423     		movs	r3, #4
 1470 00a8 FB77     		strb	r3, [r7, #31]
 1471 00aa 01E0     		b	.L78
 1472              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1473              		.loc 1 1466 13
 1474 00ac 0123     		movs	r3, #1
 1475 00ae FB77     		strb	r3, [r7, #31]
 1476              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1477              		.loc 1 1470 10
 1478 00b0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1479              		.loc 1 1471 2
 1480 00b2 1846     		mov	r0, r3
 1481 00b4 2037     		adds	r7, r7, #32
 1482              	.LCFI38:
 1483              		.cfi_def_cfa_offset 8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 56


 1484 00b6 BD46     		mov	sp, r7
 1485              	.LCFI39:
 1486              		.cfi_def_cfa_register 13
 1487              		@ sp needed
 1488 00b8 80BD     		pop	{r7, pc}
 1489              	.L88:
 1490 00ba 00BF     		.align	2
 1491              	.L87:
 1492 00bc 00000000 		.word	pxCurrentTCB
 1493 00c0 00000000 		.word	pxDelayedTaskList
 1494 00c4 00000000 		.word	pxOverflowDelayedTaskList
 1495 00c8 00000000 		.word	xSuspendedTaskList
 1496 00cc 00000000 		.word	xTasksWaitingTermination
 1497              		.cfi_endproc
 1498              	.LFE11:
 1500              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1501              		.align	1
 1502              		.global	uxTaskPriorityGet
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1507              	uxTaskPriorityGet:
 1508              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1509              		.loc 1 1479 2
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 16
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              	.LCFI40:
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 84B0     		sub	sp, sp, #16
 1519              	.LCFI41:
 1520              		.cfi_def_cfa_offset 24
 1521 0004 00AF     		add	r7, sp, #0
 1522              	.LCFI42:
 1523              		.cfi_def_cfa_register 7
 1524 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1525              		.loc 1 1483 3
 1526 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 57


 1527              		.loc 1 1487 12
 1528 000c 7B68     		ldr	r3, [r7, #4]
 1529 000e 002B     		cmp	r3, #0
 1530 0010 02D1     		bne	.L90
 1531              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1532 0012 074B     		ldr	r3, .L93
 1533 0014 1B68     		ldr	r3, [r3]
 1534 0016 00E0     		b	.L91
 1535              	.L90:
 1536              		.loc 1 1487 12 discriminator 2
 1537 0018 7B68     		ldr	r3, [r7, #4]
 1538              	.L91:
 1539              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1540 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1541              		.loc 1 1488 13
 1542 001c FB68     		ldr	r3, [r7, #12]
 1543 001e DB6A     		ldr	r3, [r3, #44]
 1544 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1545              		.loc 1 1490 3
 1546 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1547              		.loc 1 1492 10
 1548 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1549              		.loc 1 1493 2
 1550 0028 1846     		mov	r0, r3
 1551 002a 1037     		adds	r7, r7, #16
 1552              	.LCFI43:
 1553              		.cfi_def_cfa_offset 8
 1554 002c BD46     		mov	sp, r7
 1555              	.LCFI44:
 1556              		.cfi_def_cfa_register 13
 1557              		@ sp needed
 1558 002e 80BD     		pop	{r7, pc}
 1559              	.L94:
 1560              		.align	2
 1561              	.L93:
 1562 0030 00000000 		.word	pxCurrentTCB
 1563              		.cfi_endproc
 1564              	.LFE12:
 1566              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1567              		.align	1
 1568              		.global	uxTaskPriorityGetFromISR
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1573              	uxTaskPriorityGetFromISR:
 1574              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 58


1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1575              		.loc 1 1501 2
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 32
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579 0000 80B5     		push	{r7, lr}
 1580              	.LCFI45:
 1581              		.cfi_def_cfa_offset 8
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 88B0     		sub	sp, sp, #32
 1585              	.LCFI46:
 1586              		.cfi_def_cfa_offset 40
 1587 0004 00AF     		add	r7, sp, #0
 1588              	.LCFI47:
 1589              		.cfi_def_cfa_register 7
 1590 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1591              		.loc 1 1521 3
 1592 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1593              	.LBB142:
 1594              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1595              		.loc 2 211 2
 1596              		.syntax unified
 1597              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1598 000c EFF31182 			mrs r2, basepri											
 1599 0010 4FF05003 		mov r3, #80												
 1600 0014 83F31188 		msr basepri, r3											
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 59


 1601 0018 BFF36F8F 		isb														
 1602 001c BFF34F8F 		dsb														
 1603              	
 1604              	@ 0 "" 2
 1605              		.thumb
 1606              		.syntax unified
 1607 0020 3A61     		str	r2, [r7, #16]
 1608 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1609              		.loc 2 223 9
 1610 0024 3B69     		ldr	r3, [r7, #16]
 1611              	.LBE143:
 1612              	.LBE142:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1613              		.loc 1 1523 27
 1614 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1615              		.loc 1 1527 12
 1616 0028 7B68     		ldr	r3, [r7, #4]
 1617 002a 002B     		cmp	r3, #0
 1618 002c 02D1     		bne	.L97
 1619              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1620 002e 094B     		ldr	r3, .L100
 1621 0030 1B68     		ldr	r3, [r3]
 1622 0032 00E0     		b	.L98
 1623              	.L97:
 1624              		.loc 1 1527 12 discriminator 2
 1625 0034 7B68     		ldr	r3, [r7, #4]
 1626              	.L98:
 1627              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1628 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1629              		.loc 1 1528 13
 1630 0038 BB69     		ldr	r3, [r7, #24]
 1631 003a DB6A     		ldr	r3, [r3, #44]
 1632 003c 7B61     		str	r3, [r7, #20]
 1633 003e FB69     		ldr	r3, [r7, #28]
 1634 0040 BB60     		str	r3, [r7, #8]
 1635              	.LBB144:
 1636              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 60


 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1637              		.loc 2 229 2
 1638 0042 BB68     		ldr	r3, [r7, #8]
 1639              		.syntax unified
 1640              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1641 0044 83F31188 			msr basepri, r3	
 1642              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1643              		.loc 2 233 1
 1644              		.thumb
 1645              		.syntax unified
 1646 0048 00BF     		nop
 1647              	.LBE145:
 1648              	.LBE144:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1649              		.loc 1 1532 10
 1650 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1651              		.loc 1 1533 2
 1652 004c 1846     		mov	r0, r3
 1653 004e 2037     		adds	r7, r7, #32
 1654              	.LCFI48:
 1655              		.cfi_def_cfa_offset 8
 1656 0050 BD46     		mov	sp, r7
 1657              	.LCFI49:
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 0052 80BD     		pop	{r7, pc}
 1661              	.L101:
 1662              		.align	2
 1663              	.L100:
 1664 0054 00000000 		.word	pxCurrentTCB
 1665              		.cfi_endproc
 1666              	.LFE13:
 1668              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1669              		.align	1
 1670              		.global	vTaskPrioritySet
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1675              	vTaskPrioritySet:
 1676              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 61


1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1677              		.loc 1 1541 2
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 32
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681 0000 80B5     		push	{r7, lr}
 1682              	.LCFI50:
 1683              		.cfi_def_cfa_offset 8
 1684              		.cfi_offset 7, -8
 1685              		.cfi_offset 14, -4
 1686 0002 88B0     		sub	sp, sp, #32
 1687              	.LCFI51:
 1688              		.cfi_def_cfa_offset 40
 1689 0004 00AF     		add	r7, sp, #0
 1690              	.LCFI52:
 1691              		.cfi_def_cfa_register 7
 1692 0006 7860     		str	r0, [r7, #4]
 1693 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1694              		.loc 1 1544 13
 1695 000a 0023     		movs	r3, #0
 1696 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1697              		.loc 1 1546 3
 1698 000e 3B68     		ldr	r3, [r7]
 1699 0010 372B     		cmp	r3, #55
 1700 0012 0BD9     		bls	.L103
 1701              	.LBB146:
 1702              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1703              		.loc 2 195 2
 1704              		.syntax unified
 1705              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1706 0014 4FF05003 			mov r3, #80												
 1707 0018 83F31188 		msr basepri, r3											
 1708 001c BFF36F8F 		isb														
 1709 0020 BFF34F8F 		dsb														
 1710              	
 1711              	@ 0 "" 2
 1712              		.thumb
 1713              		.syntax unified
 1714 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1715              		.loc 2 203 1
 1716 0026 00BF     		nop
 1717              	.L104:
 1718              	.LBE147:
 1719              	.LBE146:
 1720              		.loc 1 1546 3
 1721 0028 00BF     		nop
 1722 002a FDE7     		b	.L104
 1723              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 62


1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1724              		.loc 1 1549 5
 1725 002c 3B68     		ldr	r3, [r7]
 1726 002e 372B     		cmp	r3, #55
 1727 0030 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1728              		.loc 1 1551 18
 1729 0032 3723     		movs	r3, #55
 1730 0034 3B60     		str	r3, [r7]
 1731              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1732              		.loc 1 1558 3
 1733 0036 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1734              		.loc 1 1562 12
 1735 003a 7B68     		ldr	r3, [r7, #4]
 1736 003c 002B     		cmp	r3, #0
 1737 003e 02D1     		bne	.L106
 1738              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1739 0040 3A4B     		ldr	r3, .L115
 1740 0042 1B68     		ldr	r3, [r3]
 1741 0044 00E0     		b	.L107
 1742              	.L106:
 1743              		.loc 1 1562 12 discriminator 2
 1744 0046 7B68     		ldr	r3, [r7, #4]
 1745              	.L107:
 1746              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1747 0048 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1748              		.loc 1 1568 27
 1749 004a BB69     		ldr	r3, [r7, #24]
 1750 004c DB6C     		ldr	r3, [r3, #76]
 1751 004e 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 63


 1752              		.loc 1 1576 6
 1753 0050 7A69     		ldr	r2, [r7, #20]
 1754 0052 3B68     		ldr	r3, [r7]
 1755 0054 9A42     		cmp	r2, r3
 1756 0056 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1757              		.loc 1 1580 7
 1758 0058 3A68     		ldr	r2, [r7]
 1759 005a 7B69     		ldr	r3, [r7, #20]
 1760 005c 9A42     		cmp	r2, r3
 1761 005e 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1762              		.loc 1 1582 16
 1763 0060 324B     		ldr	r3, .L115
 1764 0062 1B68     		ldr	r3, [r3]
 1765              		.loc 1 1582 8
 1766 0064 BA69     		ldr	r2, [r7, #24]
 1767 0066 9A42     		cmp	r2, r3
 1768 0068 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1769              		.loc 1 1587 40
 1770 006a 304B     		ldr	r3, .L115
 1771 006c 1B68     		ldr	r3, [r3]
 1772 006e DB6A     		ldr	r3, [r3, #44]
 1773              		.loc 1 1587 9
 1774 0070 3A68     		ldr	r2, [r7]
 1775 0072 9A42     		cmp	r2, r3
 1776 0074 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1777              		.loc 1 1589 23
 1778 0076 0123     		movs	r3, #1
 1779 0078 FB61     		str	r3, [r7, #28]
 1780 007a 06E0     		b	.L110
 1781              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 64


 1782              		.loc 1 1603 20
 1783 007c 2B4B     		ldr	r3, .L115
 1784 007e 1B68     		ldr	r3, [r3]
 1785              		.loc 1 1603 12
 1786 0080 BA69     		ldr	r2, [r7, #24]
 1787 0082 9A42     		cmp	r2, r3
 1788 0084 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1789              		.loc 1 1608 21
 1790 0086 0123     		movs	r3, #1
 1791 0088 FB61     		str	r3, [r7, #28]
 1792              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1793              		.loc 1 1620 27
 1794 008a BB69     		ldr	r3, [r7, #24]
 1795 008c DB6A     		ldr	r3, [r3, #44]
 1796 008e 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1797              		.loc 1 1626 15
 1798 0090 BB69     		ldr	r3, [r7, #24]
 1799 0092 DA6C     		ldr	r2, [r3, #76]
 1800              		.loc 1 1626 40
 1801 0094 BB69     		ldr	r3, [r7, #24]
 1802 0096 DB6A     		ldr	r3, [r3, #44]
 1803              		.loc 1 1626 8
 1804 0098 9A42     		cmp	r2, r3
 1805 009a 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1806              		.loc 1 1628 25
 1807 009c BB69     		ldr	r3, [r7, #24]
 1808 009e 3A68     		ldr	r2, [r7]
 1809 00a0 DA62     		str	r2, [r3, #44]
 1810              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 65


1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1811              		.loc 1 1636 28
 1812 00a2 BB69     		ldr	r3, [r7, #24]
 1813 00a4 3A68     		ldr	r2, [r7]
 1814 00a6 DA64     		str	r2, [r3, #76]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1815              		.loc 1 1646 11
 1816 00a8 BB69     		ldr	r3, [r7, #24]
 1817 00aa 9B69     		ldr	r3, [r3, #24]
 1818              		.loc 1 1646 7
 1819 00ac 002B     		cmp	r3, #0
 1820 00ae 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1821              		.loc 1 1648 6
 1822 00b0 3B68     		ldr	r3, [r7]
 1823 00b2 C3F13802 		rsb	r2, r3, #56
 1824 00b6 BB69     		ldr	r3, [r7, #24]
 1825 00b8 9A61     		str	r2, [r3, #24]
 1826              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1827              		.loc 1 1659 9
 1828 00ba BB69     		ldr	r3, [r7, #24]
 1829 00bc 5969     		ldr	r1, [r3, #20]
 1830 00be 3A69     		ldr	r2, [r7, #16]
 1831 00c0 1346     		mov	r3, r2
 1832 00c2 9B00     		lsls	r3, r3, #2
 1833 00c4 1344     		add	r3, r3, r2
 1834 00c6 9B00     		lsls	r3, r3, #2
 1835 00c8 194A     		ldr	r2, .L115+4
 1836 00ca 1344     		add	r3, r3, r2
 1837              		.loc 1 1659 7
 1838 00cc 9942     		cmp	r1, r3
 1839 00ce 1CD1     		bne	.L113
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 66


1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1840              		.loc 1 1664 10
 1841 00d0 BB69     		ldr	r3, [r7, #24]
 1842 00d2 0433     		adds	r3, r3, #4
 1843 00d4 1846     		mov	r0, r3
 1844 00d6 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1845              		.loc 1 1675 6
 1846 00da BB69     		ldr	r3, [r7, #24]
 1847 00dc DA6A     		ldr	r2, [r3, #44]
 1848 00de 154B     		ldr	r3, .L115+8
 1849 00e0 1B68     		ldr	r3, [r3]
 1850 00e2 9A42     		cmp	r2, r3
 1851 00e4 03D9     		bls	.L114
 1852              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1853 00e6 BB69     		ldr	r3, [r7, #24]
 1854 00e8 DB6A     		ldr	r3, [r3, #44]
 1855 00ea 124A     		ldr	r2, .L115+8
 1856 00ec 1360     		str	r3, [r2]
 1857              	.L114:
 1858              		.loc 1 1675 6 discriminator 3
 1859 00ee BB69     		ldr	r3, [r7, #24]
 1860 00f0 DA6A     		ldr	r2, [r3, #44]
 1861 00f2 1346     		mov	r3, r2
 1862 00f4 9B00     		lsls	r3, r3, #2
 1863 00f6 1344     		add	r3, r3, r2
 1864 00f8 9B00     		lsls	r3, r3, #2
 1865 00fa 0D4A     		ldr	r2, .L115+4
 1866 00fc 1A44     		add	r2, r2, r3
 1867 00fe BB69     		ldr	r3, [r7, #24]
 1868 0100 0433     		adds	r3, r3, #4
 1869 0102 1946     		mov	r1, r3
 1870 0104 1046     		mov	r0, r2
 1871 0106 FFF7FEFF 		bl	vListInsertEnd
 1872              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1873              		.loc 1 1682 7 is_stmt 1
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 67


 1874 010a FB69     		ldr	r3, [r7, #28]
 1875 010c 002B     		cmp	r3, #0
 1876 010e 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1877              		.loc 1 1684 6
 1878 0110 094B     		ldr	r3, .L115+12
 1879 0112 4FF08052 		mov	r2, #268435456
 1880 0116 1A60     		str	r2, [r3]
 1881              		.syntax unified
 1882              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1883 0118 BFF34F8F 		dsb
 1884              	@ 0 "" 2
 1885              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1886 011c BFF36F8F 		isb
 1887              	@ 0 "" 2
 1888              		.thumb
 1889              		.syntax unified
 1890              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1891              		.loc 1 1696 3
 1892 0120 FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1893              		.loc 1 1697 2
 1894 0124 00BF     		nop
 1895 0126 2037     		adds	r7, r7, #32
 1896              	.LCFI53:
 1897              		.cfi_def_cfa_offset 8
 1898 0128 BD46     		mov	sp, r7
 1899              	.LCFI54:
 1900              		.cfi_def_cfa_register 13
 1901              		@ sp needed
 1902 012a 80BD     		pop	{r7, pc}
 1903              	.L116:
 1904              		.align	2
 1905              	.L115:
 1906 012c 00000000 		.word	pxCurrentTCB
 1907 0130 00000000 		.word	pxReadyTasksLists
 1908 0134 00000000 		.word	uxTopReadyPriority
 1909 0138 04ED00E0 		.word	-536810236
 1910              		.cfi_endproc
 1911              	.LFE14:
 1913              		.section	.text.vTaskSuspend,"ax",%progbits
 1914              		.align	1
 1915              		.global	vTaskSuspend
 1916              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 68


 1917              		.thumb
 1918              		.thumb_func
 1920              	vTaskSuspend:
 1921              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1922              		.loc 1 1705 2
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 16
 1925              		@ frame_needed = 1, uses_anonymous_args = 0
 1926 0000 80B5     		push	{r7, lr}
 1927              	.LCFI55:
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 7, -8
 1930              		.cfi_offset 14, -4
 1931 0002 84B0     		sub	sp, sp, #16
 1932              	.LCFI56:
 1933              		.cfi_def_cfa_offset 24
 1934 0004 00AF     		add	r7, sp, #0
 1935              	.LCFI57:
 1936              		.cfi_def_cfa_register 7
 1937 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1938              		.loc 1 1708 3
 1939 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1940              		.loc 1 1712 12
 1941 000c 7B68     		ldr	r3, [r7, #4]
 1942 000e 002B     		cmp	r3, #0
 1943 0010 02D1     		bne	.L118
 1944              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1945 0012 304B     		ldr	r3, .L129
 1946 0014 1B68     		ldr	r3, [r3]
 1947 0016 00E0     		b	.L119
 1948              	.L118:
 1949              		.loc 1 1712 12 discriminator 2
 1950 0018 7B68     		ldr	r3, [r7, #4]
 1951              	.L119:
 1952              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1953 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 69


 1954              		.loc 1 1718 8
 1955 001c FB68     		ldr	r3, [r7, #12]
 1956 001e 0433     		adds	r3, r3, #4
 1957 0020 1846     		mov	r0, r3
 1958 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1959              		.loc 1 1728 8
 1960 0026 FB68     		ldr	r3, [r7, #12]
 1961 0028 9B6A     		ldr	r3, [r3, #40]
 1962              		.loc 1 1728 6
 1963 002a 002B     		cmp	r3, #0
 1964 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1965              		.loc 1 1730 14
 1966 002e FB68     		ldr	r3, [r7, #12]
 1967 0030 1833     		adds	r3, r3, #24
 1968 0032 1846     		mov	r0, r3
 1969 0034 FFF7FEFF 		bl	uxListRemove
 1970              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1971              		.loc 1 1737 4
 1972 0038 FB68     		ldr	r3, [r7, #12]
 1973 003a 0433     		adds	r3, r3, #4
 1974 003c 1946     		mov	r1, r3
 1975 003e 2648     		ldr	r0, .L129+4
 1976 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1977              		.loc 1 1741 14
 1978 0044 FB68     		ldr	r3, [r7, #12]
 1979 0046 93F85830 		ldrb	r3, [r3, #88]
 1980 004a DBB2     		uxtb	r3, r3
 1981              		.loc 1 1741 7
 1982 004c 012B     		cmp	r3, #1
 1983 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 70


 1984              		.loc 1 1745 27
 1985 0050 FB68     		ldr	r3, [r7, #12]
 1986 0052 0022     		movs	r2, #0
 1987 0054 83F85820 		strb	r2, [r3, #88]
 1988              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1989              		.loc 1 1750 3
 1990 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1991              		.loc 1 1752 25
 1992 005c 1F4B     		ldr	r3, .L129+8
 1993 005e 1B68     		ldr	r3, [r3]
 1994              		.loc 1 1752 5
 1995 0060 002B     		cmp	r3, #0
 1996 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1997              		.loc 1 1756 4
 1998 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1999              		.loc 1 1758 5
 2000 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2001              		.loc 1 1760 4
 2002 006c FFF7FEFF 		bl	vPortExitCritical
 2003              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2004              		.loc 1 1767 13
 2005 0070 184B     		ldr	r3, .L129
 2006 0072 1B68     		ldr	r3, [r3]
 2007              		.loc 1 1767 5
 2008 0074 FA68     		ldr	r2, [r7, #12]
 2009 0076 9A42     		cmp	r2, r3
 2010 0078 28D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2011              		.loc 1 1769 26
 2012 007a 184B     		ldr	r3, .L129+8
 2013 007c 1B68     		ldr	r3, [r3]
 2014              		.loc 1 1769 6
 2015 007e 002B     		cmp	r3, #0
 2016 0080 18D0     		beq	.L124
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 71


1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2017              		.loc 1 1772 5
 2018 0082 174B     		ldr	r3, .L129+12
 2019 0084 1B68     		ldr	r3, [r3]
 2020 0086 002B     		cmp	r3, #0
 2021 0088 0BD0     		beq	.L125
 2022              	.LBB148:
 2023              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2024              		.loc 2 195 2
 2025              		.syntax unified
 2026              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2027 008a 4FF05003 			mov r3, #80												
 2028 008e 83F31188 		msr basepri, r3											
 2029 0092 BFF36F8F 		isb														
 2030 0096 BFF34F8F 		dsb														
 2031              	
 2032              	@ 0 "" 2
 2033              		.thumb
 2034              		.syntax unified
 2035 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2036              		.loc 2 203 1
 2037 009c 00BF     		nop
 2038              	.L126:
 2039              	.LBE149:
 2040              	.LBE148:
 2041              		.loc 1 1772 5
 2042 009e 00BF     		nop
 2043 00a0 FDE7     		b	.L126
 2044              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2045              		.loc 1 1773 5
 2046 00a2 104B     		ldr	r3, .L129+16
 2047 00a4 4FF08052 		mov	r2, #268435456
 2048 00a8 1A60     		str	r2, [r3]
 2049              		.syntax unified
 2050              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2051 00aa BFF34F8F 		dsb
 2052              	@ 0 "" 2
 2053              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2054 00ae BFF36F8F 		isb
 2055              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 72


1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2056              		.loc 1 1798 2
 2057              		.thumb
 2058              		.syntax unified
 2059 00b2 0BE0     		b	.L128
 2060              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2061              		.loc 1 1780 9
 2062 00b4 084B     		ldr	r3, .L129+4
 2063 00b6 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2064              		.loc 1 1780 56
 2065 00b8 0B4B     		ldr	r3, .L129+20
 2066 00ba 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2067              		.loc 1 1780 7
 2068 00bc 9A42     		cmp	r2, r3
 2069 00be 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2070              		.loc 1 1786 19
 2071 00c0 044B     		ldr	r3, .L129
 2072 00c2 0022     		movs	r2, #0
 2073 00c4 1A60     		str	r2, [r3]
 2074              		.loc 1 1798 2
 2075 00c6 01E0     		b	.L128
 2076              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2077              		.loc 1 1790 6
 2078 00c8 FFF7FEFF 		bl	vTaskSwitchContext
 2079              	.L128:
 2080              		.loc 1 1798 2
 2081 00cc 00BF     		nop
 2082 00ce 1037     		adds	r7, r7, #16
 2083              	.LCFI58:
 2084              		.cfi_def_cfa_offset 8
 2085 00d0 BD46     		mov	sp, r7
 2086              	.LCFI59:
 2087              		.cfi_def_cfa_register 13
 2088              		@ sp needed
 2089 00d2 80BD     		pop	{r7, pc}
 2090              	.L130:
 2091              		.align	2
 2092              	.L129:
 2093 00d4 00000000 		.word	pxCurrentTCB
 2094 00d8 00000000 		.word	xSuspendedTaskList
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 73


 2095 00dc 00000000 		.word	xSchedulerRunning
 2096 00e0 00000000 		.word	uxSchedulerSuspended
 2097 00e4 04ED00E0 		.word	-536810236
 2098 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2099              		.cfi_endproc
 2100              	.LFE15:
 2102              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2103              		.align	1
 2104              		.syntax unified
 2105              		.thumb
 2106              		.thumb_func
 2108              	prvTaskIsTaskSuspended:
 2109              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2110              		.loc 1 1806 2
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 24
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114              		@ link register save eliminated.
 2115 0000 80B4     		push	{r7}
 2116              	.LCFI60:
 2117              		.cfi_def_cfa_offset 4
 2118              		.cfi_offset 7, -4
 2119 0002 87B0     		sub	sp, sp, #28
 2120              	.LCFI61:
 2121              		.cfi_def_cfa_offset 32
 2122 0004 00AF     		add	r7, sp, #0
 2123              	.LCFI62:
 2124              		.cfi_def_cfa_register 7
 2125 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2126              		.loc 1 1807 13
 2127 0008 0023     		movs	r3, #0
 2128 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2129              		.loc 1 1808 22
 2130 000c 7B68     		ldr	r3, [r7, #4]
 2131 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2132              		.loc 1 1814 3
 2133 0010 7B68     		ldr	r3, [r7, #4]
 2134 0012 002B     		cmp	r3, #0
 2135 0014 0BD1     		bne	.L132
 2136              	.LBB150:
 2137              	.LBB151:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 74


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2138              		.loc 2 195 2
 2139              		.syntax unified
 2140              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2141 0016 4FF05003 			mov r3, #80												
 2142 001a 83F31188 		msr basepri, r3											
 2143 001e BFF36F8F 		isb														
 2144 0022 BFF34F8F 		dsb														
 2145              	
 2146              	@ 0 "" 2
 2147              		.thumb
 2148              		.syntax unified
 2149 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2150              		.loc 2 203 1
 2151 0028 00BF     		nop
 2152              	.L133:
 2153              	.LBE151:
 2154              	.LBE150:
 2155              		.loc 1 1814 3
 2156 002a 00BF     		nop
 2157 002c FDE7     		b	.L133
 2158              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2159              		.loc 1 1817 7
 2160 002e 3B69     		ldr	r3, [r7, #16]
 2161 0030 5B69     		ldr	r3, [r3, #20]
 2162              		.loc 1 1817 5
 2163 0032 0A4A     		ldr	r2, .L136
 2164 0034 9342     		cmp	r3, r2
 2165 0036 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2166              		.loc 1 1820 8
 2167 0038 3B69     		ldr	r3, [r7, #16]
 2168 003a 9B6A     		ldr	r3, [r3, #40]
 2169              		.loc 1 1820 6
 2170 003c 084A     		ldr	r2, .L136+4
 2171 003e 9342     		cmp	r3, r2
 2172 0040 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2173              		.loc 1 1824 9
 2174 0042 3B69     		ldr	r3, [r7, #16]
 2175 0044 9B6A     		ldr	r3, [r3, #40]
 2176              		.loc 1 1824 7
 2177 0046 002B     		cmp	r3, #0
 2178 0048 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2179              		.loc 1 1826 14
 2180 004a 0123     		movs	r3, #1
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 75


 2181 004c 7B61     		str	r3, [r7, #20]
 2182              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2183              		.loc 1 1843 10
 2184 004e 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2185              		.loc 1 1844 2
 2186 0050 1846     		mov	r0, r3
 2187 0052 1C37     		adds	r7, r7, #28
 2188              	.LCFI63:
 2189              		.cfi_def_cfa_offset 4
 2190 0054 BD46     		mov	sp, r7
 2191              	.LCFI64:
 2192              		.cfi_def_cfa_register 13
 2193              		@ sp needed
 2194 0056 5DF8047B 		ldr	r7, [sp], #4
 2195              	.LCFI65:
 2196              		.cfi_restore 7
 2197              		.cfi_def_cfa_offset 0
 2198 005a 7047     		bx	lr
 2199              	.L137:
 2200              		.align	2
 2201              	.L136:
 2202 005c 00000000 		.word	xSuspendedTaskList
 2203 0060 00000000 		.word	xPendingReadyList
 2204              		.cfi_endproc
 2205              	.LFE16:
 2207              		.section	.text.vTaskResume,"ax",%progbits
 2208              		.align	1
 2209              		.global	vTaskResume
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2214              	vTaskResume:
 2215              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 76


1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2216              		.loc 1 1852 2
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 16
 2219              		@ frame_needed = 1, uses_anonymous_args = 0
 2220 0000 80B5     		push	{r7, lr}
 2221              	.LCFI66:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
 2225 0002 84B0     		sub	sp, sp, #16
 2226              	.LCFI67:
 2227              		.cfi_def_cfa_offset 24
 2228 0004 00AF     		add	r7, sp, #0
 2229              	.LCFI68:
 2230              		.cfi_def_cfa_register 7
 2231 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2232              		.loc 1 1853 16
 2233 0008 7B68     		ldr	r3, [r7, #4]
 2234 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2235              		.loc 1 1856 3
 2236 000c 7B68     		ldr	r3, [r7, #4]
 2237 000e 002B     		cmp	r3, #0
 2238 0010 0BD1     		bne	.L139
 2239              	.LBB152:
 2240              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2241              		.loc 2 195 2
 2242              		.syntax unified
 2243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2244 0012 4FF05003 			mov r3, #80												
 2245 0016 83F31188 		msr basepri, r3											
 2246 001a BFF36F8F 		isb														
 2247 001e BFF34F8F 		dsb														
 2248              	
 2249              	@ 0 "" 2
 2250              		.thumb
 2251              		.syntax unified
 2252 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2253              		.loc 2 203 1
 2254 0024 00BF     		nop
 2255              	.L140:
 2256              	.LBE153:
 2257              	.LBE152:
 2258              		.loc 1 1856 3
 2259 0026 00BF     		nop
 2260 0028 FDE7     		b	.L140
 2261              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 77


1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2262              		.loc 1 1860 15
 2263 002a 214B     		ldr	r3, .L145
 2264 002c 1B68     		ldr	r3, [r3]
 2265              		.loc 1 1860 5
 2266 002e FA68     		ldr	r2, [r7, #12]
 2267 0030 9A42     		cmp	r2, r3
 2268 0032 38D0     		beq	.L144
 2269              		.loc 1 1860 33 discriminator 1
 2270 0034 FB68     		ldr	r3, [r7, #12]
 2271 0036 002B     		cmp	r3, #0
 2272 0038 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2273              		.loc 1 1862 4
 2274 003a FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2275              		.loc 1 1864 9
 2276 003e F868     		ldr	r0, [r7, #12]
 2277 0040 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2278 0044 0346     		mov	r3, r0
 2279              		.loc 1 1864 7 discriminator 1
 2280 0046 002B     		cmp	r3, #0
 2281 0048 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2282              		.loc 1 1870 15
 2283 004a FB68     		ldr	r3, [r7, #12]
 2284 004c 0433     		adds	r3, r3, #4
 2285 004e 1846     		mov	r0, r3
 2286 0050 FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2287              		.loc 1 1871 6
 2288 0054 FB68     		ldr	r3, [r7, #12]
 2289 0056 DA6A     		ldr	r2, [r3, #44]
 2290 0058 164B     		ldr	r3, .L145+4
 2291 005a 1B68     		ldr	r3, [r3]
 2292 005c 9A42     		cmp	r2, r3
 2293 005e 03D9     		bls	.L143
 2294              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2295 0060 FB68     		ldr	r3, [r7, #12]
 2296 0062 DB6A     		ldr	r3, [r3, #44]
 2297 0064 134A     		ldr	r2, .L145+4
 2298 0066 1360     		str	r3, [r2]
 2299              	.L143:
 2300              		.loc 1 1871 6 discriminator 3
 2301 0068 FB68     		ldr	r3, [r7, #12]
 2302 006a DA6A     		ldr	r2, [r3, #44]
 2303 006c 1346     		mov	r3, r2
 2304 006e 9B00     		lsls	r3, r3, #2
 2305 0070 1344     		add	r3, r3, r2
 2306 0072 9B00     		lsls	r3, r3, #2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 78


 2307 0074 104A     		ldr	r2, .L145+8
 2308 0076 1A44     		add	r2, r2, r3
 2309 0078 FB68     		ldr	r3, [r7, #12]
 2310 007a 0433     		adds	r3, r3, #4
 2311 007c 1946     		mov	r1, r3
 2312 007e 1046     		mov	r0, r2
 2313 0080 FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2314              		.loc 1 1874 15 is_stmt 1
 2315 0084 FB68     		ldr	r3, [r7, #12]
 2316 0086 DA6A     		ldr	r2, [r3, #44]
 2317              		.loc 1 1874 43
 2318 0088 094B     		ldr	r3, .L145
 2319 008a 1B68     		ldr	r3, [r3]
 2320 008c DB6A     		ldr	r3, [r3, #44]
 2321              		.loc 1 1874 8
 2322 008e 9A42     		cmp	r2, r3
 2323 0090 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2324              		.loc 1 1879 7
 2325 0092 0A4B     		ldr	r3, .L145+12
 2326 0094 4FF08052 		mov	r2, #268435456
 2327 0098 1A60     		str	r2, [r3]
 2328              		.syntax unified
 2329              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2330 009a BFF34F8F 		dsb
 2331              	@ 0 "" 2
 2332              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2333 009e BFF36F8F 		isb
 2334              	@ 0 "" 2
 2335              		.thumb
 2336              		.syntax unified
 2337              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2338              		.loc 1 1891 4
 2339 00a2 FFF7FEFF 		bl	vPortExitCritical
 2340              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 79


1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2341              		.loc 1 1897 2
 2342 00a6 00BF     		nop
 2343 00a8 1037     		adds	r7, r7, #16
 2344              	.LCFI69:
 2345              		.cfi_def_cfa_offset 8
 2346 00aa BD46     		mov	sp, r7
 2347              	.LCFI70:
 2348              		.cfi_def_cfa_register 13
 2349              		@ sp needed
 2350 00ac 80BD     		pop	{r7, pc}
 2351              	.L146:
 2352 00ae 00BF     		.align	2
 2353              	.L145:
 2354 00b0 00000000 		.word	pxCurrentTCB
 2355 00b4 00000000 		.word	uxTopReadyPriority
 2356 00b8 00000000 		.word	pxReadyTasksLists
 2357 00bc 04ED00E0 		.word	-536810236
 2358              		.cfi_endproc
 2359              	.LFE17:
 2361              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2362              		.align	1
 2363              		.global	xTaskResumeFromISR
 2364              		.syntax unified
 2365              		.thumb
 2366              		.thumb_func
 2368              	xTaskResumeFromISR:
 2369              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2370              		.loc 1 1906 2
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 40
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374 0000 80B5     		push	{r7, lr}
 2375              	.LCFI71:
 2376              		.cfi_def_cfa_offset 8
 2377              		.cfi_offset 7, -8
 2378              		.cfi_offset 14, -4
 2379 0002 8AB0     		sub	sp, sp, #40
 2380              	.LCFI72:
 2381              		.cfi_def_cfa_offset 48
 2382 0004 00AF     		add	r7, sp, #0
 2383              	.LCFI73:
 2384              		.cfi_def_cfa_register 7
 2385 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2386              		.loc 1 1907 13
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 80


 2387 0008 0023     		movs	r3, #0
 2388 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2389              		.loc 1 1908 16
 2390 000c 7B68     		ldr	r3, [r7, #4]
 2391 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2392              		.loc 1 1911 3
 2393 0010 7B68     		ldr	r3, [r7, #4]
 2394 0012 002B     		cmp	r3, #0
 2395 0014 0BD1     		bne	.L148
 2396              	.LBB154:
 2397              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2398              		.loc 2 195 2
 2399              		.syntax unified
 2400              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2401 0016 4FF05003 			mov r3, #80												
 2402 001a 83F31188 		msr basepri, r3											
 2403 001e BFF36F8F 		isb														
 2404 0022 BFF34F8F 		dsb														
 2405              	
 2406              	@ 0 "" 2
 2407              		.thumb
 2408              		.syntax unified
 2409 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2410              		.loc 2 203 1
 2411 0028 00BF     		nop
 2412              	.L149:
 2413              	.LBE155:
 2414              	.LBE154:
 2415              		.loc 1 1911 3
 2416 002a 00BF     		nop
 2417 002c FDE7     		b	.L149
 2418              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2419              		.loc 1 1929 3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 81


 2420 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
 2421              	.LBB156:
 2422              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2423              		.loc 2 211 2
 2424              		.syntax unified
 2425              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2426 0032 EFF31182 			mrs r2, basepri											
 2427 0036 4FF05003 		mov r3, #80												
 2428 003a 83F31188 		msr basepri, r3											
 2429 003e BFF36F8F 		isb														
 2430 0042 BFF34F8F 		dsb														
 2431              	
 2432              	@ 0 "" 2
 2433              		.thumb
 2434              		.syntax unified
 2435 0046 7A61     		str	r2, [r7, #20]
 2436 0048 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2437              		.loc 2 223 9
 2438 004a 7B69     		ldr	r3, [r7, #20]
 2439              	.LBE157:
 2440              	.LBE156:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2441              		.loc 1 1931 28
 2442 004c FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2443              		.loc 1 1933 8
 2444 004e 386A     		ldr	r0, [r7, #32]
 2445 0050 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2446 0054 0346     		mov	r3, r0
 2447              		.loc 1 1933 6 discriminator 1
 2448 0056 002B     		cmp	r3, #0
 2449 0058 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2450              		.loc 1 1938 30
 2451 005a 1E4B     		ldr	r3, .L156
 2452 005c 1B68     		ldr	r3, [r3]
 2453              		.loc 1 1938 7
 2454 005e 002B     		cmp	r3, #0
 2455 0060 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2456              		.loc 1 1942 15
 2457 0062 3B6A     		ldr	r3, [r7, #32]
 2458 0064 DA6A     		ldr	r2, [r3, #44]
 2459              		.loc 1 1942 43
 2460 0066 1C4B     		ldr	r3, .L156+4
 2461 0068 1B68     		ldr	r3, [r3]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 82


 2462 006a DB6A     		ldr	r3, [r3, #44]
 2463              		.loc 1 1942 8
 2464 006c 9A42     		cmp	r2, r3
 2465 006e 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2466              		.loc 1 1944 22
 2467 0070 0123     		movs	r3, #1
 2468 0072 7B62     		str	r3, [r7, #36]
 2469              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2470              		.loc 1 1951 15
 2471 0074 3B6A     		ldr	r3, [r7, #32]
 2472 0076 0433     		adds	r3, r3, #4
 2473 0078 1846     		mov	r0, r3
 2474 007a FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2475              		.loc 1 1952 6
 2476 007e 3B6A     		ldr	r3, [r7, #32]
 2477 0080 DA6A     		ldr	r2, [r3, #44]
 2478 0082 164B     		ldr	r3, .L156+8
 2479 0084 1B68     		ldr	r3, [r3]
 2480 0086 9A42     		cmp	r2, r3
 2481 0088 03D9     		bls	.L154
 2482              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2483 008a 3B6A     		ldr	r3, [r7, #32]
 2484 008c DB6A     		ldr	r3, [r3, #44]
 2485 008e 134A     		ldr	r2, .L156+8
 2486 0090 1360     		str	r3, [r2]
 2487              	.L154:
 2488              		.loc 1 1952 6 discriminator 3
 2489 0092 3B6A     		ldr	r3, [r7, #32]
 2490 0094 DA6A     		ldr	r2, [r3, #44]
 2491 0096 1346     		mov	r3, r2
 2492 0098 9B00     		lsls	r3, r3, #2
 2493 009a 1344     		add	r3, r3, r2
 2494 009c 9B00     		lsls	r3, r3, #2
 2495 009e 104A     		ldr	r2, .L156+12
 2496 00a0 1A44     		add	r2, r2, r3
 2497 00a2 3B6A     		ldr	r3, [r7, #32]
 2498 00a4 0433     		adds	r3, r3, #4
 2499 00a6 1946     		mov	r1, r3
 2500 00a8 1046     		mov	r0, r2
 2501 00aa FFF7FEFF 		bl	vListInsertEnd
 2502 00ae 05E0     		b	.L151
 2503              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 83


1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2504              		.loc 1 1959 6 is_stmt 1
 2505 00b0 3B6A     		ldr	r3, [r7, #32]
 2506 00b2 1833     		adds	r3, r3, #24
 2507 00b4 1946     		mov	r1, r3
 2508 00b6 0B48     		ldr	r0, .L156+16
 2509 00b8 FFF7FEFF 		bl	vListInsertEnd
 2510              	.L151:
 2511 00bc FB69     		ldr	r3, [r7, #28]
 2512 00be FB60     		str	r3, [r7, #12]
 2513              	.LBB158:
 2514              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2515              		.loc 2 229 2
 2516 00c0 FB68     		ldr	r3, [r7, #12]
 2517              		.syntax unified
 2518              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2519 00c2 83F31188 			msr basepri, r3	
 2520              	@ 0 "" 2
 2521              		.loc 2 233 1
 2522              		.thumb
 2523              		.syntax unified
 2524 00c6 00BF     		nop
 2525              	.LBE159:
 2526              	.LBE158:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2527              		.loc 1 1969 10
 2528 00c8 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2529              		.loc 1 1970 2
 2530 00ca 1846     		mov	r0, r3
 2531 00cc 2837     		adds	r7, r7, #40
 2532              	.LCFI74:
 2533              		.cfi_def_cfa_offset 8
 2534 00ce BD46     		mov	sp, r7
 2535              	.LCFI75:
 2536              		.cfi_def_cfa_register 13
 2537              		@ sp needed
 2538 00d0 80BD     		pop	{r7, pc}
 2539              	.L157:
 2540 00d2 00BF     		.align	2
 2541              	.L156:
 2542 00d4 00000000 		.word	uxSchedulerSuspended
 2543 00d8 00000000 		.word	pxCurrentTCB
 2544 00dc 00000000 		.word	uxTopReadyPriority
 2545 00e0 00000000 		.word	pxReadyTasksLists
 2546 00e4 00000000 		.word	xPendingReadyList
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 84


 2547              		.cfi_endproc
 2548              	.LFE18:
 2550              		.section	.rodata
 2551              		.align	2
 2552              	.LC0:
 2553 0000 49444C45 		.ascii	"IDLE\000"
 2553      00
 2554              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2555              		.align	1
 2556              		.global	vTaskStartScheduler
 2557              		.syntax unified
 2558              		.thumb
 2559              		.thumb_func
 2561              	vTaskStartScheduler:
 2562              	.LFB19:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2563              		.loc 1 1976 1
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 24
 2566              		@ frame_needed = 1, uses_anonymous_args = 0
 2567 0000 80B5     		push	{r7, lr}
 2568              	.LCFI76:
 2569              		.cfi_def_cfa_offset 8
 2570              		.cfi_offset 7, -8
 2571              		.cfi_offset 14, -4
 2572 0002 8AB0     		sub	sp, sp, #40
 2573              	.LCFI77:
 2574              		.cfi_def_cfa_offset 48
 2575 0004 04AF     		add	r7, sp, #16
 2576              	.LCFI78:
 2577              		.cfi_def_cfa 7, 32
 2578              	.LBB160:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2579              		.loc 1 1982 17
 2580 0006 0023     		movs	r3, #0
 2581 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2582              		.loc 1 1983 16
 2583 000a 0023     		movs	r3, #0
 2584 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2585              		.loc 1 1988 3
 2586 000e 3A46     		mov	r2, r7
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 85


 2587 0010 391D     		adds	r1, r7, #4
 2588 0012 07F10803 		add	r3, r7, #8
 2589 0016 1846     		mov	r0, r3
 2590 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2591              		.loc 1 1989 21
 2592 001c 3968     		ldr	r1, [r7]
 2593 001e 7B68     		ldr	r3, [r7, #4]
 2594 0020 BA68     		ldr	r2, [r7, #8]
 2595 0022 0292     		str	r2, [sp, #8]
 2596 0024 0193     		str	r3, [sp, #4]
 2597 0026 0023     		movs	r3, #0
 2598 0028 0093     		str	r3, [sp]
 2599 002a 0023     		movs	r3, #0
 2600 002c 0A46     		mov	r2, r1
 2601 002e 2249     		ldr	r1, .L166
 2602 0030 2248     		ldr	r0, .L166+4
 2603 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2604 0036 0346     		mov	r3, r0
 2605              		.loc 1 1989 19 discriminator 1
 2606 0038 214A     		ldr	r2, .L166+8
 2607 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2608              		.loc 1 1997 23
 2609 003c 204B     		ldr	r3, .L166+8
 2610 003e 1B68     		ldr	r3, [r3]
 2611              		.loc 1 1997 5
 2612 0040 002B     		cmp	r3, #0
 2613 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2614              		.loc 1 1999 12
 2615 0044 0123     		movs	r3, #1
 2616 0046 7B61     		str	r3, [r7, #20]
 2617 0048 01E0     		b	.L160
 2618              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2619              		.loc 1 2003 12
 2620 004a 0023     		movs	r3, #0
 2621 004c 7B61     		str	r3, [r7, #20]
 2622              	.L160:
 2623              	.LBE160:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 86


2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2624              		.loc 1 2020 5
 2625 004e 7B69     		ldr	r3, [r7, #20]
 2626 0050 012B     		cmp	r3, #1
 2627 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2628              		.loc 1 2022 14
 2629 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2630 0058 7861     		str	r0, [r7, #20]
 2631              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2632              		.loc 1 2031 4
 2633 005a 7B69     		ldr	r3, [r7, #20]
 2634 005c 012B     		cmp	r3, #1
 2635 005e 16D1     		bne	.L162
 2636              	.LBB161:
 2637              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2638              		.loc 2 195 2
 2639              		.syntax unified
 2640              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2641 0060 4FF05003 			mov r3, #80												
 2642 0064 83F31188 		msr basepri, r3											
 2643 0068 BFF36F8F 		isb														
 2644 006c BFF34F8F 		dsb														
 2645              	
 2646              	@ 0 "" 2
 2647              		.thumb
 2648              		.syntax unified
 2649 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2650              		.loc 2 203 1
 2651 0072 00BF     		nop
 2652              	.LBE162:
 2653              	.LBE161:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 87


2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2654              		.loc 1 2059 24
 2655 0074 134B     		ldr	r3, .L166+12
 2656 0076 4FF0FF32 		mov	r2, #-1
 2657 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2658              		.loc 1 2060 21
 2659 007c 124B     		ldr	r3, .L166+16
 2660 007e 0122     		movs	r2, #1
 2661 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2662              		.loc 1 2061 14
 2663 0082 124B     		ldr	r3, .L166+20
 2664 0084 0022     		movs	r2, #0
 2665 0086 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2666              		.loc 1 2075 7
 2667 0088 FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 88


2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2668              		.loc 1 2096 1
 2669 008c 0FE0     		b	.L165
 2670              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2671              		.loc 1 2090 3
 2672 008e 7B69     		ldr	r3, [r7, #20]
 2673 0090 B3F1FF3F 		cmp	r3, #-1
 2674 0094 0BD1     		bne	.L165
 2675              	.LBB163:
 2676              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2677              		.loc 2 195 2
 2678              		.syntax unified
 2679              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2680 0096 4FF05003 			mov r3, #80												
 2681 009a 83F31188 		msr basepri, r3											
 2682 009e BFF36F8F 		isb														
 2683 00a2 BFF34F8F 		dsb														
 2684              	
 2685              	@ 0 "" 2
 2686              		.thumb
 2687              		.syntax unified
 2688 00a6 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2689              		.loc 2 203 1
 2690 00a8 00BF     		nop
 2691              	.L164:
 2692              	.LBE164:
 2693              	.LBE163:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2694              		.loc 1 2090 3
 2695 00aa 00BF     		nop
 2696 00ac FDE7     		b	.L164
 2697              	.L165:
 2698              		.loc 1 2096 1
 2699 00ae 00BF     		nop
 2700 00b0 1837     		adds	r7, r7, #24
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 89


 2701              	.LCFI79:
 2702              		.cfi_def_cfa_offset 8
 2703 00b2 BD46     		mov	sp, r7
 2704              	.LCFI80:
 2705              		.cfi_def_cfa_register 13
 2706              		@ sp needed
 2707 00b4 80BD     		pop	{r7, pc}
 2708              	.L167:
 2709 00b6 00BF     		.align	2
 2710              	.L166:
 2711 00b8 00000000 		.word	.LC0
 2712 00bc 00000000 		.word	prvIdleTask
 2713 00c0 00000000 		.word	xIdleTaskHandle
 2714 00c4 00000000 		.word	xNextTaskUnblockTime
 2715 00c8 00000000 		.word	xSchedulerRunning
 2716 00cc 00000000 		.word	xTickCount
 2717              		.cfi_endproc
 2718              	.LFE19:
 2720              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2721              		.align	1
 2722              		.global	vTaskEndScheduler
 2723              		.syntax unified
 2724              		.thumb
 2725              		.thumb_func
 2727              	vTaskEndScheduler:
 2728              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2729              		.loc 1 2100 1
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 8
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0000 80B5     		push	{r7, lr}
 2734              	.LCFI81:
 2735              		.cfi_def_cfa_offset 8
 2736              		.cfi_offset 7, -8
 2737              		.cfi_offset 14, -4
 2738 0002 82B0     		sub	sp, sp, #8
 2739              	.LCFI82:
 2740              		.cfi_def_cfa_offset 16
 2741 0004 00AF     		add	r7, sp, #0
 2742              	.LCFI83:
 2743              		.cfi_def_cfa_register 7
 2744              	.LBB165:
 2745              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2746              		.loc 2 195 2
 2747              		.syntax unified
 2748              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2749 0006 4FF05003 			mov r3, #80												
 2750 000a 83F31188 		msr basepri, r3											
 2751 000e BFF36F8F 		isb														
 2752 0012 BFF34F8F 		dsb														
 2753              	
 2754              	@ 0 "" 2
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 90


 2755              		.thumb
 2756              		.syntax unified
 2757 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2758              		.loc 2 203 1
 2759 0018 00BF     		nop
 2760              	.LBE166:
 2761              	.LBE165:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2762              		.loc 1 2105 20
 2763 001a 044B     		ldr	r3, .L169
 2764 001c 0022     		movs	r2, #0
 2765 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2766              		.loc 1 2106 2
 2767 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2768              		.loc 1 2107 1
 2769 0024 00BF     		nop
 2770 0026 0837     		adds	r7, r7, #8
 2771              	.LCFI84:
 2772              		.cfi_def_cfa_offset 8
 2773 0028 BD46     		mov	sp, r7
 2774              	.LCFI85:
 2775              		.cfi_def_cfa_register 13
 2776              		@ sp needed
 2777 002a 80BD     		pop	{r7, pc}
 2778              	.L170:
 2779              		.align	2
 2780              	.L169:
 2781 002c 00000000 		.word	xSchedulerRunning
 2782              		.cfi_endproc
 2783              	.LFE20:
 2785              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2786              		.align	1
 2787              		.global	vTaskSuspendAll
 2788              		.syntax unified
 2789              		.thumb
 2790              		.thumb_func
 2792              	vTaskSuspendAll:
 2793              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2794              		.loc 1 2111 1
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 0
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799 0000 80B4     		push	{r7}
 2800              	.LCFI86:
 2801              		.cfi_def_cfa_offset 4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 91


 2802              		.cfi_offset 7, -4
 2803 0002 00AF     		add	r7, sp, #0
 2804              	.LCFI87:
 2805              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2806              		.loc 1 2123 2
 2807 0004 044B     		ldr	r3, .L172
 2808 0006 1B68     		ldr	r3, [r3]
 2809 0008 0133     		adds	r3, r3, #1
 2810 000a 034A     		ldr	r2, .L172
 2811 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2812              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2813              		.loc 1 2128 1
 2814 000e 00BF     		nop
 2815 0010 BD46     		mov	sp, r7
 2816              	.LCFI88:
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0012 5DF8047B 		ldr	r7, [sp], #4
 2820              	.LCFI89:
 2821              		.cfi_restore 7
 2822              		.cfi_def_cfa_offset 0
 2823 0016 7047     		bx	lr
 2824              	.L173:
 2825              		.align	2
 2826              	.L172:
 2827 0018 00000000 		.word	uxSchedulerSuspended
 2828              		.cfi_endproc
 2829              	.LFE21:
 2831              		.section	.text.xTaskResumeAll,"ax",%progbits
 2832              		.align	1
 2833              		.global	xTaskResumeAll
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2838              	xTaskResumeAll:
 2839              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 92


2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 93


2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2840              		.loc 1 2195 1
 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 16
 2843              		@ frame_needed = 1, uses_anonymous_args = 0
 2844 0000 80B5     		push	{r7, lr}
 2845              	.LCFI90:
 2846              		.cfi_def_cfa_offset 8
 2847              		.cfi_offset 7, -8
 2848              		.cfi_offset 14, -4
 2849 0002 84B0     		sub	sp, sp, #16
 2850              	.LCFI91:
 2851              		.cfi_def_cfa_offset 24
 2852 0004 00AF     		add	r7, sp, #0
 2853              	.LCFI92:
 2854              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2855              		.loc 1 2196 8
 2856 0006 0023     		movs	r3, #0
 2857 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2858              		.loc 1 2197 12
 2859 000a 0023     		movs	r3, #0
 2860 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2861              		.loc 1 2201 2
 2862 000e 424B     		ldr	r3, .L187
 2863 0010 1B68     		ldr	r3, [r3]
 2864 0012 002B     		cmp	r3, #0
 2865 0014 0BD1     		bne	.L175
 2866              	.LBB167:
 2867              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2868              		.loc 2 195 2
 2869              		.syntax unified
 2870              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2871 0016 4FF05003 			mov r3, #80												
 2872 001a 83F31188 		msr basepri, r3											
 2873 001e BFF36F8F 		isb														
 2874 0022 BFF34F8F 		dsb														
 2875              	
 2876              	@ 0 "" 2
 2877              		.thumb
 2878              		.syntax unified
 2879 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2880              		.loc 2 203 1
 2881 0028 00BF     		nop
 2882              	.L176:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 94


 2883              	.LBE168:
 2884              	.LBE167:
 2885              		.loc 1 2201 2
 2886 002a 00BF     		nop
 2887 002c FDE7     		b	.L176
 2888              	.L175:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2889              		.loc 1 2208 2
 2890 002e FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2891              		.loc 1 2210 3
 2892 0032 394B     		ldr	r3, .L187
 2893 0034 1B68     		ldr	r3, [r3]
 2894 0036 013B     		subs	r3, r3, #1
 2895 0038 374A     		ldr	r2, .L187
 2896 003a 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2897              		.loc 1 2212 28
 2898 003c 364B     		ldr	r3, .L187
 2899 003e 1B68     		ldr	r3, [r3]
 2900              		.loc 1 2212 5
 2901 0040 002B     		cmp	r3, #0
 2902 0042 62D1     		bne	.L177
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2903              		.loc 1 2214 31
 2904 0044 354B     		ldr	r3, .L187+4
 2905 0046 1B68     		ldr	r3, [r3]
 2906              		.loc 1 2214 6
 2907 0048 002B     		cmp	r3, #0
 2908 004a 5ED0     		beq	.L177
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2909              		.loc 1 2218 10
 2910 004c 2FE0     		b	.L178
 2911              	.L181:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2912              		.loc 1 2220 14
 2913 004e 344B     		ldr	r3, .L187+8
 2914 0050 DB68     		ldr	r3, [r3, #12]
 2915              		.loc 1 2220 12
 2916 0052 DB68     		ldr	r3, [r3, #12]
 2917 0054 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2918              		.loc 1 2221 15
 2919 0056 FB68     		ldr	r3, [r7, #12]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 95


 2920 0058 1833     		adds	r3, r3, #24
 2921 005a 1846     		mov	r0, r3
 2922 005c FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2923              		.loc 1 2222 15
 2924 0060 FB68     		ldr	r3, [r7, #12]
 2925 0062 0433     		adds	r3, r3, #4
 2926 0064 1846     		mov	r0, r3
 2927 0066 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2928              		.loc 1 2223 6
 2929 006a FB68     		ldr	r3, [r7, #12]
 2930 006c DA6A     		ldr	r2, [r3, #44]
 2931 006e 2D4B     		ldr	r3, .L187+12
 2932 0070 1B68     		ldr	r3, [r3]
 2933 0072 9A42     		cmp	r2, r3
 2934 0074 03D9     		bls	.L179
 2935              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2936 0076 FB68     		ldr	r3, [r7, #12]
 2937 0078 DB6A     		ldr	r3, [r3, #44]
 2938 007a 2A4A     		ldr	r2, .L187+12
 2939 007c 1360     		str	r3, [r2]
 2940              	.L179:
 2941              		.loc 1 2223 6 discriminator 3
 2942 007e FB68     		ldr	r3, [r7, #12]
 2943 0080 DA6A     		ldr	r2, [r3, #44]
 2944 0082 1346     		mov	r3, r2
 2945 0084 9B00     		lsls	r3, r3, #2
 2946 0086 1344     		add	r3, r3, r2
 2947 0088 9B00     		lsls	r3, r3, #2
 2948 008a 274A     		ldr	r2, .L187+16
 2949 008c 1A44     		add	r2, r2, r3
 2950 008e FB68     		ldr	r3, [r7, #12]
 2951 0090 0433     		adds	r3, r3, #4
 2952 0092 1946     		mov	r1, r3
 2953 0094 1046     		mov	r0, r2
 2954 0096 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2955              		.loc 1 2227 15 is_stmt 1
 2956 009a FB68     		ldr	r3, [r7, #12]
 2957 009c DA6A     		ldr	r2, [r3, #44]
 2958              		.loc 1 2227 43
 2959 009e 234B     		ldr	r3, .L187+20
 2960 00a0 1B68     		ldr	r3, [r3]
 2961 00a2 DB6A     		ldr	r3, [r3, #44]
 2962              		.loc 1 2227 8
 2963 00a4 9A42     		cmp	r2, r3
 2964 00a6 02D3     		bcc	.L178
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2965              		.loc 1 2229 21
 2966 00a8 214B     		ldr	r3, .L187+24
 2967 00aa 0122     		movs	r2, #1
 2968 00ac 1A60     		str	r2, [r3]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 96


 2969              	.L178:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2970              		.loc 1 2218 12
 2971 00ae 1C4B     		ldr	r3, .L187+8
 2972 00b0 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2973              		.loc 1 2218 52
 2974 00b2 002B     		cmp	r3, #0
 2975 00b4 CBD1     		bne	.L181
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2976              		.loc 1 2237 7
 2977 00b6 FB68     		ldr	r3, [r7, #12]
 2978 00b8 002B     		cmp	r3, #0
 2979 00ba 01D0     		beq	.L182
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2980              		.loc 1 2245 6
 2981 00bc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2982              	.L182:
 2983              	.LBB169:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2984              		.loc 1 2253 17
 2985 00c0 1C4B     		ldr	r3, .L187+28
 2986 00c2 1B68     		ldr	r3, [r3]
 2987 00c4 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2988              		.loc 1 2255 8
 2989 00c6 7B68     		ldr	r3, [r7, #4]
 2990 00c8 002B     		cmp	r3, #0
 2991 00ca 10D0     		beq	.L183
 2992              	.L185:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2993              		.loc 1 2259 12
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 97


 2994 00cc FFF7FEFF 		bl	xTaskIncrementTick
 2995 00d0 0346     		mov	r3, r0
 2996              		.loc 1 2259 10 discriminator 1
 2997 00d2 002B     		cmp	r3, #0
 2998 00d4 02D0     		beq	.L184
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2999              		.loc 1 2261 23
 3000 00d6 164B     		ldr	r3, .L187+24
 3001 00d8 0122     		movs	r2, #1
 3002 00da 1A60     		str	r2, [r3]
 3003              	.L184:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3004              		.loc 1 2267 8
 3005 00dc 7B68     		ldr	r3, [r7, #4]
 3006 00de 013B     		subs	r3, r3, #1
 3007 00e0 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3008              		.loc 1 2268 30
 3009 00e2 7B68     		ldr	r3, [r7, #4]
 3010 00e4 002B     		cmp	r3, #0
 3011 00e6 F1D1     		bne	.L185
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3012              		.loc 1 2270 20
 3013 00e8 124B     		ldr	r3, .L187+28
 3014 00ea 0022     		movs	r2, #0
 3015 00ec 1A60     		str	r2, [r3]
 3016              	.L183:
 3017              	.LBE169:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3018              		.loc 1 2278 23
 3019 00ee 104B     		ldr	r3, .L187+24
 3020 00f0 1B68     		ldr	r3, [r3]
 3021              		.loc 1 2278 7
 3022 00f2 002B     		cmp	r3, #0
 3023 00f4 09D0     		beq	.L177
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3024              		.loc 1 2282 23
 3025 00f6 0123     		movs	r3, #1
 3026 00f8 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 98


2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3027              		.loc 1 2285 6
 3028 00fa 0F4B     		ldr	r3, .L187+32
 3029 00fc 4FF08052 		mov	r2, #268435456
 3030 0100 1A60     		str	r2, [r3]
 3031              		.syntax unified
 3032              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3033 0102 BFF34F8F 		dsb
 3034              	@ 0 "" 2
 3035              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3036 0106 BFF36F8F 		isb
 3037              	@ 0 "" 2
 3038              		.thumb
 3039              		.syntax unified
 3040              	.L177:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3041              		.loc 1 2298 2
 3042 010a FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3043              		.loc 1 2300 9
 3044 010e BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3045              		.loc 1 2301 1
 3046 0110 1846     		mov	r0, r3
 3047 0112 1037     		adds	r7, r7, #16
 3048              	.LCFI93:
 3049              		.cfi_def_cfa_offset 8
 3050 0114 BD46     		mov	sp, r7
 3051              	.LCFI94:
 3052              		.cfi_def_cfa_register 13
 3053              		@ sp needed
 3054 0116 80BD     		pop	{r7, pc}
 3055              	.L188:
 3056              		.align	2
 3057              	.L187:
 3058 0118 00000000 		.word	uxSchedulerSuspended
 3059 011c 00000000 		.word	uxCurrentNumberOfTasks
 3060 0120 00000000 		.word	xPendingReadyList
 3061 0124 00000000 		.word	uxTopReadyPriority
 3062 0128 00000000 		.word	pxReadyTasksLists
 3063 012c 00000000 		.word	pxCurrentTCB
 3064 0130 00000000 		.word	xYieldPending
 3065 0134 00000000 		.word	xPendedTicks
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 99


 3066 0138 04ED00E0 		.word	-536810236
 3067              		.cfi_endproc
 3068              	.LFE22:
 3070              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3071              		.align	1
 3072              		.global	xTaskGetTickCount
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3077              	xTaskGetTickCount:
 3078              	.LFB23:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3079              		.loc 1 2305 1
 3080              		.cfi_startproc
 3081              		@ args = 0, pretend = 0, frame = 8
 3082              		@ frame_needed = 1, uses_anonymous_args = 0
 3083              		@ link register save eliminated.
 3084 0000 80B4     		push	{r7}
 3085              	.LCFI95:
 3086              		.cfi_def_cfa_offset 4
 3087              		.cfi_offset 7, -4
 3088 0002 83B0     		sub	sp, sp, #12
 3089              	.LCFI96:
 3090              		.cfi_def_cfa_offset 16
 3091 0004 00AF     		add	r7, sp, #0
 3092              	.LCFI97:
 3093              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3094              		.loc 1 2311 10
 3095 0006 054B     		ldr	r3, .L191
 3096 0008 1B68     		ldr	r3, [r3]
 3097 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3098              		.loc 1 2315 9
 3099 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3100              		.loc 1 2316 1
 3101 000e 1846     		mov	r0, r3
 3102 0010 0C37     		adds	r7, r7, #12
 3103              	.LCFI98:
 3104              		.cfi_def_cfa_offset 4
 3105 0012 BD46     		mov	sp, r7
 3106              	.LCFI99:
 3107              		.cfi_def_cfa_register 13
 3108              		@ sp needed
 3109 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 100


 3110              	.LCFI100:
 3111              		.cfi_restore 7
 3112              		.cfi_def_cfa_offset 0
 3113 0018 7047     		bx	lr
 3114              	.L192:
 3115 001a 00BF     		.align	2
 3116              	.L191:
 3117 001c 00000000 		.word	xTickCount
 3118              		.cfi_endproc
 3119              	.LFE23:
 3121              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3122              		.align	1
 3123              		.global	xTaskGetTickCountFromISR
 3124              		.syntax unified
 3125              		.thumb
 3126              		.thumb_func
 3128              	xTaskGetTickCountFromISR:
 3129              	.LFB24:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3130              		.loc 1 2320 1
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 8
 3133              		@ frame_needed = 1, uses_anonymous_args = 0
 3134 0000 80B5     		push	{r7, lr}
 3135              	.LCFI101:
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 7, -8
 3138              		.cfi_offset 14, -4
 3139 0002 82B0     		sub	sp, sp, #8
 3140              	.LCFI102:
 3141              		.cfi_def_cfa_offset 16
 3142 0004 00AF     		add	r7, sp, #0
 3143              	.LCFI103:
 3144              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3145              		.loc 1 2338 2
 3146 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 101


2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3147              		.loc 1 2340 25
 3148 000a 0023     		movs	r3, #0
 3149 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3150              		.loc 1 2342 11
 3151 000e 044B     		ldr	r3, .L195
 3152 0010 1B68     		ldr	r3, [r3]
 3153 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3154              		.loc 1 2346 9
 3155 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3156              		.loc 1 2347 1
 3157 0016 1846     		mov	r0, r3
 3158 0018 0837     		adds	r7, r7, #8
 3159              	.LCFI104:
 3160              		.cfi_def_cfa_offset 8
 3161 001a BD46     		mov	sp, r7
 3162              	.LCFI105:
 3163              		.cfi_def_cfa_register 13
 3164              		@ sp needed
 3165 001c 80BD     		pop	{r7, pc}
 3166              	.L196:
 3167 001e 00BF     		.align	2
 3168              	.L195:
 3169 0020 00000000 		.word	xTickCount
 3170              		.cfi_endproc
 3171              	.LFE24:
 3173              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3174              		.align	1
 3175              		.global	uxTaskGetNumberOfTasks
 3176              		.syntax unified
 3177              		.thumb
 3178              		.thumb_func
 3180              	uxTaskGetNumberOfTasks:
 3181              	.LFB25:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3182              		.loc 1 2351 1
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 1, uses_anonymous_args = 0
 3186              		@ link register save eliminated.
 3187 0000 80B4     		push	{r7}
 3188              	.LCFI106:
 3189              		.cfi_def_cfa_offset 4
 3190              		.cfi_offset 7, -4
 3191 0002 00AF     		add	r7, sp, #0
 3192              	.LCFI107:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 102


 3193              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3194              		.loc 1 2354 9
 3195 0004 034B     		ldr	r3, .L199
 3196 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3197              		.loc 1 2355 1
 3198 0008 1846     		mov	r0, r3
 3199 000a BD46     		mov	sp, r7
 3200              	.LCFI108:
 3201              		.cfi_def_cfa_register 13
 3202              		@ sp needed
 3203 000c 5DF8047B 		ldr	r7, [sp], #4
 3204              	.LCFI109:
 3205              		.cfi_restore 7
 3206              		.cfi_def_cfa_offset 0
 3207 0010 7047     		bx	lr
 3208              	.L200:
 3209 0012 00BF     		.align	2
 3210              	.L199:
 3211 0014 00000000 		.word	uxCurrentNumberOfTasks
 3212              		.cfi_endproc
 3213              	.LFE25:
 3215              		.section	.text.pcTaskGetName,"ax",%progbits
 3216              		.align	1
 3217              		.global	pcTaskGetName
 3218              		.syntax unified
 3219              		.thumb
 3220              		.thumb_func
 3222              	pcTaskGetName:
 3223              	.LFB26:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3224              		.loc 1 2359 1
 3225              		.cfi_startproc
 3226              		@ args = 0, pretend = 0, frame = 16
 3227              		@ frame_needed = 1, uses_anonymous_args = 0
 3228              		@ link register save eliminated.
 3229 0000 80B4     		push	{r7}
 3230              	.LCFI110:
 3231              		.cfi_def_cfa_offset 4
 3232              		.cfi_offset 7, -4
 3233 0002 85B0     		sub	sp, sp, #20
 3234              	.LCFI111:
 3235              		.cfi_def_cfa_offset 24
 3236 0004 00AF     		add	r7, sp, #0
 3237              	.LCFI112:
 3238              		.cfi_def_cfa_register 7
 3239 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 103


2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3240              		.loc 1 2364 10
 3241 0008 7B68     		ldr	r3, [r7, #4]
 3242 000a 002B     		cmp	r3, #0
 3243 000c 02D1     		bne	.L202
 3244              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3245 000e 0E4B     		ldr	r3, .L207
 3246 0010 1B68     		ldr	r3, [r3]
 3247 0012 00E0     		b	.L203
 3248              	.L202:
 3249              		.loc 1 2364 10 discriminator 2
 3250 0014 7B68     		ldr	r3, [r7, #4]
 3251              	.L203:
 3252              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3253 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3254              		.loc 1 2365 2
 3255 0018 FB68     		ldr	r3, [r7, #12]
 3256 001a 002B     		cmp	r3, #0
 3257 001c 0BD1     		bne	.L204
 3258              	.LBB170:
 3259              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3260              		.loc 2 195 2
 3261              		.syntax unified
 3262              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3263 001e 4FF05003 			mov r3, #80												
 3264 0022 83F31188 		msr basepri, r3											
 3265 0026 BFF36F8F 		isb														
 3266 002a BFF34F8F 		dsb														
 3267              	
 3268              	@ 0 "" 2
 3269              		.thumb
 3270              		.syntax unified
 3271 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3272              		.loc 2 203 1
 3273 0030 00BF     		nop
 3274              	.L205:
 3275              	.LBE171:
 3276              	.LBE170:
 3277              		.loc 1 2365 2
 3278 0032 00BF     		nop
 3279 0034 FDE7     		b	.L205
 3280              	.L204:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3281              		.loc 1 2366 9
 3282 0036 FB68     		ldr	r3, [r7, #12]
 3283 0038 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3284              		.loc 1 2367 1
 3285 003a 1846     		mov	r0, r3
 3286 003c 1437     		adds	r7, r7, #20
 3287              	.LCFI113:
 3288              		.cfi_def_cfa_offset 4
 3289 003e BD46     		mov	sp, r7
 3290              	.LCFI114:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 104


 3291              		.cfi_def_cfa_register 13
 3292              		@ sp needed
 3293 0040 5DF8047B 		ldr	r7, [sp], #4
 3294              	.LCFI115:
 3295              		.cfi_restore 7
 3296              		.cfi_def_cfa_offset 0
 3297 0044 7047     		bx	lr
 3298              	.L208:
 3299 0046 00BF     		.align	2
 3300              	.L207:
 3301 0048 00000000 		.word	pxCurrentTCB
 3302              		.cfi_endproc
 3303              	.LFE26:
 3305              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3306              		.align	1
 3307              		.global	uxTaskGetSystemState
 3308              		.syntax unified
 3309              		.thumb
 3310              		.thumb_func
 3312              	uxTaskGetSystemState:
 3313              	.LFB27:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 105


2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 106


2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3314              		.loc 1 2506 2
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 24
 3317              		@ frame_needed = 1, uses_anonymous_args = 0
 3318 0000 80B5     		push	{r7, lr}
 3319              	.LCFI116:
 3320              		.cfi_def_cfa_offset 8
 3321              		.cfi_offset 7, -8
 3322              		.cfi_offset 14, -4
 3323 0002 86B0     		sub	sp, sp, #24
 3324              	.LCFI117:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 107


 3325              		.cfi_def_cfa_offset 32
 3326 0004 00AF     		add	r7, sp, #0
 3327              	.LCFI118:
 3328              		.cfi_def_cfa_register 7
 3329 0006 F860     		str	r0, [r7, #12]
 3330 0008 B960     		str	r1, [r7, #8]
 3331 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3332              		.loc 1 2507 14
 3333 000c 0023     		movs	r3, #0
 3334 000e 7B61     		str	r3, [r7, #20]
 3335              		.loc 1 2507 26
 3336 0010 3823     		movs	r3, #56
 3337 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3338              		.loc 1 2509 3
 3339 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3340              		.loc 1 2512 20
 3341 0018 3A4B     		ldr	r3, .L213
 3342 001a 1B68     		ldr	r3, [r3]
 3343              		.loc 1 2512 6
 3344 001c BA68     		ldr	r2, [r7, #8]
 3345 001e 9A42     		cmp	r2, r3
 3346 0020 68D3     		bcc	.L210
 3347              	.L211:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3348              		.loc 1 2518 13
 3349 0022 3B69     		ldr	r3, [r7, #16]
 3350 0024 013B     		subs	r3, r3, #1
 3351 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3352              		.loc 1 2519 66
 3353 0028 7A69     		ldr	r2, [r7, #20]
 3354 002a 1346     		mov	r3, r2
 3355 002c DB00     		lsls	r3, r3, #3
 3356 002e 1344     		add	r3, r3, r2
 3357 0030 9B00     		lsls	r3, r3, #2
 3358 0032 1A46     		mov	r2, r3
 3359              		.loc 1 2519 46
 3360 0034 FB68     		ldr	r3, [r7, #12]
 3361 0036 9818     		adds	r0, r3, r2
 3362              		.loc 1 2519 16
 3363 0038 3A69     		ldr	r2, [r7, #16]
 3364 003a 1346     		mov	r3, r2
 3365 003c 9B00     		lsls	r3, r3, #2
 3366 003e 1344     		add	r3, r3, r2
 3367 0040 9B00     		lsls	r3, r3, #2
 3368 0042 314A     		ldr	r2, .L213+4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 108


 3369 0044 1344     		add	r3, r3, r2
 3370 0046 0122     		movs	r2, #1
 3371 0048 1946     		mov	r1, r3
 3372 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3373 004e 0246     		mov	r2, r0
 3374              		.loc 1 2519 13 discriminator 1
 3375 0050 7B69     		ldr	r3, [r7, #20]
 3376 0052 1344     		add	r3, r3, r2
 3377 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3378              		.loc 1 2521 22 discriminator 1
 3379 0056 3B69     		ldr	r3, [r7, #16]
 3380 0058 002B     		cmp	r3, #0
 3381 005a E2D1     		bne	.L211
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3382              		.loc 1 2525 65
 3383 005c 7A69     		ldr	r2, [r7, #20]
 3384 005e 1346     		mov	r3, r2
 3385 0060 DB00     		lsls	r3, r3, #3
 3386 0062 1344     		add	r3, r3, r2
 3387 0064 9B00     		lsls	r3, r3, #2
 3388 0066 1A46     		mov	r2, r3
 3389              		.loc 1 2525 45
 3390 0068 FB68     		ldr	r3, [r7, #12]
 3391 006a 1344     		add	r3, r3, r2
 3392              		.loc 1 2525 15
 3393 006c 274A     		ldr	r2, .L213+8
 3394 006e 1168     		ldr	r1, [r2]
 3395 0070 0222     		movs	r2, #2
 3396 0072 1846     		mov	r0, r3
 3397 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3398 0078 0246     		mov	r2, r0
 3399              		.loc 1 2525 12 discriminator 1
 3400 007a 7B69     		ldr	r3, [r7, #20]
 3401 007c 1344     		add	r3, r3, r2
 3402 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3403              		.loc 1 2526 65
 3404 0080 7A69     		ldr	r2, [r7, #20]
 3405 0082 1346     		mov	r3, r2
 3406 0084 DB00     		lsls	r3, r3, #3
 3407 0086 1344     		add	r3, r3, r2
 3408 0088 9B00     		lsls	r3, r3, #2
 3409 008a 1A46     		mov	r2, r3
 3410              		.loc 1 2526 45
 3411 008c FB68     		ldr	r3, [r7, #12]
 3412 008e 1344     		add	r3, r3, r2
 3413              		.loc 1 2526 15
 3414 0090 1F4A     		ldr	r2, .L213+12
 3415 0092 1168     		ldr	r1, [r2]
 3416 0094 0222     		movs	r2, #2
 3417 0096 1846     		mov	r0, r3
 3418 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 109


 3419 009c 0246     		mov	r2, r0
 3420              		.loc 1 2526 12 discriminator 1
 3421 009e 7B69     		ldr	r3, [r7, #20]
 3422 00a0 1344     		add	r3, r3, r2
 3423 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3424              		.loc 1 2532 66
 3425 00a4 7A69     		ldr	r2, [r7, #20]
 3426 00a6 1346     		mov	r3, r2
 3427 00a8 DB00     		lsls	r3, r3, #3
 3428 00aa 1344     		add	r3, r3, r2
 3429 00ac 9B00     		lsls	r3, r3, #2
 3430 00ae 1A46     		mov	r2, r3
 3431              		.loc 1 2532 46
 3432 00b0 FB68     		ldr	r3, [r7, #12]
 3433 00b2 1344     		add	r3, r3, r2
 3434              		.loc 1 2532 16
 3435 00b4 0422     		movs	r2, #4
 3436 00b6 1749     		ldr	r1, .L213+16
 3437 00b8 1846     		mov	r0, r3
 3438 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3439 00be 0246     		mov	r2, r0
 3440              		.loc 1 2532 13 discriminator 1
 3441 00c0 7B69     		ldr	r3, [r7, #20]
 3442 00c2 1344     		add	r3, r3, r2
 3443 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3444              		.loc 1 2540 66
 3445 00c6 7A69     		ldr	r2, [r7, #20]
 3446 00c8 1346     		mov	r3, r2
 3447 00ca DB00     		lsls	r3, r3, #3
 3448 00cc 1344     		add	r3, r3, r2
 3449 00ce 9B00     		lsls	r3, r3, #2
 3450 00d0 1A46     		mov	r2, r3
 3451              		.loc 1 2540 46
 3452 00d2 FB68     		ldr	r3, [r7, #12]
 3453 00d4 1344     		add	r3, r3, r2
 3454              		.loc 1 2540 16
 3455 00d6 0322     		movs	r2, #3
 3456 00d8 0F49     		ldr	r1, .L213+20
 3457 00da 1846     		mov	r0, r3
 3458 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3459 00e0 0246     		mov	r2, r0
 3460              		.loc 1 2540 13 discriminator 1
 3461 00e2 7B69     		ldr	r3, [r7, #20]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 110


 3462 00e4 1344     		add	r3, r3, r2
 3463 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3464              		.loc 1 2557 8
 3465 00e8 7B68     		ldr	r3, [r7, #4]
 3466 00ea 002B     		cmp	r3, #0
 3467 00ec 02D0     		beq	.L210
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3468              		.loc 1 2559 24
 3469 00ee 7B68     		ldr	r3, [r7, #4]
 3470 00f0 0022     		movs	r2, #0
 3471 00f2 1A60     		str	r2, [r3]
 3472              	.L210:
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3473              		.loc 1 2569 12
 3474 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3475              		.loc 1 2571 10
 3476 00f8 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3477              		.loc 1 2572 2
 3478 00fa 1846     		mov	r0, r3
 3479 00fc 1837     		adds	r7, r7, #24
 3480              	.LCFI119:
 3481              		.cfi_def_cfa_offset 8
 3482 00fe BD46     		mov	sp, r7
 3483              	.LCFI120:
 3484              		.cfi_def_cfa_register 13
 3485              		@ sp needed
 3486 0100 80BD     		pop	{r7, pc}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 111


 3487              	.L214:
 3488 0102 00BF     		.align	2
 3489              	.L213:
 3490 0104 00000000 		.word	uxCurrentNumberOfTasks
 3491 0108 00000000 		.word	pxReadyTasksLists
 3492 010c 00000000 		.word	pxDelayedTaskList
 3493 0110 00000000 		.word	pxOverflowDelayedTaskList
 3494 0114 00000000 		.word	xTasksWaitingTermination
 3495 0118 00000000 		.word	xSuspendedTaskList
 3496              		.cfi_endproc
 3497              	.LFE27:
 3499              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3500              		.align	1
 3501              		.global	xTaskCatchUpTicks
 3502              		.syntax unified
 3503              		.thumb
 3504              		.thumb_func
 3506              	xTaskCatchUpTicks:
 3507              	.LFB28:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 112


 3508              		.loc 1 2610 1
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 16
 3511              		@ frame_needed = 1, uses_anonymous_args = 0
 3512 0000 80B5     		push	{r7, lr}
 3513              	.LCFI121:
 3514              		.cfi_def_cfa_offset 8
 3515              		.cfi_offset 7, -8
 3516              		.cfi_offset 14, -4
 3517 0002 84B0     		sub	sp, sp, #16
 3518              	.LCFI122:
 3519              		.cfi_def_cfa_offset 24
 3520 0004 00AF     		add	r7, sp, #0
 3521              	.LCFI123:
 3522              		.cfi_def_cfa_register 7
 3523 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3524              		.loc 1 2611 12
 3525 0008 0023     		movs	r3, #0
 3526 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3527              		.loc 1 2615 2
 3528 000c 0F4B     		ldr	r3, .L219
 3529 000e 1B68     		ldr	r3, [r3]
 3530 0010 002B     		cmp	r3, #0
 3531 0012 0BD0     		beq	.L216
 3532              	.LBB172:
 3533              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3534              		.loc 2 195 2
 3535              		.syntax unified
 3536              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3537 0014 4FF05003 			mov r3, #80												
 3538 0018 83F31188 		msr basepri, r3											
 3539 001c BFF36F8F 		isb														
 3540 0020 BFF34F8F 		dsb														
 3541              	
 3542              	@ 0 "" 2
 3543              		.thumb
 3544              		.syntax unified
 3545 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3546              		.loc 2 203 1
 3547 0026 00BF     		nop
 3548              	.L217:
 3549              	.LBE173:
 3550              	.LBE172:
 3551              		.loc 1 2615 2
 3552 0028 00BF     		nop
 3553 002a FDE7     		b	.L217
 3554              	.L216:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 113


2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3555              		.loc 1 2619 2
 3556 002c FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3557              		.loc 1 2620 15
 3558 0030 074B     		ldr	r3, .L219+4
 3559 0032 1A68     		ldr	r2, [r3]
 3560 0034 7B68     		ldr	r3, [r7, #4]
 3561 0036 1344     		add	r3, r3, r2
 3562 0038 054A     		ldr	r2, .L219+4
 3563 003a 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3564              		.loc 1 2621 19
 3565 003c FFF7FEFF 		bl	xTaskResumeAll
 3566 0040 F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3567              		.loc 1 2623 9
 3568 0042 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3569              		.loc 1 2624 1
 3570 0044 1846     		mov	r0, r3
 3571 0046 1037     		adds	r7, r7, #16
 3572              	.LCFI124:
 3573              		.cfi_def_cfa_offset 8
 3574 0048 BD46     		mov	sp, r7
 3575              	.LCFI125:
 3576              		.cfi_def_cfa_register 13
 3577              		@ sp needed
 3578 004a 80BD     		pop	{r7, pc}
 3579              	.L220:
 3580              		.align	2
 3581              	.L219:
 3582 004c 00000000 		.word	uxSchedulerSuspended
 3583 0050 00000000 		.word	xPendedTicks
 3584              		.cfi_endproc
 3585              	.LFE28:
 3587              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3588              		.align	1
 3589              		.global	xTaskIncrementTick
 3590              		.syntax unified
 3591              		.thumb
 3592              		.thumb_func
 3594              	xTaskIncrementTick:
 3595              	.LFB29:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 114


2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 115


2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3596              		.loc 1 2708 1
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 24
 3599              		@ frame_needed = 1, uses_anonymous_args = 0
 3600 0000 80B5     		push	{r7, lr}
 3601              	.LCFI126:
 3602              		.cfi_def_cfa_offset 8
 3603              		.cfi_offset 7, -8
 3604              		.cfi_offset 14, -4
 3605 0002 86B0     		sub	sp, sp, #24
 3606              	.LCFI127:
 3607              		.cfi_def_cfa_offset 32
 3608 0004 00AF     		add	r7, sp, #0
 3609              	.LCFI128:
 3610              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3611              		.loc 1 2711 12
 3612 0006 0023     		movs	r3, #0
 3613 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3614              		.loc 1 2717 27
 3615 000a 4F4B     		ldr	r3, .L236
 3616 000c 1B68     		ldr	r3, [r3]
 3617              		.loc 1 2717 4
 3618 000e 002B     		cmp	r3, #0
 3619 0010 40F09080 		bne	.L222
 3620              	.LBB174:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3621              		.loc 1 2721 49
 3622 0014 4D4B     		ldr	r3, .L236+4
 3623 0016 1B68     		ldr	r3, [r3]
 3624              		.loc 1 2721 20
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 116


 3625 0018 0133     		adds	r3, r3, #1
 3626 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3627              		.loc 1 2725 14
 3628 001c 4B4A     		ldr	r2, .L236+4
 3629 001e 3B69     		ldr	r3, [r7, #16]
 3630 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3631              		.loc 1 2727 5
 3632 0022 3B69     		ldr	r3, [r7, #16]
 3633 0024 002B     		cmp	r3, #0
 3634 0026 21D1     		bne	.L223
 3635              	.LBB175:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3636              		.loc 1 2729 4
 3637 0028 494B     		ldr	r3, .L236+8
 3638 002a 1B68     		ldr	r3, [r3]
 3639 002c 1B68     		ldr	r3, [r3]
 3640 002e 002B     		cmp	r3, #0
 3641 0030 0BD0     		beq	.L224
 3642              	.LBB176:
 3643              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3644              		.loc 2 195 2
 3645              		.syntax unified
 3646              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3647 0032 4FF05003 			mov r3, #80												
 3648 0036 83F31188 		msr basepri, r3											
 3649 003a BFF36F8F 		isb														
 3650 003e BFF34F8F 		dsb														
 3651              	
 3652              	@ 0 "" 2
 3653              		.thumb
 3654              		.syntax unified
 3655 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3656              		.loc 2 203 1
 3657 0044 00BF     		nop
 3658              	.L225:
 3659              	.LBE177:
 3660              	.LBE176:
 3661              		.loc 1 2729 4
 3662 0046 00BF     		nop
 3663 0048 FDE7     		b	.L225
 3664              	.L224:
 3665              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3666 004a 414B     		ldr	r3, .L236+8
 3667 004c 1B68     		ldr	r3, [r3]
 3668 004e FB60     		str	r3, [r7, #12]
 3669 0050 404B     		ldr	r3, .L236+12
 3670 0052 1B68     		ldr	r3, [r3]
 3671 0054 3E4A     		ldr	r2, .L236+8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 117


 3672 0056 1360     		str	r3, [r2]
 3673 0058 3E4A     		ldr	r2, .L236+12
 3674 005a FB68     		ldr	r3, [r7, #12]
 3675 005c 1360     		str	r3, [r2]
 3676 005e 3E4B     		ldr	r3, .L236+16
 3677 0060 1B68     		ldr	r3, [r3]
 3678 0062 0133     		adds	r3, r3, #1
 3679 0064 3C4A     		ldr	r2, .L236+16
 3680 0066 1360     		str	r3, [r2]
 3681 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3682              	.L223:
 3683              	.LBE175:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3684              		.loc 1 2740 23 is_stmt 1
 3685 006c 3B4B     		ldr	r3, .L236+20
 3686 006e 1B68     		ldr	r3, [r3]
 3687              		.loc 1 2740 5
 3688 0070 3A69     		ldr	r2, [r7, #16]
 3689 0072 9A42     		cmp	r2, r3
 3690 0074 49D3     		bcc	.L226
 3691              	.L232:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3692              		.loc 1 2744 9
 3693 0076 364B     		ldr	r3, .L236+8
 3694 0078 1B68     		ldr	r3, [r3]
 3695 007a 1B68     		ldr	r3, [r3]
 3696              		.loc 1 2744 7
 3697 007c 002B     		cmp	r3, #0
 3698 007e 04D1     		bne	.L227
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3699              		.loc 1 2751 27
 3700 0080 364B     		ldr	r3, .L236+20
 3701 0082 4FF0FF32 		mov	r2, #-1
 3702 0086 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3703              		.loc 1 2752 6
 3704 0088 3FE0     		b	.L226
 3705              	.L227:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 118


2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3706              		.loc 1 2760 14
 3707 008a 314B     		ldr	r3, .L236+8
 3708 008c 1B68     		ldr	r3, [r3]
 3709 008e DB68     		ldr	r3, [r3, #12]
 3710              		.loc 1 2760 12
 3711 0090 DB68     		ldr	r3, [r3, #12]
 3712 0092 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3713              		.loc 1 2761 17
 3714 0094 BB68     		ldr	r3, [r7, #8]
 3715 0096 5B68     		ldr	r3, [r3, #4]
 3716 0098 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3717              		.loc 1 2763 8
 3718 009a 3A69     		ldr	r2, [r7, #16]
 3719 009c 7B68     		ldr	r3, [r7, #4]
 3720 009e 9A42     		cmp	r2, r3
 3721 00a0 03D2     		bcs	.L228
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3722              		.loc 1 2770 28
 3723 00a2 2E4A     		ldr	r2, .L236+20
 3724 00a4 7B68     		ldr	r3, [r7, #4]
 3725 00a6 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3726              		.loc 1 2771 7
 3727 00a8 2FE0     		b	.L226
 3728              	.L228:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3729              		.loc 1 2779 15
 3730 00aa BB68     		ldr	r3, [r7, #8]
 3731 00ac 0433     		adds	r3, r3, #4
 3732 00ae 1846     		mov	r0, r3
 3733 00b0 FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 119


2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3734              		.loc 1 2783 10
 3735 00b4 BB68     		ldr	r3, [r7, #8]
 3736 00b6 9B6A     		ldr	r3, [r3, #40]
 3737              		.loc 1 2783 8
 3738 00b8 002B     		cmp	r3, #0
 3739 00ba 04D0     		beq	.L229
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3740              		.loc 1 2785 16
 3741 00bc BB68     		ldr	r3, [r7, #8]
 3742 00be 1833     		adds	r3, r3, #24
 3743 00c0 1846     		mov	r0, r3
 3744 00c2 FFF7FEFF 		bl	uxListRemove
 3745              	.L229:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3746              		.loc 1 2794 6
 3747 00c6 BB68     		ldr	r3, [r7, #8]
 3748 00c8 DA6A     		ldr	r2, [r3, #44]
 3749 00ca 254B     		ldr	r3, .L236+24
 3750 00cc 1B68     		ldr	r3, [r3]
 3751 00ce 9A42     		cmp	r2, r3
 3752 00d0 03D9     		bls	.L230
 3753              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3754 00d2 BB68     		ldr	r3, [r7, #8]
 3755 00d4 DB6A     		ldr	r3, [r3, #44]
 3756 00d6 224A     		ldr	r2, .L236+24
 3757 00d8 1360     		str	r3, [r2]
 3758              	.L230:
 3759              		.loc 1 2794 6 discriminator 3
 3760 00da BB68     		ldr	r3, [r7, #8]
 3761 00dc DA6A     		ldr	r2, [r3, #44]
 3762 00de 1346     		mov	r3, r2
 3763 00e0 9B00     		lsls	r3, r3, #2
 3764 00e2 1344     		add	r3, r3, r2
 3765 00e4 9B00     		lsls	r3, r3, #2
 3766 00e6 1F4A     		ldr	r2, .L236+28
 3767 00e8 1A44     		add	r2, r2, r3
 3768 00ea BB68     		ldr	r3, [r7, #8]
 3769 00ec 0433     		adds	r3, r3, #4
 3770 00ee 1946     		mov	r1, r3
 3771 00f0 1046     		mov	r0, r2
 3772 00f2 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 120


2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3773              		.loc 1 2804 16 is_stmt 1
 3774 00f6 BB68     		ldr	r3, [r7, #8]
 3775 00f8 DA6A     		ldr	r2, [r3, #44]
 3776              		.loc 1 2804 44
 3777 00fa 1B4B     		ldr	r3, .L236+32
 3778 00fc 1B68     		ldr	r3, [r3]
 3779 00fe DB6A     		ldr	r3, [r3, #44]
 3780              		.loc 1 2804 9
 3781 0100 9A42     		cmp	r2, r3
 3782 0102 B8D3     		bcc	.L232
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3783              		.loc 1 2806 24
 3784 0104 0123     		movs	r3, #1
 3785 0106 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3786              		.loc 1 2744 7
 3787 0108 B5E7     		b	.L232
 3788              	.L226:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3789              		.loc 1 2823 8
 3790 010a 174B     		ldr	r3, .L236+32
 3791 010c 1B68     		ldr	r3, [r3]
 3792 010e DA6A     		ldr	r2, [r3, #44]
 3793 0110 1449     		ldr	r1, .L236+28
 3794 0112 1346     		mov	r3, r2
 3795 0114 9B00     		lsls	r3, r3, #2
 3796 0116 1344     		add	r3, r3, r2
 3797 0118 9B00     		lsls	r3, r3, #2
 3798 011a 0B44     		add	r3, r3, r1
 3799 011c 1B68     		ldr	r3, [r3]
 3800              		.loc 1 2823 6
 3801 011e 012B     		cmp	r3, #1
 3802 0120 01D9     		bls	.L233
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 121


 3803              		.loc 1 2825 21
 3804 0122 0123     		movs	r3, #1
 3805 0124 7B61     		str	r3, [r7, #20]
 3806              	.L233:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3807              		.loc 1 2851 22
 3808 0126 114B     		ldr	r3, .L236+36
 3809 0128 1B68     		ldr	r3, [r3]
 3810              		.loc 1 2851 6
 3811 012a 002B     		cmp	r3, #0
 3812 012c 07D0     		beq	.L234
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3813              		.loc 1 2853 21
 3814 012e 0123     		movs	r3, #1
 3815 0130 7B61     		str	r3, [r7, #20]
 3816 0132 04E0     		b	.L234
 3817              	.L222:
 3818              	.LBE174:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3819              		.loc 1 2864 3
 3820 0134 0E4B     		ldr	r3, .L236+40
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 122


 3821 0136 1B68     		ldr	r3, [r3]
 3822 0138 0133     		adds	r3, r3, #1
 3823 013a 0D4A     		ldr	r2, .L236+40
 3824 013c 1360     		str	r3, [r2]
 3825              	.L234:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3826              		.loc 1 2875 9
 3827 013e 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3828              		.loc 1 2876 1
 3829 0140 1846     		mov	r0, r3
 3830 0142 1837     		adds	r7, r7, #24
 3831              	.LCFI129:
 3832              		.cfi_def_cfa_offset 8
 3833 0144 BD46     		mov	sp, r7
 3834              	.LCFI130:
 3835              		.cfi_def_cfa_register 13
 3836              		@ sp needed
 3837 0146 80BD     		pop	{r7, pc}
 3838              	.L237:
 3839              		.align	2
 3840              	.L236:
 3841 0148 00000000 		.word	uxSchedulerSuspended
 3842 014c 00000000 		.word	xTickCount
 3843 0150 00000000 		.word	pxDelayedTaskList
 3844 0154 00000000 		.word	pxOverflowDelayedTaskList
 3845 0158 00000000 		.word	xNumOfOverflows
 3846 015c 00000000 		.word	xNextTaskUnblockTime
 3847 0160 00000000 		.word	uxTopReadyPriority
 3848 0164 00000000 		.word	pxReadyTasksLists
 3849 0168 00000000 		.word	pxCurrentTCB
 3850 016c 00000000 		.word	xYieldPending
 3851 0170 00000000 		.word	xPendedTicks
 3852              		.cfi_endproc
 3853              	.LFE29:
 3855              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3856              		.align	1
 3857              		.global	vTaskSwitchContext
 3858              		.syntax unified
 3859              		.thumb
 3860              		.thumb_func
 3862              	vTaskSwitchContext:
 3863              	.LFB30:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 123


2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 124


2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3864              		.loc 1 2990 1
 3865              		.cfi_startproc
 3866              		@ args = 0, pretend = 0, frame = 16
 3867              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 125


 3868              		@ link register save eliminated.
 3869 0000 80B4     		push	{r7}
 3870              	.LCFI131:
 3871              		.cfi_def_cfa_offset 4
 3872              		.cfi_offset 7, -4
 3873 0002 85B0     		sub	sp, sp, #20
 3874              	.LCFI132:
 3875              		.cfi_def_cfa_offset 24
 3876 0004 00AF     		add	r7, sp, #0
 3877              	.LCFI133:
 3878              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3879              		.loc 1 2991 27
 3880 0006 284B     		ldr	r3, .L247
 3881 0008 1B68     		ldr	r3, [r3]
 3882              		.loc 1 2991 4
 3883 000a 002B     		cmp	r3, #0
 3884 000c 03D0     		beq	.L239
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3885              		.loc 1 2995 17
 3886 000e 274B     		ldr	r3, .L247+4
 3887 0010 0122     		movs	r2, #1
 3888 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 126


3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3889              		.loc 1 3061 1
 3890 0014 42E0     		b	.L246
 3891              	.L239:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3892              		.loc 1 2999 17
 3893 0016 254B     		ldr	r3, .L247+4
 3894 0018 0022     		movs	r2, #0
 3895 001a 1A60     		str	r2, [r3]
 3896              	.LBB178:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3897              		.loc 1 3041 3
 3898 001c 244B     		ldr	r3, .L247+8
 3899 001e 1B68     		ldr	r3, [r3]
 3900 0020 FB60     		str	r3, [r7, #12]
 3901 0022 11E0     		b	.L241
 3902              	.L244:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3903              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3904 0024 FB68     		ldr	r3, [r7, #12]
 3905 0026 002B     		cmp	r3, #0
 3906 0028 0BD1     		bne	.L242
 3907              	.LBB179:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 127


 3908              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3909              		.loc 2 195 2 is_stmt 1
 3910              		.syntax unified
 3911              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3912 002a 4FF05003 			mov r3, #80												
 3913 002e 83F31188 		msr basepri, r3											
 3914 0032 BFF36F8F 		isb														
 3915 0036 BFF34F8F 		dsb														
 3916              	
 3917              	@ 0 "" 2
 3918              		.thumb
 3919              		.syntax unified
 3920 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3921              		.loc 2 203 1
 3922 003c 00BF     		nop
 3923              	.L243:
 3924              	.LBE180:
 3925              	.LBE179:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3926              		.loc 1 3041 3
 3927 003e 00BF     		nop
 3928 0040 FDE7     		b	.L243
 3929              	.L242:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3930              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3931 0042 FB68     		ldr	r3, [r7, #12]
 3932 0044 013B     		subs	r3, r3, #1
 3933 0046 FB60     		str	r3, [r7, #12]
 3934              	.L241:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3935              		.loc 1 3041 3 discriminator 4
 3936 0048 1A49     		ldr	r1, .L247+12
 3937 004a FA68     		ldr	r2, [r7, #12]
 3938 004c 1346     		mov	r3, r2
 3939 004e 9B00     		lsls	r3, r3, #2
 3940 0050 1344     		add	r3, r3, r2
 3941 0052 9B00     		lsls	r3, r3, #2
 3942 0054 0B44     		add	r3, r3, r1
 3943 0056 1B68     		ldr	r3, [r3]
 3944 0058 002B     		cmp	r3, #0
 3945 005a E3D0     		beq	.L244
 3946              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3947              		.loc 1 3041 3 discriminator 6
 3948 005c FA68     		ldr	r2, [r7, #12]
 3949 005e 1346     		mov	r3, r2
 3950 0060 9B00     		lsls	r3, r3, #2
 3951 0062 1344     		add	r3, r3, r2
 3952 0064 9B00     		lsls	r3, r3, #2
 3953 0066 134A     		ldr	r2, .L247+12
 3954 0068 1344     		add	r3, r3, r2
 3955 006a BB60     		str	r3, [r7, #8]
 3956 006c BB68     		ldr	r3, [r7, #8]
 3957 006e 5B68     		ldr	r3, [r3, #4]
 3958 0070 5A68     		ldr	r2, [r3, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 128


 3959 0072 BB68     		ldr	r3, [r7, #8]
 3960 0074 5A60     		str	r2, [r3, #4]
 3961 0076 BB68     		ldr	r3, [r7, #8]
 3962 0078 5A68     		ldr	r2, [r3, #4]
 3963 007a BB68     		ldr	r3, [r7, #8]
 3964 007c 0833     		adds	r3, r3, #8
 3965 007e 9A42     		cmp	r2, r3
 3966 0080 04D1     		bne	.L245
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3967              		.loc 1 3041 3 discriminator 7
 3968 0082 BB68     		ldr	r3, [r7, #8]
 3969 0084 5B68     		ldr	r3, [r3, #4]
 3970 0086 5A68     		ldr	r2, [r3, #4]
 3971 0088 BB68     		ldr	r3, [r7, #8]
 3972 008a 5A60     		str	r2, [r3, #4]
 3973              	.L245:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3974              		.loc 1 3041 3 discriminator 9
 3975 008c BB68     		ldr	r3, [r7, #8]
 3976 008e 5B68     		ldr	r3, [r3, #4]
 3977 0090 DB68     		ldr	r3, [r3, #12]
 3978 0092 094A     		ldr	r2, .L247+16
 3979 0094 1360     		str	r3, [r2]
 3980              	.LBE181:
 3981 0096 064A     		ldr	r2, .L247+8
 3982 0098 FB68     		ldr	r3, [r7, #12]
 3983 009a 1360     		str	r3, [r2]
 3984              	.L246:
 3985              	.LBE178:
 3986              		.loc 1 3061 1 is_stmt 1
 3987 009c 00BF     		nop
 3988 009e 1437     		adds	r7, r7, #20
 3989              	.LCFI134:
 3990              		.cfi_def_cfa_offset 4
 3991 00a0 BD46     		mov	sp, r7
 3992              	.LCFI135:
 3993              		.cfi_def_cfa_register 13
 3994              		@ sp needed
 3995 00a2 5DF8047B 		ldr	r7, [sp], #4
 3996              	.LCFI136:
 3997              		.cfi_restore 7
 3998              		.cfi_def_cfa_offset 0
 3999 00a6 7047     		bx	lr
 4000              	.L248:
 4001              		.align	2
 4002              	.L247:
 4003 00a8 00000000 		.word	uxSchedulerSuspended
 4004 00ac 00000000 		.word	xYieldPending
 4005 00b0 00000000 		.word	uxTopReadyPriority
 4006 00b4 00000000 		.word	pxReadyTasksLists
 4007 00b8 00000000 		.word	pxCurrentTCB
 4008              		.cfi_endproc
 4009              	.LFE30:
 4011              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4012              		.align	1
 4013              		.global	vTaskPlaceOnEventList
 4014              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 129


 4015              		.thumb
 4016              		.thumb_func
 4018              	vTaskPlaceOnEventList:
 4019              	.LFB31:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4020              		.loc 1 3065 1
 4021              		.cfi_startproc
 4022              		@ args = 0, pretend = 0, frame = 16
 4023              		@ frame_needed = 1, uses_anonymous_args = 0
 4024 0000 80B5     		push	{r7, lr}
 4025              	.LCFI137:
 4026              		.cfi_def_cfa_offset 8
 4027              		.cfi_offset 7, -8
 4028              		.cfi_offset 14, -4
 4029 0002 84B0     		sub	sp, sp, #16
 4030              	.LCFI138:
 4031              		.cfi_def_cfa_offset 24
 4032 0004 00AF     		add	r7, sp, #0
 4033              	.LCFI139:
 4034              		.cfi_def_cfa_register 7
 4035 0006 7860     		str	r0, [r7, #4]
 4036 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4037              		.loc 1 3066 2
 4038 000a 7B68     		ldr	r3, [r7, #4]
 4039 000c 002B     		cmp	r3, #0
 4040 000e 0BD1     		bne	.L250
 4041              	.LBB182:
 4042              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4043              		.loc 2 195 2
 4044              		.syntax unified
 4045              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4046 0010 4FF05003 			mov r3, #80												
 4047 0014 83F31188 		msr basepri, r3											
 4048 0018 BFF36F8F 		isb														
 4049 001c BFF34F8F 		dsb														
 4050              	
 4051              	@ 0 "" 2
 4052              		.thumb
 4053              		.syntax unified
 4054 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4055              		.loc 2 203 1
 4056 0022 00BF     		nop
 4057              	.L251:
 4058              	.LBE183:
 4059              	.LBE182:
 4060              		.loc 1 3066 2
 4061 0024 00BF     		nop
 4062 0026 FDE7     		b	.L251
 4063              	.L250:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 130


3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4064              		.loc 1 3075 43
 4065 0028 074B     		ldr	r3, .L252
 4066 002a 1B68     		ldr	r3, [r3]
 4067              		.loc 1 3075 2
 4068 002c 1833     		adds	r3, r3, #24
 4069 002e 1946     		mov	r1, r3
 4070 0030 7868     		ldr	r0, [r7, #4]
 4071 0032 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4072              		.loc 1 3077 2
 4073 0036 0121     		movs	r1, #1
 4074 0038 3868     		ldr	r0, [r7]
 4075 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4076              		.loc 1 3078 1
 4077 003e 00BF     		nop
 4078 0040 1037     		adds	r7, r7, #16
 4079              	.LCFI140:
 4080              		.cfi_def_cfa_offset 8
 4081 0042 BD46     		mov	sp, r7
 4082              	.LCFI141:
 4083              		.cfi_def_cfa_register 13
 4084              		@ sp needed
 4085 0044 80BD     		pop	{r7, pc}
 4086              	.L253:
 4087 0046 00BF     		.align	2
 4088              	.L252:
 4089 0048 00000000 		.word	pxCurrentTCB
 4090              		.cfi_endproc
 4091              	.LFE31:
 4093              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4094              		.align	1
 4095              		.global	vTaskPlaceOnUnorderedEventList
 4096              		.syntax unified
 4097              		.thumb
 4098              		.thumb_func
 4100              	vTaskPlaceOnUnorderedEventList:
 4101              	.LFB32:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4102              		.loc 1 3082 1
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 24
 4105              		@ frame_needed = 1, uses_anonymous_args = 0
 4106 0000 80B5     		push	{r7, lr}
 4107              	.LCFI142:
 4108              		.cfi_def_cfa_offset 8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 131


 4109              		.cfi_offset 7, -8
 4110              		.cfi_offset 14, -4
 4111 0002 86B0     		sub	sp, sp, #24
 4112              	.LCFI143:
 4113              		.cfi_def_cfa_offset 32
 4114 0004 00AF     		add	r7, sp, #0
 4115              	.LCFI144:
 4116              		.cfi_def_cfa_register 7
 4117 0006 F860     		str	r0, [r7, #12]
 4118 0008 B960     		str	r1, [r7, #8]
 4119 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4120              		.loc 1 3083 2
 4121 000c FB68     		ldr	r3, [r7, #12]
 4122 000e 002B     		cmp	r3, #0
 4123 0010 0BD1     		bne	.L255
 4124              	.LBB184:
 4125              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4126              		.loc 2 195 2
 4127              		.syntax unified
 4128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4129 0012 4FF05003 			mov r3, #80												
 4130 0016 83F31188 		msr basepri, r3											
 4131 001a BFF36F8F 		isb														
 4132 001e BFF34F8F 		dsb														
 4133              	
 4134              	@ 0 "" 2
 4135              		.thumb
 4136              		.syntax unified
 4137 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4138              		.loc 2 203 1
 4139 0024 00BF     		nop
 4140              	.L256:
 4141              	.LBE185:
 4142              	.LBE184:
 4143              		.loc 1 3083 2
 4144 0026 00BF     		nop
 4145 0028 FDE7     		b	.L256
 4146              	.L255:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4147              		.loc 1 3087 2
 4148 002a 124B     		ldr	r3, .L259
 4149 002c 1B68     		ldr	r3, [r3]
 4150 002e 002B     		cmp	r3, #0
 4151 0030 0BD1     		bne	.L257
 4152              	.LBB186:
 4153              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4154              		.loc 2 195 2
 4155              		.syntax unified
 4156              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4157 0032 4FF05003 			mov r3, #80												
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 132


 4158 0036 83F31188 		msr basepri, r3											
 4159 003a BFF36F8F 		isb														
 4160 003e BFF34F8F 		dsb														
 4161              	
 4162              	@ 0 "" 2
 4163              		.thumb
 4164              		.syntax unified
 4165 0042 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4166              		.loc 2 203 1
 4167 0044 00BF     		nop
 4168              	.L258:
 4169              	.LBE187:
 4170              	.LBE186:
 4171              		.loc 1 3087 2
 4172 0046 00BF     		nop
 4173 0048 FDE7     		b	.L258
 4174              	.L257:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4175              		.loc 1 3092 2
 4176 004a 0B4B     		ldr	r3, .L259+4
 4177 004c 1B68     		ldr	r3, [r3]
 4178 004e BA68     		ldr	r2, [r7, #8]
 4179 0050 42F00042 		orr	r2, r2, #-2147483648
 4180 0054 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4181              		.loc 1 3099 46
 4182 0056 084B     		ldr	r3, .L259+4
 4183 0058 1B68     		ldr	r3, [r3]
 4184              		.loc 1 3099 2
 4185 005a 1833     		adds	r3, r3, #24
 4186 005c 1946     		mov	r1, r3
 4187 005e F868     		ldr	r0, [r7, #12]
 4188 0060 FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4189              		.loc 1 3101 2
 4190 0064 0121     		movs	r1, #1
 4191 0066 7868     		ldr	r0, [r7, #4]
 4192 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4193              		.loc 1 3102 1
 4194 006c 00BF     		nop
 4195 006e 1837     		adds	r7, r7, #24
 4196              	.LCFI145:
 4197              		.cfi_def_cfa_offset 8
 4198 0070 BD46     		mov	sp, r7
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 133


 4199              	.LCFI146:
 4200              		.cfi_def_cfa_register 13
 4201              		@ sp needed
 4202 0072 80BD     		pop	{r7, pc}
 4203              	.L260:
 4204              		.align	2
 4205              	.L259:
 4206 0074 00000000 		.word	uxSchedulerSuspended
 4207 0078 00000000 		.word	pxCurrentTCB
 4208              		.cfi_endproc
 4209              	.LFE32:
 4211              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4212              		.align	1
 4213              		.global	vTaskPlaceOnEventListRestricted
 4214              		.syntax unified
 4215              		.thumb
 4216              		.thumb_func
 4218              	vTaskPlaceOnEventListRestricted:
 4219              	.LFB33:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4220              		.loc 1 3108 2
 4221              		.cfi_startproc
 4222              		@ args = 0, pretend = 0, frame = 24
 4223              		@ frame_needed = 1, uses_anonymous_args = 0
 4224 0000 80B5     		push	{r7, lr}
 4225              	.LCFI147:
 4226              		.cfi_def_cfa_offset 8
 4227              		.cfi_offset 7, -8
 4228              		.cfi_offset 14, -4
 4229 0002 86B0     		sub	sp, sp, #24
 4230              	.LCFI148:
 4231              		.cfi_def_cfa_offset 32
 4232 0004 00AF     		add	r7, sp, #0
 4233              	.LCFI149:
 4234              		.cfi_def_cfa_register 7
 4235 0006 F860     		str	r0, [r7, #12]
 4236 0008 B960     		str	r1, [r7, #8]
 4237 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4238              		.loc 1 3109 3
 4239 000c FB68     		ldr	r3, [r7, #12]
 4240 000e 002B     		cmp	r3, #0
 4241 0010 0BD1     		bne	.L262
 4242              	.LBB188:
 4243              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4244              		.loc 2 195 2
 4245              		.syntax unified
 4246              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4247 0012 4FF05003 			mov r3, #80												
 4248 0016 83F31188 		msr basepri, r3											
 4249 001a BFF36F8F 		isb														
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 134


 4250 001e BFF34F8F 		dsb														
 4251              	
 4252              	@ 0 "" 2
 4253              		.thumb
 4254              		.syntax unified
 4255 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4256              		.loc 2 203 1
 4257 0024 00BF     		nop
 4258              	.L263:
 4259              	.LBE189:
 4260              	.LBE188:
 4261              		.loc 1 3109 3
 4262 0026 00BF     		nop
 4263 0028 FDE7     		b	.L263
 4264              	.L262:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4265              		.loc 1 3121 47
 4266 002a 0A4B     		ldr	r3, .L265
 4267 002c 1B68     		ldr	r3, [r3]
 4268              		.loc 1 3121 3
 4269 002e 1833     		adds	r3, r3, #24
 4270 0030 1946     		mov	r1, r3
 4271 0032 F868     		ldr	r0, [r7, #12]
 4272 0034 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4273              		.loc 1 3126 5
 4274 0038 7B68     		ldr	r3, [r7, #4]
 4275 003a 002B     		cmp	r3, #0
 4276 003c 02D0     		beq	.L264
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4277              		.loc 1 3128 17
 4278 003e 4FF0FF33 		mov	r3, #-1
 4279 0042 BB60     		str	r3, [r7, #8]
 4280              	.L264:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4281              		.loc 1 3132 3
 4282 0044 7968     		ldr	r1, [r7, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 135


 4283 0046 B868     		ldr	r0, [r7, #8]
 4284 0048 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4285              		.loc 1 3133 2
 4286 004c 00BF     		nop
 4287 004e 1837     		adds	r7, r7, #24
 4288              	.LCFI150:
 4289              		.cfi_def_cfa_offset 8
 4290 0050 BD46     		mov	sp, r7
 4291              	.LCFI151:
 4292              		.cfi_def_cfa_register 13
 4293              		@ sp needed
 4294 0052 80BD     		pop	{r7, pc}
 4295              	.L266:
 4296              		.align	2
 4297              	.L265:
 4298 0054 00000000 		.word	pxCurrentTCB
 4299              		.cfi_endproc
 4300              	.LFE33:
 4302              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4303              		.align	1
 4304              		.global	xTaskRemoveFromEventList
 4305              		.syntax unified
 4306              		.thumb
 4307              		.thumb_func
 4309              	xTaskRemoveFromEventList:
 4310              	.LFB34:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4311              		.loc 1 3139 1
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 24
 4314              		@ frame_needed = 1, uses_anonymous_args = 0
 4315 0000 80B5     		push	{r7, lr}
 4316              	.LCFI152:
 4317              		.cfi_def_cfa_offset 8
 4318              		.cfi_offset 7, -8
 4319              		.cfi_offset 14, -4
 4320 0002 86B0     		sub	sp, sp, #24
 4321              	.LCFI153:
 4322              		.cfi_def_cfa_offset 32
 4323 0004 00AF     		add	r7, sp, #0
 4324              	.LCFI154:
 4325              		.cfi_def_cfa_register 7
 4326 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 136


3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4327              		.loc 1 3156 19
 4328 0008 7B68     		ldr	r3, [r7, #4]
 4329 000a DB68     		ldr	r3, [r3, #12]
 4330              		.loc 1 3156 17
 4331 000c DB68     		ldr	r3, [r3, #12]
 4332 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4333              		.loc 1 3157 2
 4334 0010 3B69     		ldr	r3, [r7, #16]
 4335 0012 002B     		cmp	r3, #0
 4336 0014 0BD1     		bne	.L268
 4337              	.LBB190:
 4338              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4339              		.loc 2 195 2
 4340              		.syntax unified
 4341              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4342 0016 4FF05003 			mov r3, #80												
 4343 001a 83F31188 		msr basepri, r3											
 4344 001e BFF36F8F 		isb														
 4345 0022 BFF34F8F 		dsb														
 4346              	
 4347              	@ 0 "" 2
 4348              		.thumb
 4349              		.syntax unified
 4350 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4351              		.loc 2 203 1
 4352 0028 00BF     		nop
 4353              	.L269:
 4354              	.LBE191:
 4355              	.LBE190:
 4356              		.loc 1 3157 2
 4357 002a 00BF     		nop
 4358 002c FDE7     		b	.L269
 4359              	.L268:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4360              		.loc 1 3158 11
 4361 002e 3B69     		ldr	r3, [r7, #16]
 4362 0030 1833     		adds	r3, r3, #24
 4363 0032 1846     		mov	r0, r3
 4364 0034 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4365              		.loc 1 3160 27
 4366 0038 1D4B     		ldr	r3, .L276
 4367 003a 1B68     		ldr	r3, [r3]
 4368              		.loc 1 3160 4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 137


 4369 003c 002B     		cmp	r3, #0
 4370 003e 1DD1     		bne	.L270
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4371              		.loc 1 3162 12
 4372 0040 3B69     		ldr	r3, [r7, #16]
 4373 0042 0433     		adds	r3, r3, #4
 4374 0044 1846     		mov	r0, r3
 4375 0046 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4376              		.loc 1 3163 3
 4377 004a 3B69     		ldr	r3, [r7, #16]
 4378 004c DA6A     		ldr	r2, [r3, #44]
 4379 004e 194B     		ldr	r3, .L276+4
 4380 0050 1B68     		ldr	r3, [r3]
 4381 0052 9A42     		cmp	r2, r3
 4382 0054 03D9     		bls	.L271
 4383              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4384 0056 3B69     		ldr	r3, [r7, #16]
 4385 0058 DB6A     		ldr	r3, [r3, #44]
 4386 005a 164A     		ldr	r2, .L276+4
 4387 005c 1360     		str	r3, [r2]
 4388              	.L271:
 4389              		.loc 1 3163 3 discriminator 3
 4390 005e 3B69     		ldr	r3, [r7, #16]
 4391 0060 DA6A     		ldr	r2, [r3, #44]
 4392 0062 1346     		mov	r3, r2
 4393 0064 9B00     		lsls	r3, r3, #2
 4394 0066 1344     		add	r3, r3, r2
 4395 0068 9B00     		lsls	r3, r3, #2
 4396 006a 134A     		ldr	r2, .L276+8
 4397 006c 1A44     		add	r2, r2, r3
 4398 006e 3B69     		ldr	r3, [r7, #16]
 4399 0070 0433     		adds	r3, r3, #4
 4400 0072 1946     		mov	r1, r3
 4401 0074 1046     		mov	r0, r2
 4402 0076 FFF7FEFF 		bl	vListInsertEnd
 4403 007a 05E0     		b	.L272
 4404              	.L270:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 138


3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4405              		.loc 1 3183 3 is_stmt 1
 4406 007c 3B69     		ldr	r3, [r7, #16]
 4407 007e 1833     		adds	r3, r3, #24
 4408 0080 1946     		mov	r1, r3
 4409 0082 0E48     		ldr	r0, .L276+12
 4410 0084 FFF7FEFF 		bl	vListInsertEnd
 4411              	.L272:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4412              		.loc 1 3186 20
 4413 0088 3B69     		ldr	r3, [r7, #16]
 4414 008a DA6A     		ldr	r2, [r3, #44]
 4415              		.loc 1 3186 47
 4416 008c 0C4B     		ldr	r3, .L276+16
 4417 008e 1B68     		ldr	r3, [r3]
 4418 0090 DB6A     		ldr	r3, [r3, #44]
 4419              		.loc 1 3186 4
 4420 0092 9A42     		cmp	r2, r3
 4421 0094 05D9     		bls	.L273
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4422              		.loc 1 3191 11
 4423 0096 0123     		movs	r3, #1
 4424 0098 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4425              		.loc 1 3195 17
 4426 009a 0A4B     		ldr	r3, .L276+20
 4427 009c 0122     		movs	r2, #1
 4428 009e 1A60     		str	r2, [r3]
 4429 00a0 01E0     		b	.L274
 4430              	.L273:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4431              		.loc 1 3199 11
 4432 00a2 0023     		movs	r3, #0
 4433 00a4 7B61     		str	r3, [r7, #20]
 4434              	.L274:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4435              		.loc 1 3202 9
 4436 00a6 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4437              		.loc 1 3203 1
 4438 00a8 1846     		mov	r0, r3
 4439 00aa 1837     		adds	r7, r7, #24
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 139


 4440              	.LCFI155:
 4441              		.cfi_def_cfa_offset 8
 4442 00ac BD46     		mov	sp, r7
 4443              	.LCFI156:
 4444              		.cfi_def_cfa_register 13
 4445              		@ sp needed
 4446 00ae 80BD     		pop	{r7, pc}
 4447              	.L277:
 4448              		.align	2
 4449              	.L276:
 4450 00b0 00000000 		.word	uxSchedulerSuspended
 4451 00b4 00000000 		.word	uxTopReadyPriority
 4452 00b8 00000000 		.word	pxReadyTasksLists
 4453 00bc 00000000 		.word	xPendingReadyList
 4454 00c0 00000000 		.word	pxCurrentTCB
 4455 00c4 00000000 		.word	xYieldPending
 4456              		.cfi_endproc
 4457              	.LFE34:
 4459              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4460              		.align	1
 4461              		.global	vTaskRemoveFromUnorderedEventList
 4462              		.syntax unified
 4463              		.thumb
 4464              		.thumb_func
 4466              	vTaskRemoveFromUnorderedEventList:
 4467              	.LFB35:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4468              		.loc 1 3207 1
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 24
 4471              		@ frame_needed = 1, uses_anonymous_args = 0
 4472 0000 80B5     		push	{r7, lr}
 4473              	.LCFI157:
 4474              		.cfi_def_cfa_offset 8
 4475              		.cfi_offset 7, -8
 4476              		.cfi_offset 14, -4
 4477 0002 86B0     		sub	sp, sp, #24
 4478              	.LCFI158:
 4479              		.cfi_def_cfa_offset 32
 4480 0004 00AF     		add	r7, sp, #0
 4481              	.LCFI159:
 4482              		.cfi_def_cfa_register 7
 4483 0006 7860     		str	r0, [r7, #4]
 4484 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4485              		.loc 1 3212 2
 4486 000a 2A4B     		ldr	r3, .L286
 4487 000c 1B68     		ldr	r3, [r3]
 4488 000e 002B     		cmp	r3, #0
 4489 0010 0BD1     		bne	.L279
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 140


 4490              	.LBB192:
 4491              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4492              		.loc 2 195 2
 4493              		.syntax unified
 4494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4495 0012 4FF05003 			mov r3, #80												
 4496 0016 83F31188 		msr basepri, r3											
 4497 001a BFF36F8F 		isb														
 4498 001e BFF34F8F 		dsb														
 4499              	
 4500              	@ 0 "" 2
 4501              		.thumb
 4502              		.syntax unified
 4503 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4504              		.loc 2 203 1
 4505 0024 00BF     		nop
 4506              	.L280:
 4507              	.LBE193:
 4508              	.LBE192:
 4509              		.loc 1 3212 2
 4510 0026 00BF     		nop
 4511 0028 FDE7     		b	.L280
 4512              	.L279:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4513              		.loc 1 3215 2
 4514 002a 3B68     		ldr	r3, [r7]
 4515 002c 43F00042 		orr	r2, r3, #-2147483648
 4516 0030 7B68     		ldr	r3, [r7, #4]
 4517 0032 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4518              		.loc 1 3219 17
 4519 0034 7B68     		ldr	r3, [r7, #4]
 4520 0036 DB68     		ldr	r3, [r3, #12]
 4521 0038 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4522              		.loc 1 3220 2
 4523 003a 7B69     		ldr	r3, [r7, #20]
 4524 003c 002B     		cmp	r3, #0
 4525 003e 0BD1     		bne	.L281
 4526              	.LBB194:
 4527              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4528              		.loc 2 195 2
 4529              		.syntax unified
 4530              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4531 0040 4FF05003 			mov r3, #80												
 4532 0044 83F31188 		msr basepri, r3											
 4533 0048 BFF36F8F 		isb														
 4534 004c BFF34F8F 		dsb														
 4535              	
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 141


 4536              	@ 0 "" 2
 4537              		.thumb
 4538              		.syntax unified
 4539 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4540              		.loc 2 203 1
 4541 0052 00BF     		nop
 4542              	.L282:
 4543              	.LBE195:
 4544              	.LBE194:
 4545              		.loc 1 3220 2
 4546 0054 00BF     		nop
 4547 0056 FDE7     		b	.L282
 4548              	.L281:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4549              		.loc 1 3221 11
 4550 0058 7868     		ldr	r0, [r7, #4]
 4551 005a FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4552              		.loc 1 3240 11
 4553 005e 7B69     		ldr	r3, [r7, #20]
 4554 0060 0433     		adds	r3, r3, #4
 4555 0062 1846     		mov	r0, r3
 4556 0064 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4557              		.loc 1 3241 2
 4558 0068 7B69     		ldr	r3, [r7, #20]
 4559 006a DA6A     		ldr	r2, [r3, #44]
 4560 006c 124B     		ldr	r3, .L286+4
 4561 006e 1B68     		ldr	r3, [r3]
 4562 0070 9A42     		cmp	r2, r3
 4563 0072 03D9     		bls	.L283
 4564              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4565 0074 7B69     		ldr	r3, [r7, #20]
 4566 0076 DB6A     		ldr	r3, [r3, #44]
 4567 0078 0F4A     		ldr	r2, .L286+4
 4568 007a 1360     		str	r3, [r2]
 4569              	.L283:
 4570              		.loc 1 3241 2 discriminator 3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 142


 4571 007c 7B69     		ldr	r3, [r7, #20]
 4572 007e DA6A     		ldr	r2, [r3, #44]
 4573 0080 1346     		mov	r3, r2
 4574 0082 9B00     		lsls	r3, r3, #2
 4575 0084 1344     		add	r3, r3, r2
 4576 0086 9B00     		lsls	r3, r3, #2
 4577 0088 0C4A     		ldr	r2, .L286+8
 4578 008a 1A44     		add	r2, r2, r3
 4579 008c 7B69     		ldr	r3, [r7, #20]
 4580 008e 0433     		adds	r3, r3, #4
 4581 0090 1946     		mov	r1, r3
 4582 0092 1046     		mov	r0, r2
 4583 0094 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4584              		.loc 1 3243 20 is_stmt 1
 4585 0098 7B69     		ldr	r3, [r7, #20]
 4586 009a DA6A     		ldr	r2, [r3, #44]
 4587              		.loc 1 3243 47
 4588 009c 084B     		ldr	r3, .L286+12
 4589 009e 1B68     		ldr	r3, [r3]
 4590 00a0 DB6A     		ldr	r3, [r3, #44]
 4591              		.loc 1 3243 4
 4592 00a2 9A42     		cmp	r2, r3
 4593 00a4 02D9     		bls	.L285
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4594              		.loc 1 3249 17
 4595 00a6 074B     		ldr	r3, .L286+16
 4596 00a8 0122     		movs	r2, #1
 4597 00aa 1A60     		str	r2, [r3]
 4598              	.L285:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4599              		.loc 1 3251 1
 4600 00ac 00BF     		nop
 4601 00ae 1837     		adds	r7, r7, #24
 4602              	.LCFI160:
 4603              		.cfi_def_cfa_offset 8
 4604 00b0 BD46     		mov	sp, r7
 4605              	.LCFI161:
 4606              		.cfi_def_cfa_register 13
 4607              		@ sp needed
 4608 00b2 80BD     		pop	{r7, pc}
 4609              	.L287:
 4610              		.align	2
 4611              	.L286:
 4612 00b4 00000000 		.word	uxSchedulerSuspended
 4613 00b8 00000000 		.word	uxTopReadyPriority
 4614 00bc 00000000 		.word	pxReadyTasksLists
 4615 00c0 00000000 		.word	pxCurrentTCB
 4616 00c4 00000000 		.word	xYieldPending
 4617              		.cfi_endproc
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 143


 4618              	.LFE35:
 4620              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4621              		.align	1
 4622              		.global	vTaskSetTimeOutState
 4623              		.syntax unified
 4624              		.thumb
 4625              		.thumb_func
 4627              	vTaskSetTimeOutState:
 4628              	.LFB36:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4629              		.loc 1 3255 1
 4630              		.cfi_startproc
 4631              		@ args = 0, pretend = 0, frame = 16
 4632              		@ frame_needed = 1, uses_anonymous_args = 0
 4633 0000 80B5     		push	{r7, lr}
 4634              	.LCFI162:
 4635              		.cfi_def_cfa_offset 8
 4636              		.cfi_offset 7, -8
 4637              		.cfi_offset 14, -4
 4638 0002 84B0     		sub	sp, sp, #16
 4639              	.LCFI163:
 4640              		.cfi_def_cfa_offset 24
 4641 0004 00AF     		add	r7, sp, #0
 4642              	.LCFI164:
 4643              		.cfi_def_cfa_register 7
 4644 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4645              		.loc 1 3256 2
 4646 0008 7B68     		ldr	r3, [r7, #4]
 4647 000a 002B     		cmp	r3, #0
 4648 000c 0BD1     		bne	.L289
 4649              	.LBB196:
 4650              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4651              		.loc 2 195 2
 4652              		.syntax unified
 4653              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4654 000e 4FF05003 			mov r3, #80												
 4655 0012 83F31188 		msr basepri, r3											
 4656 0016 BFF36F8F 		isb														
 4657 001a BFF34F8F 		dsb														
 4658              	
 4659              	@ 0 "" 2
 4660              		.thumb
 4661              		.syntax unified
 4662 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4663              		.loc 2 203 1
 4664 0020 00BF     		nop
 4665              	.L290:
 4666              	.LBE197:
 4667              	.LBE196:
 4668              		.loc 1 3256 2
 4669 0022 00BF     		nop
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 144


 4670 0024 FDE7     		b	.L290
 4671              	.L289:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4672              		.loc 1 3257 2
 4673 0026 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4674              		.loc 1 3259 29
 4675 002a 074B     		ldr	r3, .L291
 4676 002c 1A68     		ldr	r2, [r3]
 4677 002e 7B68     		ldr	r3, [r7, #4]
 4678 0030 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4679              		.loc 1 3260 30
 4680 0032 064B     		ldr	r3, .L291+4
 4681 0034 1A68     		ldr	r2, [r3]
 4682 0036 7B68     		ldr	r3, [r7, #4]
 4683 0038 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4684              		.loc 1 3262 2
 4685 003a FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4686              		.loc 1 3263 1
 4687 003e 00BF     		nop
 4688 0040 1037     		adds	r7, r7, #16
 4689              	.LCFI165:
 4690              		.cfi_def_cfa_offset 8
 4691 0042 BD46     		mov	sp, r7
 4692              	.LCFI166:
 4693              		.cfi_def_cfa_register 13
 4694              		@ sp needed
 4695 0044 80BD     		pop	{r7, pc}
 4696              	.L292:
 4697 0046 00BF     		.align	2
 4698              	.L291:
 4699 0048 00000000 		.word	xNumOfOverflows
 4700 004c 00000000 		.word	xTickCount
 4701              		.cfi_endproc
 4702              	.LFE36:
 4704              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4705              		.align	1
 4706              		.global	vTaskInternalSetTimeOutState
 4707              		.syntax unified
 4708              		.thumb
 4709              		.thumb_func
 4711              	vTaskInternalSetTimeOutState:
 4712              	.LFB37:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4713              		.loc 1 3267 1
 4714              		.cfi_startproc
 4715              		@ args = 0, pretend = 0, frame = 8
 4716              		@ frame_needed = 1, uses_anonymous_args = 0
 4717              		@ link register save eliminated.
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 145


 4718 0000 80B4     		push	{r7}
 4719              	.LCFI167:
 4720              		.cfi_def_cfa_offset 4
 4721              		.cfi_offset 7, -4
 4722 0002 83B0     		sub	sp, sp, #12
 4723              	.LCFI168:
 4724              		.cfi_def_cfa_offset 16
 4725 0004 00AF     		add	r7, sp, #0
 4726              	.LCFI169:
 4727              		.cfi_def_cfa_register 7
 4728 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4729              		.loc 1 3269 28
 4730 0008 064B     		ldr	r3, .L294
 4731 000a 1A68     		ldr	r2, [r3]
 4732 000c 7B68     		ldr	r3, [r7, #4]
 4733 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4734              		.loc 1 3270 29
 4735 0010 054B     		ldr	r3, .L294+4
 4736 0012 1A68     		ldr	r2, [r3]
 4737 0014 7B68     		ldr	r3, [r7, #4]
 4738 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4739              		.loc 1 3271 1
 4740 0018 00BF     		nop
 4741 001a 0C37     		adds	r7, r7, #12
 4742              	.LCFI170:
 4743              		.cfi_def_cfa_offset 4
 4744 001c BD46     		mov	sp, r7
 4745              	.LCFI171:
 4746              		.cfi_def_cfa_register 13
 4747              		@ sp needed
 4748 001e 5DF8047B 		ldr	r7, [sp], #4
 4749              	.LCFI172:
 4750              		.cfi_restore 7
 4751              		.cfi_def_cfa_offset 0
 4752 0022 7047     		bx	lr
 4753              	.L295:
 4754              		.align	2
 4755              	.L294:
 4756 0024 00000000 		.word	xNumOfOverflows
 4757 0028 00000000 		.word	xTickCount
 4758              		.cfi_endproc
 4759              	.LFE37:
 4761              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4762              		.align	1
 4763              		.global	xTaskCheckForTimeOut
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4768              	xTaskCheckForTimeOut:
 4769              	.LFB38:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 146


3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4770              		.loc 1 3275 1
 4771              		.cfi_startproc
 4772              		@ args = 0, pretend = 0, frame = 32
 4773              		@ frame_needed = 1, uses_anonymous_args = 0
 4774 0000 80B5     		push	{r7, lr}
 4775              	.LCFI173:
 4776              		.cfi_def_cfa_offset 8
 4777              		.cfi_offset 7, -8
 4778              		.cfi_offset 14, -4
 4779 0002 88B0     		sub	sp, sp, #32
 4780              	.LCFI174:
 4781              		.cfi_def_cfa_offset 40
 4782 0004 00AF     		add	r7, sp, #0
 4783              	.LCFI175:
 4784              		.cfi_def_cfa_register 7
 4785 0006 7860     		str	r0, [r7, #4]
 4786 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4787              		.loc 1 3278 2
 4788 000a 7B68     		ldr	r3, [r7, #4]
 4789 000c 002B     		cmp	r3, #0
 4790 000e 0BD1     		bne	.L297
 4791              	.LBB198:
 4792              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4793              		.loc 2 195 2
 4794              		.syntax unified
 4795              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4796 0010 4FF05003 			mov r3, #80												
 4797 0014 83F31188 		msr basepri, r3											
 4798 0018 BFF36F8F 		isb														
 4799 001c BFF34F8F 		dsb														
 4800              	
 4801              	@ 0 "" 2
 4802              		.thumb
 4803              		.syntax unified
 4804 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4805              		.loc 2 203 1
 4806 0022 00BF     		nop
 4807              	.L298:
 4808              	.LBE199:
 4809              	.LBE198:
 4810              		.loc 1 3278 2
 4811 0024 00BF     		nop
 4812 0026 FDE7     		b	.L298
 4813              	.L297:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4814              		.loc 1 3279 2
 4815 0028 3B68     		ldr	r3, [r7]
 4816 002a 002B     		cmp	r3, #0
 4817 002c 0BD1     		bne	.L299
 4818              	.LBB200:
 4819              	.LBB201:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 147


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4820              		.loc 2 195 2
 4821              		.syntax unified
 4822              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4823 002e 4FF05003 			mov r3, #80												
 4824 0032 83F31188 		msr basepri, r3											
 4825 0036 BFF36F8F 		isb														
 4826 003a BFF34F8F 		dsb														
 4827              	
 4828              	@ 0 "" 2
 4829              		.thumb
 4830              		.syntax unified
 4831 003e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4832              		.loc 2 203 1
 4833 0040 00BF     		nop
 4834              	.L300:
 4835              	.LBE201:
 4836              	.LBE200:
 4837              		.loc 1 3279 2
 4838 0042 00BF     		nop
 4839 0044 FDE7     		b	.L300
 4840              	.L299:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4841              		.loc 1 3281 2
 4842 0046 FFF7FEFF 		bl	vPortEnterCritical
 4843              	.LBB202:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4844              		.loc 1 3284 20
 4845 004a 1D4B     		ldr	r3, .L306
 4846 004c 1B68     		ldr	r3, [r3]
 4847 004e BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4848              		.loc 1 3285 62
 4849 0050 7B68     		ldr	r3, [r7, #4]
 4850 0052 5B68     		ldr	r3, [r3, #4]
 4851              		.loc 1 3285 20
 4852 0054 BA69     		ldr	r2, [r7, #24]
 4853 0056 D31A     		subs	r3, r2, r3
 4854 0058 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 148


 4855              		.loc 1 3299 8
 4856 005a 3B68     		ldr	r3, [r7]
 4857 005c 1B68     		ldr	r3, [r3]
 4858              		.loc 1 3299 6
 4859 005e B3F1FF3F 		cmp	r3, #-1
 4860 0062 02D1     		bne	.L301
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4861              		.loc 1 3304 13
 4862 0064 0023     		movs	r3, #0
 4863 0066 FB61     		str	r3, [r7, #28]
 4864 0068 23E0     		b	.L302
 4865              	.L301:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4866              		.loc 1 3309 37
 4867 006a 7B68     		ldr	r3, [r7, #4]
 4868 006c 1A68     		ldr	r2, [r3]
 4869              		.loc 1 3309 25
 4870 006e 154B     		ldr	r3, .L306+4
 4871 0070 1B68     		ldr	r3, [r3]
 4872              		.loc 1 3309 5
 4873 0072 9A42     		cmp	r2, r3
 4874 0074 07D0     		beq	.L303
 4875              		.loc 1 3309 89 discriminator 1
 4876 0076 7B68     		ldr	r3, [r7, #4]
 4877 0078 5B68     		ldr	r3, [r3, #4]
 4878              		.loc 1 3309 56 discriminator 1
 4879 007a BA69     		ldr	r2, [r7, #24]
 4880 007c 9A42     		cmp	r2, r3
 4881 007e 02D3     		bcc	.L303
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4882              		.loc 1 3316 12
 4883 0080 0123     		movs	r3, #1
 4884 0082 FB61     		str	r3, [r7, #28]
 4885 0084 15E0     		b	.L302
 4886              	.L303:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4887              		.loc 1 3318 27
 4888 0086 3B68     		ldr	r3, [r7]
 4889 0088 1B68     		ldr	r3, [r3]
 4890              		.loc 1 3318 10
 4891 008a 7A69     		ldr	r2, [r7, #20]
 4892 008c 9A42     		cmp	r2, r3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 149


 4893 008e 0BD2     		bcs	.L304
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4894              		.loc 1 3321 4
 4895 0090 3B68     		ldr	r3, [r7]
 4896 0092 1A68     		ldr	r2, [r3]
 4897              		.loc 1 3321 19
 4898 0094 7B69     		ldr	r3, [r7, #20]
 4899 0096 D21A     		subs	r2, r2, r3
 4900 0098 3B68     		ldr	r3, [r7]
 4901 009a 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4902              		.loc 1 3322 4
 4903 009c 7868     		ldr	r0, [r7, #4]
 4904 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4905              		.loc 1 3323 12
 4906 00a2 0023     		movs	r3, #0
 4907 00a4 FB61     		str	r3, [r7, #28]
 4908 00a6 04E0     		b	.L302
 4909              	.L304:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4910              		.loc 1 3327 19
 4911 00a8 3B68     		ldr	r3, [r7]
 4912 00aa 0022     		movs	r2, #0
 4913 00ac 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4914              		.loc 1 3328 12
 4915 00ae 0123     		movs	r3, #1
 4916 00b0 FB61     		str	r3, [r7, #28]
 4917              	.L302:
 4918              	.LBE202:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4919              		.loc 1 3331 2
 4920 00b2 FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4921              		.loc 1 3333 9
 4922 00b6 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4923              		.loc 1 3334 1
 4924 00b8 1846     		mov	r0, r3
 4925 00ba 2037     		adds	r7, r7, #32
 4926              	.LCFI176:
 4927              		.cfi_def_cfa_offset 8
 4928 00bc BD46     		mov	sp, r7
 4929              	.LCFI177:
 4930              		.cfi_def_cfa_register 13
 4931              		@ sp needed
 4932 00be 80BD     		pop	{r7, pc}
 4933              	.L307:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 150


 4934              		.align	2
 4935              	.L306:
 4936 00c0 00000000 		.word	xTickCount
 4937 00c4 00000000 		.word	xNumOfOverflows
 4938              		.cfi_endproc
 4939              	.LFE38:
 4941              		.section	.text.vTaskMissedYield,"ax",%progbits
 4942              		.align	1
 4943              		.global	vTaskMissedYield
 4944              		.syntax unified
 4945              		.thumb
 4946              		.thumb_func
 4948              	vTaskMissedYield:
 4949              	.LFB39:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4950              		.loc 1 3338 1
 4951              		.cfi_startproc
 4952              		@ args = 0, pretend = 0, frame = 0
 4953              		@ frame_needed = 1, uses_anonymous_args = 0
 4954              		@ link register save eliminated.
 4955 0000 80B4     		push	{r7}
 4956              	.LCFI178:
 4957              		.cfi_def_cfa_offset 4
 4958              		.cfi_offset 7, -4
 4959 0002 00AF     		add	r7, sp, #0
 4960              	.LCFI179:
 4961              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4962              		.loc 1 3339 16
 4963 0004 034B     		ldr	r3, .L309
 4964 0006 0122     		movs	r2, #1
 4965 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4966              		.loc 1 3340 1
 4967 000a 00BF     		nop
 4968 000c BD46     		mov	sp, r7
 4969              	.LCFI180:
 4970              		.cfi_def_cfa_register 13
 4971              		@ sp needed
 4972 000e 5DF8047B 		ldr	r7, [sp], #4
 4973              	.LCFI181:
 4974              		.cfi_restore 7
 4975              		.cfi_def_cfa_offset 0
 4976 0012 7047     		bx	lr
 4977              	.L310:
 4978              		.align	2
 4979              	.L309:
 4980 0014 00000000 		.word	xYieldPending
 4981              		.cfi_endproc
 4982              	.LFE39:
 4984              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4985              		.align	1
 4986              		.global	uxTaskGetTaskNumber
 4987              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 151


 4988              		.thumb
 4989              		.thumb_func
 4991              	uxTaskGetTaskNumber:
 4992              	.LFB40:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4993              		.loc 1 3346 2
 4994              		.cfi_startproc
 4995              		@ args = 0, pretend = 0, frame = 16
 4996              		@ frame_needed = 1, uses_anonymous_args = 0
 4997              		@ link register save eliminated.
 4998 0000 80B4     		push	{r7}
 4999              	.LCFI182:
 5000              		.cfi_def_cfa_offset 4
 5001              		.cfi_offset 7, -4
 5002 0002 85B0     		sub	sp, sp, #20
 5003              	.LCFI183:
 5004              		.cfi_def_cfa_offset 24
 5005 0004 00AF     		add	r7, sp, #0
 5006              	.LCFI184:
 5007              		.cfi_def_cfa_register 7
 5008 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5009              		.loc 1 3350 5
 5010 0008 7B68     		ldr	r3, [r7, #4]
 5011 000a 002B     		cmp	r3, #0
 5012 000c 05D0     		beq	.L312
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5013              		.loc 1 3352 10
 5014 000e 7B68     		ldr	r3, [r7, #4]
 5015 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5016              		.loc 1 3353 13
 5017 0012 BB68     		ldr	r3, [r7, #8]
 5018 0014 9B6C     		ldr	r3, [r3, #72]
 5019 0016 FB60     		str	r3, [r7, #12]
 5020 0018 01E0     		b	.L313
 5021              	.L312:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5022              		.loc 1 3357 13
 5023 001a 0023     		movs	r3, #0
 5024 001c FB60     		str	r3, [r7, #12]
 5025              	.L313:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 152


 5026              		.loc 1 3360 10
 5027 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5028              		.loc 1 3361 2
 5029 0020 1846     		mov	r0, r3
 5030 0022 1437     		adds	r7, r7, #20
 5031              	.LCFI185:
 5032              		.cfi_def_cfa_offset 4
 5033 0024 BD46     		mov	sp, r7
 5034              	.LCFI186:
 5035              		.cfi_def_cfa_register 13
 5036              		@ sp needed
 5037 0026 5DF8047B 		ldr	r7, [sp], #4
 5038              	.LCFI187:
 5039              		.cfi_restore 7
 5040              		.cfi_def_cfa_offset 0
 5041 002a 7047     		bx	lr
 5042              		.cfi_endproc
 5043              	.LFE40:
 5045              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5046              		.align	1
 5047              		.global	vTaskSetTaskNumber
 5048              		.syntax unified
 5049              		.thumb
 5050              		.thumb_func
 5052              	vTaskSetTaskNumber:
 5053              	.LFB41:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5054              		.loc 1 3369 2
 5055              		.cfi_startproc
 5056              		@ args = 0, pretend = 0, frame = 16
 5057              		@ frame_needed = 1, uses_anonymous_args = 0
 5058              		@ link register save eliminated.
 5059 0000 80B4     		push	{r7}
 5060              	.LCFI188:
 5061              		.cfi_def_cfa_offset 4
 5062              		.cfi_offset 7, -4
 5063 0002 85B0     		sub	sp, sp, #20
 5064              	.LCFI189:
 5065              		.cfi_def_cfa_offset 24
 5066 0004 00AF     		add	r7, sp, #0
 5067              	.LCFI190:
 5068              		.cfi_def_cfa_register 7
 5069 0006 7860     		str	r0, [r7, #4]
 5070 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5071              		.loc 1 3372 5
 5072 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 153


 5073 000c 002B     		cmp	r3, #0
 5074 000e 04D0     		beq	.L317
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5075              		.loc 1 3374 10
 5076 0010 7B68     		ldr	r3, [r7, #4]
 5077 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5078              		.loc 1 3375 24
 5079 0014 FB68     		ldr	r3, [r7, #12]
 5080 0016 3A68     		ldr	r2, [r7]
 5081 0018 9A64     		str	r2, [r3, #72]
 5082              	.L317:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5083              		.loc 1 3377 2
 5084 001a 00BF     		nop
 5085 001c 1437     		adds	r7, r7, #20
 5086              	.LCFI191:
 5087              		.cfi_def_cfa_offset 4
 5088 001e BD46     		mov	sp, r7
 5089              	.LCFI192:
 5090              		.cfi_def_cfa_register 13
 5091              		@ sp needed
 5092 0020 5DF8047B 		ldr	r7, [sp], #4
 5093              	.LCFI193:
 5094              		.cfi_restore 7
 5095              		.cfi_def_cfa_offset 0
 5096 0024 7047     		bx	lr
 5097              		.cfi_endproc
 5098              	.LFE41:
 5100              		.section	.text.prvIdleTask,"ax",%progbits
 5101              		.align	1
 5102              		.syntax unified
 5103              		.thumb
 5104              		.thumb_func
 5106              	prvIdleTask:
 5107              	.LFB42:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5108              		.loc 1 3393 1
 5109              		.cfi_startproc
 5110              		@ args = 0, pretend = 0, frame = 8
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 154


 5111              		@ frame_needed = 1, uses_anonymous_args = 0
 5112 0000 80B5     		push	{r7, lr}
 5113              	.LCFI194:
 5114              		.cfi_def_cfa_offset 8
 5115              		.cfi_offset 7, -8
 5116              		.cfi_offset 14, -4
 5117 0002 82B0     		sub	sp, sp, #8
 5118              	.LCFI195:
 5119              		.cfi_def_cfa_offset 16
 5120 0004 00AF     		add	r7, sp, #0
 5121              	.LCFI196:
 5122              		.cfi_def_cfa_register 7
 5123 0006 7860     		str	r0, [r7, #4]
 5124              	.L320:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5125              		.loc 1 3409 3
 5126 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5127              		.loc 1 3432 8
 5128 000c 064B     		ldr	r3, .L321
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 155


 5129 000e 1B68     		ldr	r3, [r3]
 5130              		.loc 1 3432 6
 5131 0010 012B     		cmp	r3, #1
 5132 0012 F9D9     		bls	.L320
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5133              		.loc 1 3434 5
 5134 0014 054B     		ldr	r3, .L321+4
 5135 0016 4FF08052 		mov	r2, #268435456
 5136 001a 1A60     		str	r2, [r3]
 5137              		.syntax unified
 5138              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5139 001c BFF34F8F 		dsb
 5140              	@ 0 "" 2
 5141              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5142 0020 BFF36F8F 		isb
 5143              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5144              		.loc 1 3409 3
 5145              		.thumb
 5146              		.syntax unified
 5147 0024 F0E7     		b	.L320
 5148              	.L322:
 5149 0026 00BF     		.align	2
 5150              	.L321:
 5151 0028 00000000 		.word	pxReadyTasksLists
 5152 002c 04ED00E0 		.word	-536810236
 5153              		.cfi_endproc
 5154              	.LFE42:
 5156              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5157              		.align	1
 5158              		.syntax unified
 5159              		.thumb
 5160              		.thumb_func
 5162              	prvInitialiseTaskLists:
 5163              	.LFB43:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 156


3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 157


3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 158


3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5164              		.loc 1 3608 1
 5165              		.cfi_startproc
 5166              		@ args = 0, pretend = 0, frame = 8
 5167              		@ frame_needed = 1, uses_anonymous_args = 0
 5168 0000 80B5     		push	{r7, lr}
 5169              	.LCFI197:
 5170              		.cfi_def_cfa_offset 8
 5171              		.cfi_offset 7, -8
 5172              		.cfi_offset 14, -4
 5173 0002 82B0     		sub	sp, sp, #8
 5174              	.LCFI198:
 5175              		.cfi_def_cfa_offset 16
 5176 0004 00AF     		add	r7, sp, #0
 5177              	.LCFI199:
 5178              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 159


 5179              		.loc 1 3611 18
 5180 0006 0023     		movs	r3, #0
 5181 0008 7B60     		str	r3, [r7, #4]
 5182              		.loc 1 3611 2
 5183 000a 0CE0     		b	.L324
 5184              	.L325:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5185              		.loc 1 3613 3
 5186 000c 7A68     		ldr	r2, [r7, #4]
 5187 000e 1346     		mov	r3, r2
 5188 0010 9B00     		lsls	r3, r3, #2
 5189 0012 1344     		add	r3, r3, r2
 5190 0014 9B00     		lsls	r3, r3, #2
 5191 0016 124A     		ldr	r2, .L326
 5192 0018 1344     		add	r3, r3, r2
 5193 001a 1846     		mov	r0, r3
 5194 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5195              		.loc 1 3611 101 discriminator 3
 5196 0020 7B68     		ldr	r3, [r7, #4]
 5197 0022 0133     		adds	r3, r3, #1
 5198 0024 7B60     		str	r3, [r7, #4]
 5199              	.L324:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5200              		.loc 1 3611 51 discriminator 1
 5201 0026 7B68     		ldr	r3, [r7, #4]
 5202 0028 372B     		cmp	r3, #55
 5203 002a EFD9     		bls	.L325
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5204              		.loc 1 3616 2
 5205 002c 0D48     		ldr	r0, .L326+4
 5206 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5207              		.loc 1 3617 2
 5208 0032 0D48     		ldr	r0, .L326+8
 5209 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5210              		.loc 1 3618 2
 5211 0038 0C48     		ldr	r0, .L326+12
 5212 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5213              		.loc 1 3622 3
 5214 003e 0C48     		ldr	r0, .L326+16
 5215 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5216              		.loc 1 3628 3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 160


 5217 0044 0B48     		ldr	r0, .L326+20
 5218 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5219              		.loc 1 3634 20
 5220 004a 0B4B     		ldr	r3, .L326+24
 5221 004c 054A     		ldr	r2, .L326+4
 5222 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5223              		.loc 1 3635 28
 5224 0050 0A4B     		ldr	r3, .L326+28
 5225 0052 054A     		ldr	r2, .L326+8
 5226 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5227              		.loc 1 3636 1
 5228 0056 00BF     		nop
 5229 0058 0837     		adds	r7, r7, #8
 5230              	.LCFI200:
 5231              		.cfi_def_cfa_offset 8
 5232 005a BD46     		mov	sp, r7
 5233              	.LCFI201:
 5234              		.cfi_def_cfa_register 13
 5235              		@ sp needed
 5236 005c 80BD     		pop	{r7, pc}
 5237              	.L327:
 5238 005e 00BF     		.align	2
 5239              	.L326:
 5240 0060 00000000 		.word	pxReadyTasksLists
 5241 0064 00000000 		.word	xDelayedTaskList1
 5242 0068 00000000 		.word	xDelayedTaskList2
 5243 006c 00000000 		.word	xPendingReadyList
 5244 0070 00000000 		.word	xTasksWaitingTermination
 5245 0074 00000000 		.word	xSuspendedTaskList
 5246 0078 00000000 		.word	pxDelayedTaskList
 5247 007c 00000000 		.word	pxOverflowDelayedTaskList
 5248              		.cfi_endproc
 5249              	.LFE43:
 5251              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5252              		.align	1
 5253              		.syntax unified
 5254              		.thumb
 5255              		.thumb_func
 5257              	prvCheckTasksWaitingTermination:
 5258              	.LFB44:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5259              		.loc 1 3640 1
 5260              		.cfi_startproc
 5261              		@ args = 0, pretend = 0, frame = 8
 5262              		@ frame_needed = 1, uses_anonymous_args = 0
 5263 0000 80B5     		push	{r7, lr}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 161


 5264              	.LCFI202:
 5265              		.cfi_def_cfa_offset 8
 5266              		.cfi_offset 7, -8
 5267              		.cfi_offset 14, -4
 5268 0002 82B0     		sub	sp, sp, #8
 5269              	.LCFI203:
 5270              		.cfi_def_cfa_offset 16
 5271 0004 00AF     		add	r7, sp, #0
 5272              	.LCFI204:
 5273              		.cfi_def_cfa_register 7
 5274              	.LBB203:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5275              		.loc 1 3650 8
 5276 0006 19E0     		b	.L329
 5277              	.L330:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5278              		.loc 1 3652 4
 5279 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5280              		.loc 1 3654 13
 5281 000c 104B     		ldr	r3, .L331
 5282 000e DB68     		ldr	r3, [r3, #12]
 5283              		.loc 1 3654 11
 5284 0010 DB68     		ldr	r3, [r3, #12]
 5285 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5286              		.loc 1 3655 14
 5287 0014 7B68     		ldr	r3, [r7, #4]
 5288 0016 0433     		adds	r3, r3, #4
 5289 0018 1846     		mov	r0, r3
 5290 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5291              		.loc 1 3656 5
 5292 001e 0D4B     		ldr	r3, .L331+4
 5293 0020 1B68     		ldr	r3, [r3]
 5294 0022 013B     		subs	r3, r3, #1
 5295 0024 0B4A     		ldr	r2, .L331+4
 5296 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5297              		.loc 1 3657 5
 5298 0028 0B4B     		ldr	r3, .L331+8
 5299 002a 1B68     		ldr	r3, [r3]
 5300 002c 013B     		subs	r3, r3, #1
 5301 002e 0A4A     		ldr	r2, .L331+8
 5302 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 162


3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5303              		.loc 1 3659 4
 5304 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5305              		.loc 1 3661 4
 5306 0036 7868     		ldr	r0, [r7, #4]
 5307 0038 FFF7FEFF 		bl	prvDeleteTCB
 5308              	.L329:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5309              		.loc 1 3650 39
 5310 003c 064B     		ldr	r3, .L331+8
 5311 003e 1B68     		ldr	r3, [r3]
 5312 0040 002B     		cmp	r3, #0
 5313 0042 E1D1     		bne	.L330
 5314              	.LBE203:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5315              		.loc 1 3665 1
 5316 0044 00BF     		nop
 5317 0046 00BF     		nop
 5318 0048 0837     		adds	r7, r7, #8
 5319              	.LCFI205:
 5320              		.cfi_def_cfa_offset 8
 5321 004a BD46     		mov	sp, r7
 5322              	.LCFI206:
 5323              		.cfi_def_cfa_register 13
 5324              		@ sp needed
 5325 004c 80BD     		pop	{r7, pc}
 5326              	.L332:
 5327 004e 00BF     		.align	2
 5328              	.L331:
 5329 0050 00000000 		.word	xTasksWaitingTermination
 5330 0054 00000000 		.word	uxCurrentNumberOfTasks
 5331 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5332              		.cfi_endproc
 5333              	.LFE44:
 5335              		.section	.text.vTaskGetInfo,"ax",%progbits
 5336              		.align	1
 5337              		.global	vTaskGetInfo
 5338              		.syntax unified
 5339              		.thumb
 5340              		.thumb_func
 5342              	vTaskGetInfo:
 5343              	.LFB45:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5344              		.loc 1 3671 2
 5345              		.cfi_startproc
 5346              		@ args = 0, pretend = 0, frame = 24
 5347              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 163


 5348 0000 80B5     		push	{r7, lr}
 5349              	.LCFI207:
 5350              		.cfi_def_cfa_offset 8
 5351              		.cfi_offset 7, -8
 5352              		.cfi_offset 14, -4
 5353 0002 86B0     		sub	sp, sp, #24
 5354              	.LCFI208:
 5355              		.cfi_def_cfa_offset 32
 5356 0004 00AF     		add	r7, sp, #0
 5357              	.LCFI209:
 5358              		.cfi_def_cfa_register 7
 5359 0006 F860     		str	r0, [r7, #12]
 5360 0008 B960     		str	r1, [r7, #8]
 5361 000a 7A60     		str	r2, [r7, #4]
 5362 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5363              		.loc 1 3675 11
 5364 000e FB68     		ldr	r3, [r7, #12]
 5365 0010 002B     		cmp	r3, #0
 5366 0012 02D1     		bne	.L334
 5367              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5368 0014 2C4B     		ldr	r3, .L343
 5369 0016 1B68     		ldr	r3, [r3]
 5370 0018 00E0     		b	.L335
 5371              	.L334:
 5372              		.loc 1 3675 11 discriminator 2
 5373 001a FB68     		ldr	r3, [r7, #12]
 5374              	.L335:
 5375              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5376 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5377              		.loc 1 3677 25
 5378 001e BB68     		ldr	r3, [r7, #8]
 5379 0020 7A69     		ldr	r2, [r7, #20]
 5380 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5381              		.loc 1 3678 47
 5382 0024 7B69     		ldr	r3, [r7, #20]
 5383 0026 03F13402 		add	r2, r3, #52
 5384              		.loc 1 3678 28
 5385 002a BB68     		ldr	r3, [r7, #8]
 5386 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5387              		.loc 1 3679 42
 5388 002e 7B69     		ldr	r3, [r7, #20]
 5389 0030 DA6A     		ldr	r2, [r3, #44]
 5390              		.loc 1 3679 35
 5391 0032 BB68     		ldr	r3, [r7, #8]
 5392 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5393              		.loc 1 3680 36
 5394 0036 7B69     		ldr	r3, [r7, #20]
 5395 0038 1A6B     		ldr	r2, [r3, #48]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 164


 5396              		.loc 1 3680 29
 5397 003a BB68     		ldr	r3, [r7, #8]
 5398 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5399              		.loc 1 3681 36
 5400 003e 7B69     		ldr	r3, [r7, #20]
 5401 0040 5A6C     		ldr	r2, [r3, #68]
 5402              		.loc 1 3681 29
 5403 0042 BB68     		ldr	r3, [r7, #8]
 5404 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5405              		.loc 1 3685 40
 5406 0046 7B69     		ldr	r3, [r7, #20]
 5407 0048 DA6C     		ldr	r2, [r3, #76]
 5408              		.loc 1 3685 33
 5409 004a BB68     		ldr	r3, [r7, #8]
 5410 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5411              		.loc 1 3699 35
 5412 004e BB68     		ldr	r3, [r7, #8]
 5413 0050 0022     		movs	r2, #0
 5414 0052 9A61     		str	r2, [r3, #24]
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5415              		.loc 1 3706 5
 5416 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5417 0056 052B     		cmp	r3, #5
 5418 0058 1AD0     		beq	.L336
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5419              		.loc 1 3708 14
 5420 005a 1B4B     		ldr	r3, .L343
 5421 005c 1B68     		ldr	r3, [r3]
 5422              		.loc 1 3708 6
 5423 005e 7A69     		ldr	r2, [r7, #20]
 5424 0060 9A42     		cmp	r2, r3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 165


 5425 0062 03D1     		bne	.L337
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5426              		.loc 1 3710 33
 5427 0064 BB68     		ldr	r3, [r7, #8]
 5428 0066 0022     		movs	r2, #0
 5429 0068 1A73     		strb	r2, [r3, #12]
 5430 006a 18E0     		b	.L338
 5431              	.L337:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5432              		.loc 1 3714 33
 5433 006c BB68     		ldr	r3, [r7, #8]
 5434 006e FA78     		ldrb	r2, [r7, #3]
 5435 0070 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5436              		.loc 1 3721 8
 5437 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5438 0074 032B     		cmp	r3, #3
 5439 0076 12D1     		bne	.L338
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5440              		.loc 1 3723 7
 5441 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5442              		.loc 1 3725 12
 5443 007c 7B69     		ldr	r3, [r7, #20]
 5444 007e 9B6A     		ldr	r3, [r3, #40]
 5445              		.loc 1 3725 10
 5446 0080 002B     		cmp	r3, #0
 5447 0082 02D0     		beq	.L339
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5448              		.loc 1 3727 37
 5449 0084 BB68     		ldr	r3, [r7, #8]
 5450 0086 0222     		movs	r2, #2
 5451 0088 1A73     		strb	r2, [r3, #12]
 5452              	.L339:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5453              		.loc 1 3730 16
 5454 008a FFF7FEFF 		bl	xTaskResumeAll
 5455 008e 06E0     		b	.L338
 5456              	.L336:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 166


3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5457              		.loc 1 3738 34
 5458 0090 7869     		ldr	r0, [r7, #20]
 5459 0092 FFF7FEFF 		bl	eTaskGetState
 5460 0096 0346     		mov	r3, r0
 5461 0098 1A46     		mov	r2, r3
 5462              		.loc 1 3738 32 discriminator 1
 5463 009a BB68     		ldr	r3, [r7, #8]
 5464 009c 1A73     		strb	r2, [r3, #12]
 5465              	.L338:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5466              		.loc 1 3743 5
 5467 009e 7B68     		ldr	r3, [r7, #4]
 5468 00a0 002B     		cmp	r3, #0
 5469 00a2 09D0     		beq	.L340
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5470              		.loc 1 3751 89
 5471 00a4 7B69     		ldr	r3, [r7, #20]
 5472 00a6 1B6B     		ldr	r3, [r3, #48]
 5473              		.loc 1 3751 42
 5474 00a8 1846     		mov	r0, r3
 5475 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5476 00ae 0346     		mov	r3, r0
 5477 00b0 1A46     		mov	r2, r3
 5478              		.loc 1 3751 40 discriminator 1
 5479 00b2 BB68     		ldr	r3, [r7, #8]
 5480 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5481              		.loc 1 3759 2
 5482 00b6 02E0     		b	.L342
 5483              	.L340:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5484              		.loc 1 3757 39
 5485 00b8 BB68     		ldr	r3, [r7, #8]
 5486 00ba 0022     		movs	r2, #0
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 167


 5487 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5488              	.L342:
 5489              		.loc 1 3759 2
 5490 00be 00BF     		nop
 5491 00c0 1837     		adds	r7, r7, #24
 5492              	.LCFI210:
 5493              		.cfi_def_cfa_offset 8
 5494 00c2 BD46     		mov	sp, r7
 5495              	.LCFI211:
 5496              		.cfi_def_cfa_register 13
 5497              		@ sp needed
 5498 00c4 80BD     		pop	{r7, pc}
 5499              	.L344:
 5500 00c6 00BF     		.align	2
 5501              	.L343:
 5502 00c8 00000000 		.word	pxCurrentTCB
 5503              		.cfi_endproc
 5504              	.LFE45:
 5506              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5507              		.align	1
 5508              		.syntax unified
 5509              		.thumb
 5510              		.thumb_func
 5512              	prvListTasksWithinSingleList:
 5513              	.LFB46:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5514              		.loc 1 3767 2
 5515              		.cfi_startproc
 5516              		@ args = 0, pretend = 0, frame = 40
 5517              		@ frame_needed = 1, uses_anonymous_args = 0
 5518 0000 80B5     		push	{r7, lr}
 5519              	.LCFI212:
 5520              		.cfi_def_cfa_offset 8
 5521              		.cfi_offset 7, -8
 5522              		.cfi_offset 14, -4
 5523 0002 8AB0     		sub	sp, sp, #40
 5524              	.LCFI213:
 5525              		.cfi_def_cfa_offset 48
 5526 0004 00AF     		add	r7, sp, #0
 5527              	.LCFI214:
 5528              		.cfi_def_cfa_register 7
 5529 0006 F860     		str	r0, [r7, #12]
 5530 0008 B960     		str	r1, [r7, #8]
 5531 000a 1346     		mov	r3, r2
 5532 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5533              		.loc 1 3769 14
 5534 000e 0023     		movs	r3, #0
 5535 0010 7B62     		str	r3, [r7, #36]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 168


3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5536              		.loc 1 3771 7
 5537 0012 BB68     		ldr	r3, [r7, #8]
 5538 0014 1B68     		ldr	r3, [r3]
 5539              		.loc 1 3771 5
 5540 0016 002B     		cmp	r3, #0
 5541 0018 3FD0     		beq	.L346
 5542              	.LBB204:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5543              		.loc 1 3773 4
 5544 001a BB68     		ldr	r3, [r7, #8]
 5545 001c 3B62     		str	r3, [r7, #32]
 5546 001e 3B6A     		ldr	r3, [r7, #32]
 5547 0020 5B68     		ldr	r3, [r3, #4]
 5548 0022 5A68     		ldr	r2, [r3, #4]
 5549 0024 3B6A     		ldr	r3, [r7, #32]
 5550 0026 5A60     		str	r2, [r3, #4]
 5551 0028 3B6A     		ldr	r3, [r7, #32]
 5552 002a 5A68     		ldr	r2, [r3, #4]
 5553 002c 3B6A     		ldr	r3, [r7, #32]
 5554 002e 0833     		adds	r3, r3, #8
 5555 0030 9A42     		cmp	r2, r3
 5556 0032 04D1     		bne	.L347
 5557              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5558 0034 3B6A     		ldr	r3, [r7, #32]
 5559 0036 5B68     		ldr	r3, [r3, #4]
 5560 0038 5A68     		ldr	r2, [r3, #4]
 5561 003a 3B6A     		ldr	r3, [r7, #32]
 5562 003c 5A60     		str	r2, [r3, #4]
 5563              	.L347:
 5564              		.loc 1 3773 4 discriminator 3
 5565 003e 3B6A     		ldr	r3, [r7, #32]
 5566 0040 5B68     		ldr	r3, [r3, #4]
 5567 0042 DB68     		ldr	r3, [r3, #12]
 5568 0044 FB61     		str	r3, [r7, #28]
 5569              	.L349:
 5570              	.LBE204:
 5571              	.LBB205:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5572              		.loc 1 3781 5 is_stmt 1
 5573 0046 BB68     		ldr	r3, [r7, #8]
 5574 0048 BB61     		str	r3, [r7, #24]
 5575 004a BB69     		ldr	r3, [r7, #24]
 5576 004c 5B68     		ldr	r3, [r3, #4]
 5577 004e 5A68     		ldr	r2, [r3, #4]
 5578 0050 BB69     		ldr	r3, [r7, #24]
 5579 0052 5A60     		str	r2, [r3, #4]
 5580 0054 BB69     		ldr	r3, [r7, #24]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 169


 5581 0056 5A68     		ldr	r2, [r3, #4]
 5582 0058 BB69     		ldr	r3, [r7, #24]
 5583 005a 0833     		adds	r3, r3, #8
 5584 005c 9A42     		cmp	r2, r3
 5585 005e 04D1     		bne	.L348
 5586              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5587 0060 BB69     		ldr	r3, [r7, #24]
 5588 0062 5B68     		ldr	r3, [r3, #4]
 5589 0064 5A68     		ldr	r2, [r3, #4]
 5590 0066 BB69     		ldr	r3, [r7, #24]
 5591 0068 5A60     		str	r2, [r3, #4]
 5592              	.L348:
 5593              		.loc 1 3781 5 discriminator 3
 5594 006a BB69     		ldr	r3, [r7, #24]
 5595 006c 5B68     		ldr	r3, [r3, #4]
 5596 006e DB68     		ldr	r3, [r3, #12]
 5597 0070 7B61     		str	r3, [r7, #20]
 5598              	.LBE205:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5599              		.loc 1 3782 67 is_stmt 1
 5600 0072 7A6A     		ldr	r2, [r7, #36]
 5601 0074 1346     		mov	r3, r2
 5602 0076 DB00     		lsls	r3, r3, #3
 5603 0078 1344     		add	r3, r3, r2
 5604 007a 9B00     		lsls	r3, r3, #2
 5605 007c 1A46     		mov	r2, r3
 5606              		.loc 1 3782 5
 5607 007e FB68     		ldr	r3, [r7, #12]
 5608 0080 9918     		adds	r1, r3, r2
 5609 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5610 0084 0122     		movs	r2, #1
 5611 0086 7869     		ldr	r0, [r7, #20]
 5612 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5613              		.loc 1 3783 11
 5614 008c 7B6A     		ldr	r3, [r7, #36]
 5615 008e 0133     		adds	r3, r3, #1
 5616 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5617              		.loc 1 3784 23
 5618 0092 7A69     		ldr	r2, [r7, #20]
 5619 0094 FB69     		ldr	r3, [r7, #28]
 5620 0096 9A42     		cmp	r2, r3
 5621 0098 D5D1     		bne	.L349
 5622              	.L346:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5623              		.loc 1 3791 10
 5624 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5625              		.loc 1 3792 2
 5626 009c 1846     		mov	r0, r3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 170


 5627 009e 2837     		adds	r7, r7, #40
 5628              	.LCFI215:
 5629              		.cfi_def_cfa_offset 8
 5630 00a0 BD46     		mov	sp, r7
 5631              	.LCFI216:
 5632              		.cfi_def_cfa_register 13
 5633              		@ sp needed
 5634 00a2 80BD     		pop	{r7, pc}
 5635              		.cfi_endproc
 5636              	.LFE46:
 5638              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5639              		.align	1
 5640              		.syntax unified
 5641              		.thumb
 5642              		.thumb_func
 5644              	prvTaskCheckFreeStackSpace:
 5645              	.LFB47:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5646              		.loc 1 3800 2
 5647              		.cfi_startproc
 5648              		@ args = 0, pretend = 0, frame = 16
 5649              		@ frame_needed = 1, uses_anonymous_args = 0
 5650              		@ link register save eliminated.
 5651 0000 80B4     		push	{r7}
 5652              	.LCFI217:
 5653              		.cfi_def_cfa_offset 4
 5654              		.cfi_offset 7, -4
 5655 0002 85B0     		sub	sp, sp, #20
 5656              	.LCFI218:
 5657              		.cfi_def_cfa_offset 24
 5658 0004 00AF     		add	r7, sp, #0
 5659              	.LCFI219:
 5660              		.cfi_def_cfa_register 7
 5661 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5662              		.loc 1 3801 11
 5663 0008 0023     		movs	r3, #0
 5664 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5665              		.loc 1 3803 8
 5666 000c 05E0     		b	.L352
 5667              	.L353:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5668              		.loc 1 3805 17
 5669 000e 7B68     		ldr	r3, [r7, #4]
 5670 0010 0133     		adds	r3, r3, #1
 5671 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 171


 5672              		.loc 1 3806 11
 5673 0014 FB68     		ldr	r3, [r7, #12]
 5674 0016 0133     		adds	r3, r3, #1
 5675 0018 FB60     		str	r3, [r7, #12]
 5676              	.L352:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5677              		.loc 1 3803 10
 5678 001a 7B68     		ldr	r3, [r7, #4]
 5679 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5680              		.loc 1 3803 24
 5681 001e A52B     		cmp	r3, #165
 5682 0020 F5D0     		beq	.L353
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5683              		.loc 1 3809 11
 5684 0022 FB68     		ldr	r3, [r7, #12]
 5685 0024 9B08     		lsrs	r3, r3, #2
 5686 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5687              		.loc 1 3811 10
 5688 0028 FB68     		ldr	r3, [r7, #12]
 5689 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5690              		.loc 1 3812 2
 5691 002c 1846     		mov	r0, r3
 5692 002e 1437     		adds	r7, r7, #20
 5693              	.LCFI220:
 5694              		.cfi_def_cfa_offset 4
 5695 0030 BD46     		mov	sp, r7
 5696              	.LCFI221:
 5697              		.cfi_def_cfa_register 13
 5698              		@ sp needed
 5699 0032 5DF8047B 		ldr	r7, [sp], #4
 5700              	.LCFI222:
 5701              		.cfi_restore 7
 5702              		.cfi_def_cfa_offset 0
 5703 0036 7047     		bx	lr
 5704              		.cfi_endproc
 5705              	.LFE47:
 5707              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5708              		.align	1
 5709              		.global	uxTaskGetStackHighWaterMark
 5710              		.syntax unified
 5711              		.thumb
 5712              		.thumb_func
 5714              	uxTaskGetStackHighWaterMark:
 5715              	.LFB48:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 172


3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5716              		.loc 1 3860 2
 5717              		.cfi_startproc
 5718              		@ args = 0, pretend = 0, frame = 24
 5719              		@ frame_needed = 1, uses_anonymous_args = 0
 5720 0000 80B5     		push	{r7, lr}
 5721              	.LCFI223:
 5722              		.cfi_def_cfa_offset 8
 5723              		.cfi_offset 7, -8
 5724              		.cfi_offset 14, -4
 5725 0002 86B0     		sub	sp, sp, #24
 5726              	.LCFI224:
 5727              		.cfi_def_cfa_offset 32
 5728 0004 00AF     		add	r7, sp, #0
 5729              	.LCFI225:
 5730              		.cfi_def_cfa_register 7
 5731 0006 7860     		str	r0, [r7, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 173


3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5732              		.loc 1 3865 11
 5733 0008 7B68     		ldr	r3, [r7, #4]
 5734 000a 002B     		cmp	r3, #0
 5735 000c 02D1     		bne	.L356
 5736              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5737 000e 094B     		ldr	r3, .L359
 5738 0010 1B68     		ldr	r3, [r3]
 5739 0012 00E0     		b	.L357
 5740              	.L356:
 5741              		.loc 1 3865 11 discriminator 2
 5742 0014 7B68     		ldr	r3, [r7, #4]
 5743              	.L357:
 5744              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5745 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5746              		.loc 1 3869 18
 5747 0018 7B69     		ldr	r3, [r7, #20]
 5748 001a 1B6B     		ldr	r3, [r3, #48]
 5749 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5750              		.loc 1 3877 30
 5751 001e 3869     		ldr	r0, [r7, #16]
 5752 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5753 0024 0346     		mov	r3, r0
 5754              		.loc 1 3877 12 discriminator 1
 5755 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5756              		.loc 1 3879 10
 5757 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5758              		.loc 1 3880 2
 5759 002a 1846     		mov	r0, r3
 5760 002c 1837     		adds	r7, r7, #24
 5761              	.LCFI226:
 5762              		.cfi_def_cfa_offset 8
 5763 002e BD46     		mov	sp, r7
 5764              	.LCFI227:
 5765              		.cfi_def_cfa_register 13
 5766              		@ sp needed
 5767 0030 80BD     		pop	{r7, pc}
 5768              	.L360:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 174


 5769 0032 00BF     		.align	2
 5770              	.L359:
 5771 0034 00000000 		.word	pxCurrentTCB
 5772              		.cfi_endproc
 5773              	.LFE48:
 5775              		.section	.text.prvDeleteTCB,"ax",%progbits
 5776              		.align	1
 5777              		.syntax unified
 5778              		.thumb
 5779              		.thumb_func
 5781              	prvDeleteTCB:
 5782              	.LFB49:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5783              		.loc 1 3888 2
 5784              		.cfi_startproc
 5785              		@ args = 0, pretend = 0, frame = 16
 5786              		@ frame_needed = 1, uses_anonymous_args = 0
 5787 0000 80B5     		push	{r7, lr}
 5788              	.LCFI228:
 5789              		.cfi_def_cfa_offset 8
 5790              		.cfi_offset 7, -8
 5791              		.cfi_offset 14, -4
 5792 0002 84B0     		sub	sp, sp, #16
 5793              	.LCFI229:
 5794              		.cfi_def_cfa_offset 24
 5795 0004 00AF     		add	r7, sp, #0
 5796              	.LCFI230:
 5797              		.cfi_def_cfa_register 7
 5798 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 175


3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5799              		.loc 1 3916 13
 5800 0008 7B68     		ldr	r3, [r7, #4]
 5801 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5802              		.loc 1 3916 6
 5803 000e 002B     		cmp	r3, #0
 5804 0010 08D1     		bne	.L362
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5805              		.loc 1 3920 21
 5806 0012 7B68     		ldr	r3, [r7, #4]
 5807 0014 1B6B     		ldr	r3, [r3, #48]
 5808              		.loc 1 3920 5
 5809 0016 1846     		mov	r0, r3
 5810 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5811              		.loc 1 3921 5
 5812 001c 7868     		ldr	r0, [r7, #4]
 5813 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5814              		.loc 1 3938 2
 5815 0022 19E0     		b	.L366
 5816              	.L362:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5817              		.loc 1 3923 18
 5818 0024 7B68     		ldr	r3, [r7, #4]
 5819 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5820              		.loc 1 3923 11
 5821 002a 012B     		cmp	r3, #1
 5822 002c 03D1     		bne	.L364
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5823              		.loc 1 3927 5
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 176


 5824 002e 7868     		ldr	r0, [r7, #4]
 5825 0030 FFF7FEFF 		bl	vPortFree
 5826              		.loc 1 3938 2
 5827 0034 10E0     		b	.L366
 5828              	.L364:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5829              		.loc 1 3933 5
 5830 0036 7B68     		ldr	r3, [r7, #4]
 5831 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5832 003c 022B     		cmp	r3, #2
 5833 003e 0BD0     		beq	.L366
 5834              	.LBB206:
 5835              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5836              		.loc 2 195 2
 5837              		.syntax unified
 5838              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5839 0040 4FF05003 			mov r3, #80												
 5840 0044 83F31188 		msr basepri, r3											
 5841 0048 BFF36F8F 		isb														
 5842 004c BFF34F8F 		dsb														
 5843              	
 5844              	@ 0 "" 2
 5845              		.thumb
 5846              		.syntax unified
 5847 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5848              		.loc 2 203 1
 5849 0052 00BF     		nop
 5850              	.L365:
 5851              	.LBE207:
 5852              	.LBE206:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5853              		.loc 1 3933 5
 5854 0054 00BF     		nop
 5855 0056 FDE7     		b	.L365
 5856              	.L366:
 5857              		.loc 1 3938 2
 5858 0058 00BF     		nop
 5859 005a 1037     		adds	r7, r7, #16
 5860              	.LCFI231:
 5861              		.cfi_def_cfa_offset 8
 5862 005c BD46     		mov	sp, r7
 5863              	.LCFI232:
 5864              		.cfi_def_cfa_register 13
 5865              		@ sp needed
 5866 005e 80BD     		pop	{r7, pc}
 5867              		.cfi_endproc
 5868              	.LFE49:
 5870              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5871              		.align	1
 5872              		.syntax unified
 5873              		.thumb
 5874              		.thumb_func
 5876              	prvResetNextTaskUnblockTime:
 5877              	.LFB50:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 177


3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5878              		.loc 1 3944 1
 5879              		.cfi_startproc
 5880              		@ args = 0, pretend = 0, frame = 8
 5881              		@ frame_needed = 1, uses_anonymous_args = 0
 5882              		@ link register save eliminated.
 5883 0000 80B4     		push	{r7}
 5884              	.LCFI233:
 5885              		.cfi_def_cfa_offset 4
 5886              		.cfi_offset 7, -4
 5887 0002 83B0     		sub	sp, sp, #12
 5888              	.LCFI234:
 5889              		.cfi_def_cfa_offset 16
 5890 0004 00AF     		add	r7, sp, #0
 5891              	.LCFI235:
 5892              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5893              		.loc 1 3947 6
 5894 0006 0C4B     		ldr	r3, .L371
 5895 0008 1B68     		ldr	r3, [r3]
 5896 000a 1B68     		ldr	r3, [r3]
 5897              		.loc 1 3947 4
 5898 000c 002B     		cmp	r3, #0
 5899 000e 04D1     		bne	.L368
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5900              		.loc 1 3953 24
 5901 0010 0A4B     		ldr	r3, .L371+4
 5902 0012 4FF0FF32 		mov	r2, #-1
 5903 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5904              		.loc 1 3964 1
 5905 0018 08E0     		b	.L370
 5906              	.L368:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5907              		.loc 1 3961 15
 5908 001a 074B     		ldr	r3, .L371
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 178


 5909 001c 1B68     		ldr	r3, [r3]
 5910 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5911              		.loc 1 3961 13
 5912 0020 DB68     		ldr	r3, [r3, #12]
 5913 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5914              		.loc 1 3962 26
 5915 0024 7B68     		ldr	r3, [r7, #4]
 5916 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5917              		.loc 1 3962 24
 5918 0028 044A     		ldr	r2, .L371+4
 5919 002a 1360     		str	r3, [r2]
 5920              	.L370:
 5921              		.loc 1 3964 1
 5922 002c 00BF     		nop
 5923 002e 0C37     		adds	r7, r7, #12
 5924              	.LCFI236:
 5925              		.cfi_def_cfa_offset 4
 5926 0030 BD46     		mov	sp, r7
 5927              	.LCFI237:
 5928              		.cfi_def_cfa_register 13
 5929              		@ sp needed
 5930 0032 5DF8047B 		ldr	r7, [sp], #4
 5931              	.LCFI238:
 5932              		.cfi_restore 7
 5933              		.cfi_def_cfa_offset 0
 5934 0036 7047     		bx	lr
 5935              	.L372:
 5936              		.align	2
 5937              	.L371:
 5938 0038 00000000 		.word	pxDelayedTaskList
 5939 003c 00000000 		.word	xNextTaskUnblockTime
 5940              		.cfi_endproc
 5941              	.LFE50:
 5943              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5944              		.align	1
 5945              		.global	xTaskGetCurrentTaskHandle
 5946              		.syntax unified
 5947              		.thumb
 5948              		.thumb_func
 5950              	xTaskGetCurrentTaskHandle:
 5951              	.LFB51:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5952              		.loc 1 3970 2
 5953              		.cfi_startproc
 5954              		@ args = 0, pretend = 0, frame = 8
 5955              		@ frame_needed = 1, uses_anonymous_args = 0
 5956              		@ link register save eliminated.
 5957 0000 80B4     		push	{r7}
 5958              	.LCFI239:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 179


 5959              		.cfi_def_cfa_offset 4
 5960              		.cfi_offset 7, -4
 5961 0002 83B0     		sub	sp, sp, #12
 5962              	.LCFI240:
 5963              		.cfi_def_cfa_offset 16
 5964 0004 00AF     		add	r7, sp, #0
 5965              	.LCFI241:
 5966              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5967              		.loc 1 3976 11
 5968 0006 054B     		ldr	r3, .L375
 5969 0008 1B68     		ldr	r3, [r3]
 5970 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5971              		.loc 1 3978 10
 5972 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5973              		.loc 1 3979 2
 5974 000e 1846     		mov	r0, r3
 5975 0010 0C37     		adds	r7, r7, #12
 5976              	.LCFI242:
 5977              		.cfi_def_cfa_offset 4
 5978 0012 BD46     		mov	sp, r7
 5979              	.LCFI243:
 5980              		.cfi_def_cfa_register 13
 5981              		@ sp needed
 5982 0014 5DF8047B 		ldr	r7, [sp], #4
 5983              	.LCFI244:
 5984              		.cfi_restore 7
 5985              		.cfi_def_cfa_offset 0
 5986 0018 7047     		bx	lr
 5987              	.L376:
 5988 001a 00BF     		.align	2
 5989              	.L375:
 5990 001c 00000000 		.word	pxCurrentTCB
 5991              		.cfi_endproc
 5992              	.LFE51:
 5994              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5995              		.align	1
 5996              		.global	xTaskGetSchedulerState
 5997              		.syntax unified
 5998              		.thumb
 5999              		.thumb_func
 6001              	xTaskGetSchedulerState:
 6002              	.LFB52:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 180


3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6003              		.loc 1 3987 2
 6004              		.cfi_startproc
 6005              		@ args = 0, pretend = 0, frame = 8
 6006              		@ frame_needed = 1, uses_anonymous_args = 0
 6007              		@ link register save eliminated.
 6008 0000 80B4     		push	{r7}
 6009              	.LCFI245:
 6010              		.cfi_def_cfa_offset 4
 6011              		.cfi_offset 7, -4
 6012 0002 83B0     		sub	sp, sp, #12
 6013              	.LCFI246:
 6014              		.cfi_def_cfa_offset 16
 6015 0004 00AF     		add	r7, sp, #0
 6016              	.LCFI247:
 6017              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6018              		.loc 1 3990 25
 6019 0006 0B4B     		ldr	r3, .L382
 6020 0008 1B68     		ldr	r3, [r3]
 6021              		.loc 1 3990 5
 6022 000a 002B     		cmp	r3, #0
 6023 000c 02D1     		bne	.L378
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6024              		.loc 1 3992 12
 6025 000e 0123     		movs	r3, #1
 6026 0010 7B60     		str	r3, [r7, #4]
 6027 0012 08E0     		b	.L379
 6028              	.L378:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6029              		.loc 1 3996 29
 6030 0014 084B     		ldr	r3, .L382+4
 6031 0016 1B68     		ldr	r3, [r3]
 6032              		.loc 1 3996 6
 6033 0018 002B     		cmp	r3, #0
 6034 001a 02D1     		bne	.L380
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6035              		.loc 1 3998 13
 6036 001c 0223     		movs	r3, #2
 6037 001e 7B60     		str	r3, [r7, #4]
 6038 0020 01E0     		b	.L379
 6039              	.L380:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6040              		.loc 1 4002 13
 6041 0022 0023     		movs	r3, #0
 6042 0024 7B60     		str	r3, [r7, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 181


 6043              	.L379:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6044              		.loc 1 4006 10
 6045 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6046              		.loc 1 4007 2
 6047 0028 1846     		mov	r0, r3
 6048 002a 0C37     		adds	r7, r7, #12
 6049              	.LCFI248:
 6050              		.cfi_def_cfa_offset 4
 6051 002c BD46     		mov	sp, r7
 6052              	.LCFI249:
 6053              		.cfi_def_cfa_register 13
 6054              		@ sp needed
 6055 002e 5DF8047B 		ldr	r7, [sp], #4
 6056              	.LCFI250:
 6057              		.cfi_restore 7
 6058              		.cfi_def_cfa_offset 0
 6059 0032 7047     		bx	lr
 6060              	.L383:
 6061              		.align	2
 6062              	.L382:
 6063 0034 00000000 		.word	xSchedulerRunning
 6064 0038 00000000 		.word	uxSchedulerSuspended
 6065              		.cfi_endproc
 6066              	.LFE52:
 6068              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6069              		.align	1
 6070              		.global	xTaskPriorityInherit
 6071              		.syntax unified
 6072              		.thumb
 6073              		.thumb_func
 6075              	xTaskPriorityInherit:
 6076              	.LFB53:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6077              		.loc 1 4015 2
 6078              		.cfi_startproc
 6079              		@ args = 0, pretend = 0, frame = 16
 6080              		@ frame_needed = 1, uses_anonymous_args = 0
 6081 0000 80B5     		push	{r7, lr}
 6082              	.LCFI251:
 6083              		.cfi_def_cfa_offset 8
 6084              		.cfi_offset 7, -8
 6085              		.cfi_offset 14, -4
 6086 0002 84B0     		sub	sp, sp, #16
 6087              	.LCFI252:
 6088              		.cfi_def_cfa_offset 24
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 182


 6089 0004 00AF     		add	r7, sp, #0
 6090              	.LCFI253:
 6091              		.cfi_def_cfa_register 7
 6092 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6093              		.loc 1 4016 16
 6094 0008 7B68     		ldr	r3, [r7, #4]
 6095 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6096              		.loc 1 4017 13
 6097 000c 0023     		movs	r3, #0
 6098 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6099              		.loc 1 4022 5
 6100 0010 7B68     		ldr	r3, [r7, #4]
 6101 0012 002B     		cmp	r3, #0
 6102 0014 51D0     		beq	.L385
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6103              		.loc 1 4027 24
 6104 0016 BB68     		ldr	r3, [r7, #8]
 6105 0018 DA6A     		ldr	r2, [r3, #44]
 6106              		.loc 1 4027 51
 6107 001a 2A4B     		ldr	r3, .L392
 6108 001c 1B68     		ldr	r3, [r3]
 6109 001e DB6A     		ldr	r3, [r3, #44]
 6110              		.loc 1 4027 6
 6111 0020 9A42     		cmp	r2, r3
 6112 0022 41D2     		bcs	.L386
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6113              		.loc 1 4032 11
 6114 0024 BB68     		ldr	r3, [r7, #8]
 6115 0026 9B69     		ldr	r3, [r3, #24]
 6116              		.loc 1 4032 7
 6117 0028 002B     		cmp	r3, #0
 6118 002a 06DB     		blt	.L387
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6119              		.loc 1 4034 6
 6120 002c 254B     		ldr	r3, .L392
 6121 002e 1B68     		ldr	r3, [r3]
 6122 0030 DB6A     		ldr	r3, [r3, #44]
 6123 0032 C3F13802 		rsb	r2, r3, #56
 6124 0036 BB68     		ldr	r3, [r7, #8]
 6125 0038 9A61     		str	r2, [r3, #24]
 6126              	.L387:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 183


4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6127              		.loc 1 4043 9
 6128 003a BB68     		ldr	r3, [r7, #8]
 6129 003c 5969     		ldr	r1, [r3, #20]
 6130 003e BB68     		ldr	r3, [r7, #8]
 6131 0040 DA6A     		ldr	r2, [r3, #44]
 6132 0042 1346     		mov	r3, r2
 6133 0044 9B00     		lsls	r3, r3, #2
 6134 0046 1344     		add	r3, r3, r2
 6135 0048 9B00     		lsls	r3, r3, #2
 6136 004a 1F4A     		ldr	r2, .L392+4
 6137 004c 1344     		add	r3, r3, r2
 6138              		.loc 1 4043 7
 6139 004e 9942     		cmp	r1, r3
 6140 0050 22D1     		bne	.L388
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6141              		.loc 1 4045 10
 6142 0052 BB68     		ldr	r3, [r7, #8]
 6143 0054 0433     		adds	r3, r3, #4
 6144 0056 1846     		mov	r0, r3
 6145 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6146              		.loc 1 4058 49
 6147 005c 194B     		ldr	r3, .L392
 6148 005e 1B68     		ldr	r3, [r3]
 6149 0060 DA6A     		ldr	r2, [r3, #44]
 6150              		.loc 1 4058 35
 6151 0062 BB68     		ldr	r3, [r7, #8]
 6152 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6153              		.loc 1 4059 6
 6154 0066 BB68     		ldr	r3, [r7, #8]
 6155 0068 DA6A     		ldr	r2, [r3, #44]
 6156 006a 184B     		ldr	r3, .L392+8
 6157 006c 1B68     		ldr	r3, [r3]
 6158 006e 9A42     		cmp	r2, r3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 184


 6159 0070 03D9     		bls	.L389
 6160              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6161 0072 BB68     		ldr	r3, [r7, #8]
 6162 0074 DB6A     		ldr	r3, [r3, #44]
 6163 0076 154A     		ldr	r2, .L392+8
 6164 0078 1360     		str	r3, [r2]
 6165              	.L389:
 6166              		.loc 1 4059 6 discriminator 3
 6167 007a BB68     		ldr	r3, [r7, #8]
 6168 007c DA6A     		ldr	r2, [r3, #44]
 6169 007e 1346     		mov	r3, r2
 6170 0080 9B00     		lsls	r3, r3, #2
 6171 0082 1344     		add	r3, r3, r2
 6172 0084 9B00     		lsls	r3, r3, #2
 6173 0086 104A     		ldr	r2, .L392+4
 6174 0088 1A44     		add	r2, r2, r3
 6175 008a BB68     		ldr	r3, [r7, #8]
 6176 008c 0433     		adds	r3, r3, #4
 6177 008e 1946     		mov	r1, r3
 6178 0090 1046     		mov	r0, r2
 6179 0092 FFF7FEFF 		bl	vListInsertEnd
 6180 0096 04E0     		b	.L390
 6181              	.L388:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6182              		.loc 1 4064 49 is_stmt 1
 6183 0098 0A4B     		ldr	r3, .L392
 6184 009a 1B68     		ldr	r3, [r3]
 6185 009c DA6A     		ldr	r2, [r3, #44]
 6186              		.loc 1 4064 35
 6187 009e BB68     		ldr	r3, [r7, #8]
 6188 00a0 DA62     		str	r2, [r3, #44]
 6189              	.L390:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6190              		.loc 1 4070 13
 6191 00a2 0123     		movs	r3, #1
 6192 00a4 FB60     		str	r3, [r7, #12]
 6193 00a6 08E0     		b	.L385
 6194              	.L386:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6195              		.loc 1 4074 25
 6196 00a8 BB68     		ldr	r3, [r7, #8]
 6197 00aa DA6C     		ldr	r2, [r3, #76]
 6198              		.loc 1 4074 56
 6199 00ac 054B     		ldr	r3, .L392
 6200 00ae 1B68     		ldr	r3, [r3]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 185


 6201 00b0 DB6A     		ldr	r3, [r3, #44]
 6202              		.loc 1 4074 7
 6203 00b2 9A42     		cmp	r2, r3
 6204 00b4 01D2     		bcs	.L385
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6205              		.loc 1 4083 14
 6206 00b6 0123     		movs	r3, #1
 6207 00b8 FB60     		str	r3, [r7, #12]
 6208              	.L385:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6209              		.loc 1 4096 10
 6210 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6211              		.loc 1 4097 2
 6212 00bc 1846     		mov	r0, r3
 6213 00be 1037     		adds	r7, r7, #16
 6214              	.LCFI254:
 6215              		.cfi_def_cfa_offset 8
 6216 00c0 BD46     		mov	sp, r7
 6217              	.LCFI255:
 6218              		.cfi_def_cfa_register 13
 6219              		@ sp needed
 6220 00c2 80BD     		pop	{r7, pc}
 6221              	.L393:
 6222              		.align	2
 6223              	.L392:
 6224 00c4 00000000 		.word	pxCurrentTCB
 6225 00c8 00000000 		.word	pxReadyTasksLists
 6226 00cc 00000000 		.word	uxTopReadyPriority
 6227              		.cfi_endproc
 6228              	.LFE53:
 6230              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6231              		.align	1
 6232              		.global	xTaskPriorityDisinherit
 6233              		.syntax unified
 6234              		.thumb
 6235              		.thumb_func
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 186


 6237              	xTaskPriorityDisinherit:
 6238              	.LFB54:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6239              		.loc 1 4105 2
 6240              		.cfi_startproc
 6241              		@ args = 0, pretend = 0, frame = 24
 6242              		@ frame_needed = 1, uses_anonymous_args = 0
 6243 0000 80B5     		push	{r7, lr}
 6244              	.LCFI256:
 6245              		.cfi_def_cfa_offset 8
 6246              		.cfi_offset 7, -8
 6247              		.cfi_offset 14, -4
 6248 0002 86B0     		sub	sp, sp, #24
 6249              	.LCFI257:
 6250              		.cfi_def_cfa_offset 32
 6251 0004 00AF     		add	r7, sp, #0
 6252              	.LCFI258:
 6253              		.cfi_def_cfa_register 7
 6254 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6255              		.loc 1 4106 16
 6256 0008 7B68     		ldr	r3, [r7, #4]
 6257 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6258              		.loc 1 4107 13
 6259 000c 0023     		movs	r3, #0
 6260 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6261              		.loc 1 4109 5
 6262 0010 7B68     		ldr	r3, [r7, #4]
 6263 0012 002B     		cmp	r3, #0
 6264 0014 58D0     		beq	.L395
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6265              		.loc 1 4115 4
 6266 0016 2F4B     		ldr	r3, .L402
 6267 0018 1B68     		ldr	r3, [r3]
 6268 001a 3A69     		ldr	r2, [r7, #16]
 6269 001c 9A42     		cmp	r2, r3
 6270 001e 0BD0     		beq	.L396
 6271              	.LBB208:
 6272              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6273              		.loc 2 195 2
 6274              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 187


 6275              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6276 0020 4FF05003 			mov r3, #80												
 6277 0024 83F31188 		msr basepri, r3											
 6278 0028 BFF36F8F 		isb														
 6279 002c BFF34F8F 		dsb														
 6280              	
 6281              	@ 0 "" 2
 6282              		.thumb
 6283              		.syntax unified
 6284 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6285              		.loc 2 203 1
 6286 0032 00BF     		nop
 6287              	.L397:
 6288              	.LBE209:
 6289              	.LBE208:
 6290              		.loc 1 4115 4
 6291 0034 00BF     		nop
 6292 0036 FDE7     		b	.L397
 6293              	.L396:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6294              		.loc 1 4116 4
 6295 0038 3B69     		ldr	r3, [r7, #16]
 6296 003a 1B6D     		ldr	r3, [r3, #80]
 6297 003c 002B     		cmp	r3, #0
 6298 003e 0BD1     		bne	.L398
 6299              	.LBB210:
 6300              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6301              		.loc 2 195 2
 6302              		.syntax unified
 6303              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6304 0040 4FF05003 			mov r3, #80												
 6305 0044 83F31188 		msr basepri, r3											
 6306 0048 BFF36F8F 		isb														
 6307 004c BFF34F8F 		dsb														
 6308              	
 6309              	@ 0 "" 2
 6310              		.thumb
 6311              		.syntax unified
 6312 0050 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6313              		.loc 2 203 1
 6314 0052 00BF     		nop
 6315              	.L399:
 6316              	.LBE211:
 6317              	.LBE210:
 6318              		.loc 1 4116 4
 6319 0054 00BF     		nop
 6320 0056 FDE7     		b	.L399
 6321              	.L398:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6322              		.loc 1 4117 11
 6323 0058 3B69     		ldr	r3, [r7, #16]
 6324 005a 1B6D     		ldr	r3, [r3, #80]
 6325              		.loc 1 4117 28
 6326 005c 5A1E     		subs	r2, r3, #1
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 188


 6327 005e 3B69     		ldr	r3, [r7, #16]
 6328 0060 1A65     		str	r2, [r3, #80]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6329              		.loc 1 4121 13
 6330 0062 3B69     		ldr	r3, [r7, #16]
 6331 0064 DA6A     		ldr	r2, [r3, #44]
 6332              		.loc 1 4121 34
 6333 0066 3B69     		ldr	r3, [r7, #16]
 6334 0068 DB6C     		ldr	r3, [r3, #76]
 6335              		.loc 1 4121 6
 6336 006a 9A42     		cmp	r2, r3
 6337 006c 2CD0     		beq	.L395
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6338              		.loc 1 4124 14
 6339 006e 3B69     		ldr	r3, [r7, #16]
 6340 0070 1B6D     		ldr	r3, [r3, #80]
 6341              		.loc 1 4124 7
 6342 0072 002B     		cmp	r3, #0
 6343 0074 28D1     		bne	.L395
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6344              		.loc 1 4131 10
 6345 0076 3B69     		ldr	r3, [r7, #16]
 6346 0078 0433     		adds	r3, r3, #4
 6347 007a 1846     		mov	r0, r3
 6348 007c FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6349              		.loc 1 4143 31
 6350 0080 3B69     		ldr	r3, [r7, #16]
 6351 0082 DA6C     		ldr	r2, [r3, #76]
 6352              		.loc 1 4143 24
 6353 0084 3B69     		ldr	r3, [r7, #16]
 6354 0086 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 189


4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6355              		.loc 1 4148 6
 6356 0088 3B69     		ldr	r3, [r7, #16]
 6357 008a DB6A     		ldr	r3, [r3, #44]
 6358 008c C3F13802 		rsb	r2, r3, #56
 6359 0090 3B69     		ldr	r3, [r7, #16]
 6360 0092 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6361              		.loc 1 4149 6
 6362 0094 3B69     		ldr	r3, [r7, #16]
 6363 0096 DA6A     		ldr	r2, [r3, #44]
 6364 0098 0F4B     		ldr	r3, .L402+4
 6365 009a 1B68     		ldr	r3, [r3]
 6366 009c 9A42     		cmp	r2, r3
 6367 009e 03D9     		bls	.L400
 6368              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6369 00a0 3B69     		ldr	r3, [r7, #16]
 6370 00a2 DB6A     		ldr	r3, [r3, #44]
 6371 00a4 0C4A     		ldr	r2, .L402+4
 6372 00a6 1360     		str	r3, [r2]
 6373              	.L400:
 6374              		.loc 1 4149 6 discriminator 3
 6375 00a8 3B69     		ldr	r3, [r7, #16]
 6376 00aa DA6A     		ldr	r2, [r3, #44]
 6377 00ac 1346     		mov	r3, r2
 6378 00ae 9B00     		lsls	r3, r3, #2
 6379 00b0 1344     		add	r3, r3, r2
 6380 00b2 9B00     		lsls	r3, r3, #2
 6381 00b4 094A     		ldr	r2, .L402+8
 6382 00b6 1A44     		add	r2, r2, r3
 6383 00b8 3B69     		ldr	r3, [r7, #16]
 6384 00ba 0433     		adds	r3, r3, #4
 6385 00bc 1946     		mov	r1, r3
 6386 00be 1046     		mov	r0, r2
 6387 00c0 FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6388              		.loc 1 4159 14 is_stmt 1
 6389 00c4 0123     		movs	r3, #1
 6390 00c6 7B61     		str	r3, [r7, #20]
 6391              	.L395:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 190


4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6392              		.loc 1 4176 10
 6393 00c8 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6394              		.loc 1 4177 2
 6395 00ca 1846     		mov	r0, r3
 6396 00cc 1837     		adds	r7, r7, #24
 6397              	.LCFI259:
 6398              		.cfi_def_cfa_offset 8
 6399 00ce BD46     		mov	sp, r7
 6400              	.LCFI260:
 6401              		.cfi_def_cfa_register 13
 6402              		@ sp needed
 6403 00d0 80BD     		pop	{r7, pc}
 6404              	.L403:
 6405 00d2 00BF     		.align	2
 6406              	.L402:
 6407 00d4 00000000 		.word	pxCurrentTCB
 6408 00d8 00000000 		.word	uxTopReadyPriority
 6409 00dc 00000000 		.word	pxReadyTasksLists
 6410              		.cfi_endproc
 6411              	.LFE54:
 6413              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6414              		.align	1
 6415              		.global	vTaskPriorityDisinheritAfterTimeout
 6416              		.syntax unified
 6417              		.thumb
 6418              		.thumb_func
 6420              	vTaskPriorityDisinheritAfterTimeout:
 6421              	.LFB55:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6422              		.loc 1 4185 2
 6423              		.cfi_startproc
 6424              		@ args = 0, pretend = 0, frame = 32
 6425              		@ frame_needed = 1, uses_anonymous_args = 0
 6426 0000 80B5     		push	{r7, lr}
 6427              	.LCFI261:
 6428              		.cfi_def_cfa_offset 8
 6429              		.cfi_offset 7, -8
 6430              		.cfi_offset 14, -4
 6431 0002 88B0     		sub	sp, sp, #32
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 191


 6432              	.LCFI262:
 6433              		.cfi_def_cfa_offset 40
 6434 0004 00AF     		add	r7, sp, #0
 6435              	.LCFI263:
 6436              		.cfi_def_cfa_register 7
 6437 0006 7860     		str	r0, [r7, #4]
 6438 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6439              		.loc 1 4186 16
 6440 000a 7B68     		ldr	r3, [r7, #4]
 6441 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6442              		.loc 1 4188 20
 6443 000e 0123     		movs	r3, #1
 6444 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6445              		.loc 1 4190 5
 6446 0012 7B68     		ldr	r3, [r7, #4]
 6447 0014 002B     		cmp	r3, #0
 6448 0016 6CD0     		beq	.L414
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6449              		.loc 1 4194 4
 6450 0018 BB69     		ldr	r3, [r7, #24]
 6451 001a 1B6D     		ldr	r3, [r3, #80]
 6452 001c 002B     		cmp	r3, #0
 6453 001e 0BD1     		bne	.L406
 6454              	.LBB212:
 6455              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6456              		.loc 2 195 2
 6457              		.syntax unified
 6458              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6459 0020 4FF05003 			mov r3, #80												
 6460 0024 83F31188 		msr basepri, r3											
 6461 0028 BFF36F8F 		isb														
 6462 002c BFF34F8F 		dsb														
 6463              	
 6464              	@ 0 "" 2
 6465              		.thumb
 6466              		.syntax unified
 6467 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6468              		.loc 2 203 1
 6469 0032 00BF     		nop
 6470              	.L407:
 6471              	.LBE213:
 6472              	.LBE212:
 6473              		.loc 1 4194 4
 6474 0034 00BF     		nop
 6475 0036 FDE7     		b	.L407
 6476              	.L406:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 192


4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6477              		.loc 1 4200 13
 6478 0038 BB69     		ldr	r3, [r7, #24]
 6479 003a DB6C     		ldr	r3, [r3, #76]
 6480              		.loc 1 4200 6
 6481 003c 3A68     		ldr	r2, [r7]
 6482 003e 9A42     		cmp	r2, r3
 6483 0040 02D9     		bls	.L408
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6484              		.loc 1 4202 21
 6485 0042 3B68     		ldr	r3, [r7]
 6486 0044 FB61     		str	r3, [r7, #28]
 6487 0046 02E0     		b	.L409
 6488              	.L408:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6489              		.loc 1 4206 21
 6490 0048 BB69     		ldr	r3, [r7, #24]
 6491 004a DB6C     		ldr	r3, [r3, #76]
 6492 004c FB61     		str	r3, [r7, #28]
 6493              	.L409:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6494              		.loc 1 4210 13
 6495 004e BB69     		ldr	r3, [r7, #24]
 6496 0050 DB6A     		ldr	r3, [r3, #44]
 6497              		.loc 1 4210 6
 6498 0052 FA69     		ldr	r2, [r7, #28]
 6499 0054 9A42     		cmp	r2, r3
 6500 0056 4CD0     		beq	.L414
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6501              		.loc 1 4216 14
 6502 0058 BB69     		ldr	r3, [r7, #24]
 6503 005a 1B6D     		ldr	r3, [r3, #80]
 6504              		.loc 1 4216 7
 6505 005c 7A69     		ldr	r2, [r7, #20]
 6506 005e 9A42     		cmp	r2, r3
 6507 0060 47D1     		bne	.L414
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 193


 6508              		.loc 1 4221 6
 6509 0062 264B     		ldr	r3, .L415
 6510 0064 1B68     		ldr	r3, [r3]
 6511 0066 BA69     		ldr	r2, [r7, #24]
 6512 0068 9A42     		cmp	r2, r3
 6513 006a 0BD1     		bne	.L410
 6514              	.LBB214:
 6515              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6516              		.loc 2 195 2
 6517              		.syntax unified
 6518              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6519 006c 4FF05003 			mov r3, #80												
 6520 0070 83F31188 		msr basepri, r3											
 6521 0074 BFF36F8F 		isb														
 6522 0078 BFF34F8F 		dsb														
 6523              	
 6524              	@ 0 "" 2
 6525              		.thumb
 6526              		.syntax unified
 6527 007c BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6528              		.loc 2 203 1
 6529 007e 00BF     		nop
 6530              	.L411:
 6531              	.LBE215:
 6532              	.LBE214:
 6533              		.loc 1 4221 6
 6534 0080 00BF     		nop
 6535 0082 FDE7     		b	.L411
 6536              	.L410:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6537              		.loc 1 4227 28
 6538 0084 BB69     		ldr	r3, [r7, #24]
 6539 0086 DB6A     		ldr	r3, [r3, #44]
 6540 0088 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6541              		.loc 1 4228 24
 6542 008a BB69     		ldr	r3, [r7, #24]
 6543 008c FA69     		ldr	r2, [r7, #28]
 6544 008e DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6545              		.loc 1 4232 12
 6546 0090 BB69     		ldr	r3, [r7, #24]
 6547 0092 9B69     		ldr	r3, [r3, #24]
 6548              		.loc 1 4232 8
 6549 0094 002B     		cmp	r3, #0
 6550 0096 04DB     		blt	.L412
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 194


4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6551              		.loc 1 4234 7
 6552 0098 FB69     		ldr	r3, [r7, #28]
 6553 009a C3F13802 		rsb	r2, r3, #56
 6554 009e BB69     		ldr	r3, [r7, #24]
 6555 00a0 9A61     		str	r2, [r3, #24]
 6556              	.L412:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6557              		.loc 1 4247 10
 6558 00a2 BB69     		ldr	r3, [r7, #24]
 6559 00a4 5969     		ldr	r1, [r3, #20]
 6560 00a6 3A69     		ldr	r2, [r7, #16]
 6561 00a8 1346     		mov	r3, r2
 6562 00aa 9B00     		lsls	r3, r3, #2
 6563 00ac 1344     		add	r3, r3, r2
 6564 00ae 9B00     		lsls	r3, r3, #2
 6565 00b0 134A     		ldr	r2, .L415+4
 6566 00b2 1344     		add	r3, r3, r2
 6567              		.loc 1 4247 8
 6568 00b4 9942     		cmp	r1, r3
 6569 00b6 1CD1     		bne	.L414
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6570              		.loc 1 4249 11
 6571 00b8 BB69     		ldr	r3, [r7, #24]
 6572 00ba 0433     		adds	r3, r3, #4
 6573 00bc 1846     		mov	r0, r3
 6574 00be FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6575              		.loc 1 4261 7
 6576 00c2 BB69     		ldr	r3, [r7, #24]
 6577 00c4 DA6A     		ldr	r2, [r3, #44]
 6578 00c6 0F4B     		ldr	r3, .L415+8
 6579 00c8 1B68     		ldr	r3, [r3]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 195


 6580 00ca 9A42     		cmp	r2, r3
 6581 00cc 03D9     		bls	.L413
 6582              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6583 00ce BB69     		ldr	r3, [r7, #24]
 6584 00d0 DB6A     		ldr	r3, [r3, #44]
 6585 00d2 0C4A     		ldr	r2, .L415+8
 6586 00d4 1360     		str	r3, [r2]
 6587              	.L413:
 6588              		.loc 1 4261 7 discriminator 3
 6589 00d6 BB69     		ldr	r3, [r7, #24]
 6590 00d8 DA6A     		ldr	r2, [r3, #44]
 6591 00da 1346     		mov	r3, r2
 6592 00dc 9B00     		lsls	r3, r3, #2
 6593 00de 1344     		add	r3, r3, r2
 6594 00e0 9B00     		lsls	r3, r3, #2
 6595 00e2 074A     		ldr	r2, .L415+4
 6596 00e4 1A44     		add	r2, r2, r3
 6597 00e6 BB69     		ldr	r3, [r7, #24]
 6598 00e8 0433     		adds	r3, r3, #4
 6599 00ea 1946     		mov	r1, r3
 6600 00ec 1046     		mov	r0, r2
 6601 00ee FFF7FEFF 		bl	vListInsertEnd
 6602              	.L414:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6603              		.loc 1 4282 2 is_stmt 1
 6604 00f2 00BF     		nop
 6605 00f4 2037     		adds	r7, r7, #32
 6606              	.LCFI264:
 6607              		.cfi_def_cfa_offset 8
 6608 00f6 BD46     		mov	sp, r7
 6609              	.LCFI265:
 6610              		.cfi_def_cfa_register 13
 6611              		@ sp needed
 6612 00f8 80BD     		pop	{r7, pc}
 6613              	.L416:
 6614 00fa 00BF     		.align	2
 6615              	.L415:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 196


 6616 00fc 00000000 		.word	pxCurrentTCB
 6617 0100 00000000 		.word	pxReadyTasksLists
 6618 0104 00000000 		.word	uxTopReadyPriority
 6619              		.cfi_endproc
 6620              	.LFE55:
 6622              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6623              		.align	1
 6624              		.global	uxTaskResetEventItemValue
 6625              		.syntax unified
 6626              		.thumb
 6627              		.thumb_func
 6629              	uxTaskResetEventItemValue:
 6630              	.LFB56:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 197


4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 198


4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 199


4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 200


4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 201


4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6631              		.loc 1 4603 1
 6632              		.cfi_startproc
 6633              		@ args = 0, pretend = 0, frame = 8
 6634              		@ frame_needed = 1, uses_anonymous_args = 0
 6635              		@ link register save eliminated.
 6636 0000 80B4     		push	{r7}
 6637              	.LCFI266:
 6638              		.cfi_def_cfa_offset 4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 202


 6639              		.cfi_offset 7, -4
 6640 0002 83B0     		sub	sp, sp, #12
 6641              	.LCFI267:
 6642              		.cfi_def_cfa_offset 16
 6643 0004 00AF     		add	r7, sp, #0
 6644              	.LCFI268:
 6645              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6646              		.loc 1 4606 13
 6647 0006 094B     		ldr	r3, .L419
 6648 0008 1B68     		ldr	r3, [r3]
 6649              		.loc 1 4606 11
 6650 000a 9B69     		ldr	r3, [r3, #24]
 6651 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6652              		.loc 1 4610 2
 6653 000e 074B     		ldr	r3, .L419
 6654 0010 1B68     		ldr	r3, [r3]
 6655 0012 DA6A     		ldr	r2, [r3, #44]
 6656 0014 054B     		ldr	r3, .L419
 6657 0016 1B68     		ldr	r3, [r3]
 6658 0018 C2F13802 		rsb	r2, r2, #56
 6659 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6660              		.loc 1 4612 9
 6661 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6662              		.loc 1 4613 1
 6663 0020 1846     		mov	r0, r3
 6664 0022 0C37     		adds	r7, r7, #12
 6665              	.LCFI269:
 6666              		.cfi_def_cfa_offset 4
 6667 0024 BD46     		mov	sp, r7
 6668              	.LCFI270:
 6669              		.cfi_def_cfa_register 13
 6670              		@ sp needed
 6671 0026 5DF8047B 		ldr	r7, [sp], #4
 6672              	.LCFI271:
 6673              		.cfi_restore 7
 6674              		.cfi_def_cfa_offset 0
 6675 002a 7047     		bx	lr
 6676              	.L420:
 6677              		.align	2
 6678              	.L419:
 6679 002c 00000000 		.word	pxCurrentTCB
 6680              		.cfi_endproc
 6681              	.LFE56:
 6683              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6684              		.align	1
 6685              		.global	pvTaskIncrementMutexHeldCount
 6686              		.syntax unified
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 203


 6687              		.thumb
 6688              		.thumb_func
 6690              	pvTaskIncrementMutexHeldCount:
 6691              	.LFB57:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6692              		.loc 1 4619 2
 6693              		.cfi_startproc
 6694              		@ args = 0, pretend = 0, frame = 0
 6695              		@ frame_needed = 1, uses_anonymous_args = 0
 6696              		@ link register save eliminated.
 6697 0000 80B4     		push	{r7}
 6698              	.LCFI272:
 6699              		.cfi_def_cfa_offset 4
 6700              		.cfi_offset 7, -4
 6701 0002 00AF     		add	r7, sp, #0
 6702              	.LCFI273:
 6703              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6704              		.loc 1 4622 20
 6705 0004 074B     		ldr	r3, .L424
 6706 0006 1B68     		ldr	r3, [r3]
 6707              		.loc 1 4622 5
 6708 0008 002B     		cmp	r3, #0
 6709 000a 04D0     		beq	.L422
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6710              		.loc 1 4624 18
 6711 000c 054B     		ldr	r3, .L424
 6712 000e 1B68     		ldr	r3, [r3]
 6713 0010 1A6D     		ldr	r2, [r3, #80]
 6714              		.loc 1 4624 35
 6715 0012 0132     		adds	r2, r2, #1
 6716 0014 1A65     		str	r2, [r3, #80]
 6717              	.L422:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6718              		.loc 1 4627 10
 6719 0016 034B     		ldr	r3, .L424
 6720 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6721              		.loc 1 4628 2
 6722 001a 1846     		mov	r0, r3
 6723 001c BD46     		mov	sp, r7
 6724              	.LCFI274:
 6725              		.cfi_def_cfa_register 13
 6726              		@ sp needed
 6727 001e 5DF8047B 		ldr	r7, [sp], #4
 6728              	.LCFI275:
 6729              		.cfi_restore 7
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 204


 6730              		.cfi_def_cfa_offset 0
 6731 0022 7047     		bx	lr
 6732              	.L425:
 6733              		.align	2
 6734              	.L424:
 6735 0024 00000000 		.word	pxCurrentTCB
 6736              		.cfi_endproc
 6737              	.LFE57:
 6739              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6740              		.align	1
 6741              		.global	ulTaskNotifyTake
 6742              		.syntax unified
 6743              		.thumb
 6744              		.thumb_func
 6746              	ulTaskNotifyTake:
 6747              	.LFB58:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6748              		.loc 1 4636 2
 6749              		.cfi_startproc
 6750              		@ args = 0, pretend = 0, frame = 16
 6751              		@ frame_needed = 1, uses_anonymous_args = 0
 6752 0000 80B5     		push	{r7, lr}
 6753              	.LCFI276:
 6754              		.cfi_def_cfa_offset 8
 6755              		.cfi_offset 7, -8
 6756              		.cfi_offset 14, -4
 6757 0002 84B0     		sub	sp, sp, #16
 6758              	.LCFI277:
 6759              		.cfi_def_cfa_offset 24
 6760 0004 00AF     		add	r7, sp, #0
 6761              	.LCFI278:
 6762              		.cfi_def_cfa_register 7
 6763 0006 7860     		str	r0, [r7, #4]
 6764 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6765              		.loc 1 4639 3
 6766 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6767              		.loc 1 4642 20
 6768 000e 1E4B     		ldr	r3, .L431
 6769 0010 1B68     		ldr	r3, [r3]
 6770 0012 5B6D     		ldr	r3, [r3, #84]
 6771              		.loc 1 4642 6
 6772 0014 002B     		cmp	r3, #0
 6773 0016 13D1     		bne	.L427
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 205


4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6774              		.loc 1 4645 17
 6775 0018 1B4B     		ldr	r3, .L431
 6776 001a 1B68     		ldr	r3, [r3]
 6777              		.loc 1 4645 33
 6778 001c 0122     		movs	r2, #1
 6779 001e 83F85820 		strb	r2, [r3, #88]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6780              		.loc 1 4647 7
 6781 0022 3B68     		ldr	r3, [r7]
 6782 0024 002B     		cmp	r3, #0
 6783 0026 0BD0     		beq	.L427
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6784              		.loc 1 4649 6
 6785 0028 0121     		movs	r1, #1
 6786 002a 3868     		ldr	r0, [r7]
 6787 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6788              		.loc 1 4656 6
 6789 0030 164B     		ldr	r3, .L431+4
 6790 0032 4FF08052 		mov	r2, #268435456
 6791 0036 1A60     		str	r2, [r3]
 6792              		.syntax unified
 6793              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6794 0038 BFF34F8F 		dsb
 6795              	@ 0 "" 2
 6796              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6797 003c BFF36F8F 		isb
 6798              	@ 0 "" 2
 6799              		.thumb
 6800              		.syntax unified
 6801              	.L427:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6802              		.loc 1 4668 3
 6803 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 206


 6804              		.loc 1 4670 3
 6805 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6806              		.loc 1 4673 27
 6807 0048 0F4B     		ldr	r3, .L431
 6808 004a 1B68     		ldr	r3, [r3]
 6809              		.loc 1 4673 13
 6810 004c 5B6D     		ldr	r3, [r3, #84]
 6811 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6812              		.loc 1 4675 6
 6813 0050 FB68     		ldr	r3, [r7, #12]
 6814 0052 002B     		cmp	r3, #0
 6815 0054 0CD0     		beq	.L428
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6816              		.loc 1 4677 7
 6817 0056 7B68     		ldr	r3, [r7, #4]
 6818 0058 002B     		cmp	r3, #0
 6819 005a 04D0     		beq	.L429
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6820              		.loc 1 4679 18
 6821 005c 0A4B     		ldr	r3, .L431
 6822 005e 1B68     		ldr	r3, [r3]
 6823              		.loc 1 4679 36
 6824 0060 0022     		movs	r2, #0
 6825 0062 5A65     		str	r2, [r3, #84]
 6826 0064 04E0     		b	.L428
 6827              	.L429:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6828              		.loc 1 4683 18
 6829 0066 084B     		ldr	r3, .L431
 6830 0068 1B68     		ldr	r3, [r3]
 6831              		.loc 1 4683 47
 6832 006a FA68     		ldr	r2, [r7, #12]
 6833 006c 013A     		subs	r2, r2, #1
 6834              		.loc 1 4683 36
 6835 006e 5A65     		str	r2, [r3, #84]
 6836              	.L428:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6837              		.loc 1 4691 16
 6838 0070 054B     		ldr	r3, .L431
 6839 0072 1B68     		ldr	r3, [r3]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 207


 6840              		.loc 1 4691 32
 6841 0074 0022     		movs	r2, #0
 6842 0076 83F85820 		strb	r2, [r3, #88]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6843              		.loc 1 4693 3
 6844 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6845              		.loc 1 4695 10
 6846 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6847              		.loc 1 4696 2
 6848 0080 1846     		mov	r0, r3
 6849 0082 1037     		adds	r7, r7, #16
 6850              	.LCFI279:
 6851              		.cfi_def_cfa_offset 8
 6852 0084 BD46     		mov	sp, r7
 6853              	.LCFI280:
 6854              		.cfi_def_cfa_register 13
 6855              		@ sp needed
 6856 0086 80BD     		pop	{r7, pc}
 6857              	.L432:
 6858              		.align	2
 6859              	.L431:
 6860 0088 00000000 		.word	pxCurrentTCB
 6861 008c 04ED00E0 		.word	-536810236
 6862              		.cfi_endproc
 6863              	.LFE58:
 6865              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6866              		.align	1
 6867              		.global	xTaskNotifyWait
 6868              		.syntax unified
 6869              		.thumb
 6870              		.thumb_func
 6872              	xTaskNotifyWait:
 6873              	.LFB59:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6874              		.loc 1 4704 2
 6875              		.cfi_startproc
 6876              		@ args = 0, pretend = 0, frame = 24
 6877              		@ frame_needed = 1, uses_anonymous_args = 0
 6878 0000 80B5     		push	{r7, lr}
 6879              	.LCFI281:
 6880              		.cfi_def_cfa_offset 8
 6881              		.cfi_offset 7, -8
 6882              		.cfi_offset 14, -4
 6883 0002 86B0     		sub	sp, sp, #24
 6884              	.LCFI282:
 6885              		.cfi_def_cfa_offset 32
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 208


 6886 0004 00AF     		add	r7, sp, #0
 6887              	.LCFI283:
 6888              		.cfi_def_cfa_register 7
 6889 0006 F860     		str	r0, [r7, #12]
 6890 0008 B960     		str	r1, [r7, #8]
 6891 000a 7A60     		str	r2, [r7, #4]
 6892 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6893              		.loc 1 4707 3
 6894 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6895              		.loc 1 4710 20
 6896 0012 264B     		ldr	r3, .L439
 6897 0014 1B68     		ldr	r3, [r3]
 6898 0016 93F85830 		ldrb	r3, [r3, #88]
 6899 001a DBB2     		uxtb	r3, r3
 6900              		.loc 1 4710 6
 6901 001c 022B     		cmp	r3, #2
 6902 001e 1AD0     		beq	.L434
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6903              		.loc 1 4715 17
 6904 0020 224B     		ldr	r3, .L439
 6905 0022 1B68     		ldr	r3, [r3]
 6906 0024 596D     		ldr	r1, [r3, #84]
 6907              		.loc 1 4715 38
 6908 0026 FA68     		ldr	r2, [r7, #12]
 6909 0028 D243     		mvns	r2, r2
 6910              		.loc 1 4715 35
 6911 002a 0A40     		ands	r2, r2, r1
 6912 002c 5A65     		str	r2, [r3, #84]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6913              		.loc 1 4718 17
 6914 002e 1F4B     		ldr	r3, .L439
 6915 0030 1B68     		ldr	r3, [r3]
 6916              		.loc 1 4718 33
 6917 0032 0122     		movs	r2, #1
 6918 0034 83F85820 		strb	r2, [r3, #88]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6919              		.loc 1 4720 7
 6920 0038 3B68     		ldr	r3, [r7]
 6921 003a 002B     		cmp	r3, #0
 6922 003c 0BD0     		beq	.L434
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6923              		.loc 1 4722 6
 6924 003e 0121     		movs	r1, #1
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 209


 6925 0040 3868     		ldr	r0, [r7]
 6926 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6927              		.loc 1 4729 6
 6928 0046 1A4B     		ldr	r3, .L439+4
 6929 0048 4FF08052 		mov	r2, #268435456
 6930 004c 1A60     		str	r2, [r3]
 6931              		.syntax unified
 6932              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6933 004e BFF34F8F 		dsb
 6934              	@ 0 "" 2
 6935              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6936 0052 BFF36F8F 		isb
 6937              	@ 0 "" 2
 6938              		.thumb
 6939              		.syntax unified
 6940              	.L434:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6941              		.loc 1 4741 3
 6942 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6943              		.loc 1 4743 3
 6944 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6945              		.loc 1 4747 6
 6946 005e 7B68     		ldr	r3, [r7, #4]
 6947 0060 002B     		cmp	r3, #0
 6948 0062 04D0     		beq	.L435
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6949              		.loc 1 4751 41
 6950 0064 114B     		ldr	r3, .L439
 6951 0066 1B68     		ldr	r3, [r3]
 6952 0068 5A6D     		ldr	r2, [r3, #84]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 210


 6953              		.loc 1 4751 27
 6954 006a 7B68     		ldr	r3, [r7, #4]
 6955 006c 1A60     		str	r2, [r3]
 6956              	.L435:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6957              		.loc 1 4758 20
 6958 006e 0F4B     		ldr	r3, .L439
 6959 0070 1B68     		ldr	r3, [r3]
 6960 0072 93F85830 		ldrb	r3, [r3, #88]
 6961 0076 DBB2     		uxtb	r3, r3
 6962              		.loc 1 4758 6
 6963 0078 022B     		cmp	r3, #2
 6964 007a 02D0     		beq	.L436
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6965              		.loc 1 4761 13
 6966 007c 0023     		movs	r3, #0
 6967 007e 7B61     		str	r3, [r7, #20]
 6968 0080 08E0     		b	.L437
 6969              	.L436:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6970              		.loc 1 4767 17
 6971 0082 0A4B     		ldr	r3, .L439
 6972 0084 1B68     		ldr	r3, [r3]
 6973 0086 596D     		ldr	r1, [r3, #84]
 6974              		.loc 1 4767 38
 6975 0088 BA68     		ldr	r2, [r7, #8]
 6976 008a D243     		mvns	r2, r2
 6977              		.loc 1 4767 35
 6978 008c 0A40     		ands	r2, r2, r1
 6979 008e 5A65     		str	r2, [r3, #84]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6980              		.loc 1 4768 13
 6981 0090 0123     		movs	r3, #1
 6982 0092 7B61     		str	r3, [r7, #20]
 6983              	.L437:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6984              		.loc 1 4771 16
 6985 0094 054B     		ldr	r3, .L439
 6986 0096 1B68     		ldr	r3, [r3]
 6987              		.loc 1 4771 32
 6988 0098 0022     		movs	r2, #0
 6989 009a 83F85820 		strb	r2, [r3, #88]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 211


4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6990              		.loc 1 4773 3
 6991 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6992              		.loc 1 4775 10
 6993 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6994              		.loc 1 4776 2
 6995 00a4 1846     		mov	r0, r3
 6996 00a6 1837     		adds	r7, r7, #24
 6997              	.LCFI284:
 6998              		.cfi_def_cfa_offset 8
 6999 00a8 BD46     		mov	sp, r7
 7000              	.LCFI285:
 7001              		.cfi_def_cfa_register 13
 7002              		@ sp needed
 7003 00aa 80BD     		pop	{r7, pc}
 7004              	.L440:
 7005              		.align	2
 7006              	.L439:
 7007 00ac 00000000 		.word	pxCurrentTCB
 7008 00b0 04ED00E0 		.word	-536810236
 7009              		.cfi_endproc
 7010              	.LFE59:
 7012              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7013              		.align	1
 7014              		.global	xTaskGenericNotify
 7015              		.syntax unified
 7016              		.thumb
 7017              		.thumb_func
 7019              	xTaskGenericNotify:
 7020              	.LFB60:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7021              		.loc 1 4784 2
 7022              		.cfi_startproc
 7023              		@ args = 0, pretend = 0, frame = 40
 7024              		@ frame_needed = 1, uses_anonymous_args = 0
 7025 0000 80B5     		push	{r7, lr}
 7026              	.LCFI286:
 7027              		.cfi_def_cfa_offset 8
 7028              		.cfi_offset 7, -8
 7029              		.cfi_offset 14, -4
 7030 0002 8AB0     		sub	sp, sp, #40
 7031              	.LCFI287:
 7032              		.cfi_def_cfa_offset 48
 7033 0004 00AF     		add	r7, sp, #0
 7034              	.LCFI288:
 7035              		.cfi_def_cfa_register 7
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 212


 7036 0006 F860     		str	r0, [r7, #12]
 7037 0008 B960     		str	r1, [r7, #8]
 7038 000a 3B60     		str	r3, [r7]
 7039 000c 1346     		mov	r3, r2
 7040 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7041              		.loc 1 4786 13
 7042 0010 0123     		movs	r3, #1
 7043 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7044              		.loc 1 4789 3
 7045 0014 FB68     		ldr	r3, [r7, #12]
 7046 0016 002B     		cmp	r3, #0
 7047 0018 0BD1     		bne	.L442
 7048              	.LBB216:
 7049              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7050              		.loc 2 195 2
 7051              		.syntax unified
 7052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7053 001a 4FF05003 			mov r3, #80												
 7054 001e 83F31188 		msr basepri, r3											
 7055 0022 BFF36F8F 		isb														
 7056 0026 BFF34F8F 		dsb														
 7057              	
 7058              	@ 0 "" 2
 7059              		.thumb
 7060              		.syntax unified
 7061 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7062              		.loc 2 203 1
 7063 002c 00BF     		nop
 7064              	.L443:
 7065              	.LBE217:
 7066              	.LBE216:
 7067              		.loc 1 4789 3
 7068 002e 00BF     		nop
 7069 0030 FDE7     		b	.L443
 7070              	.L442:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7071              		.loc 1 4790 9
 7072 0032 FB68     		ldr	r3, [r7, #12]
 7073 0034 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7074              		.loc 1 4792 3
 7075 0036 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7076              		.loc 1 4794 6
 7077 003a 3B68     		ldr	r3, [r7]
 7078 003c 002B     		cmp	r3, #0
 7079 003e 03D0     		beq	.L444
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 213


4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7080              		.loc 1 4796 42
 7081 0040 3B6A     		ldr	r3, [r7, #32]
 7082 0042 5A6D     		ldr	r2, [r3, #84]
 7083              		.loc 1 4796 35
 7084 0044 3B68     		ldr	r3, [r7]
 7085 0046 1A60     		str	r2, [r3]
 7086              	.L444:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7087              		.loc 1 4799 26
 7088 0048 3B6A     		ldr	r3, [r7, #32]
 7089 004a 93F85830 		ldrb	r3, [r3, #88]
 7090 004e FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7091              		.loc 1 4801 25
 7092 0050 3B6A     		ldr	r3, [r7, #32]
 7093 0052 0222     		movs	r2, #2
 7094 0054 83F85820 		strb	r2, [r3, #88]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7095              		.loc 1 4803 4
 7096 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7097 005a 042B     		cmp	r3, #4
 7098 005c 27D8     		bhi	.L445
 7099 005e 01A2     		adr	r2, .L447
 7100 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7101              		.p2align 2
 7102              	.L447:
 7103 0064 D1000000 		.word	.L462+1
 7104 0068 79000000 		.word	.L450+1
 7105 006c 87000000 		.word	.L449+1
 7106 0070 93000000 		.word	.L448+1
 7107 0074 9B000000 		.word	.L446+1
 7108              		.p2align 1
 7109              	.L450:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7110              		.loc 1 4806 11
 7111 0078 3B6A     		ldr	r3, [r7, #32]
 7112 007a 5A6D     		ldr	r2, [r3, #84]
 7113              		.loc 1 4806 29
 7114 007c BB68     		ldr	r3, [r7, #8]
 7115 007e 1A43     		orrs	r2, r2, r3
 7116 0080 3B6A     		ldr	r3, [r7, #32]
 7117 0082 5A65     		str	r2, [r3, #84]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7118              		.loc 1 4807 6
 7119 0084 27E0     		b	.L452
 7120              	.L449:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7121              		.loc 1 4810 13
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 214


 7122 0086 3B6A     		ldr	r3, [r7, #32]
 7123 0088 5B6D     		ldr	r3, [r3, #84]
 7124              		.loc 1 4810 32
 7125 008a 5A1C     		adds	r2, r3, #1
 7126 008c 3B6A     		ldr	r3, [r7, #32]
 7127 008e 5A65     		str	r2, [r3, #84]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7128              		.loc 1 4811 6
 7129 0090 21E0     		b	.L452
 7130              	.L448:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7131              		.loc 1 4814 29
 7132 0092 3B6A     		ldr	r3, [r7, #32]
 7133 0094 BA68     		ldr	r2, [r7, #8]
 7134 0096 5A65     		str	r2, [r3, #84]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7135              		.loc 1 4815 6
 7136 0098 1DE0     		b	.L452
 7137              	.L446:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7138              		.loc 1 4818 8
 7139 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7140 009c 022B     		cmp	r3, #2
 7141 009e 03D0     		beq	.L453
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7142              		.loc 1 4820 30
 7143 00a0 3B6A     		ldr	r3, [r7, #32]
 7144 00a2 BA68     		ldr	r2, [r7, #8]
 7145 00a4 5A65     		str	r2, [r3, #84]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7146              		.loc 1 4827 6
 7147 00a6 16E0     		b	.L452
 7148              	.L453:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7149              		.loc 1 4825 15
 7150 00a8 0023     		movs	r3, #0
 7151 00aa 7B62     		str	r3, [r7, #36]
 7152              		.loc 1 4827 6
 7153 00ac 13E0     		b	.L452
 7154              	.L445:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 215


4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7155              		.loc 1 4838 6
 7156 00ae 3B6A     		ldr	r3, [r7, #32]
 7157 00b0 5B6D     		ldr	r3, [r3, #84]
 7158 00b2 B3F1FF3F 		cmp	r3, #-1
 7159 00b6 0DD0     		beq	.L463
 7160              	.LBB218:
 7161              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7162              		.loc 2 195 2
 7163              		.syntax unified
 7164              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7165 00b8 4FF05003 			mov r3, #80												
 7166 00bc 83F31188 		msr basepri, r3											
 7167 00c0 BFF36F8F 		isb														
 7168 00c4 BFF34F8F 		dsb														
 7169              	
 7170              	@ 0 "" 2
 7171              		.thumb
 7172              		.syntax unified
 7173 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7174              		.loc 2 203 1
 7175 00ca 00BF     		nop
 7176              	.L456:
 7177              	.LBE219:
 7178              	.LBE218:
 7179              		.loc 1 4838 6
 7180 00cc 00BF     		nop
 7181 00ce FDE7     		b	.L456
 7182              	.L462:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7183              		.loc 1 4832 6
 7184 00d0 00BF     		nop
 7185 00d2 00E0     		b	.L452
 7186              	.L463:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7187              		.loc 1 4840 6
 7188 00d4 00BF     		nop
 7189              	.L452:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7190              		.loc 1 4847 6
 7191 00d6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7192 00d8 012B     		cmp	r3, #1
 7193 00da 3BD1     		bne	.L457
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 216


4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7194              		.loc 1 4849 14
 7195 00dc 3B6A     		ldr	r3, [r7, #32]
 7196 00de 0433     		adds	r3, r3, #4
 7197 00e0 1846     		mov	r0, r3
 7198 00e2 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7199              		.loc 1 4850 5
 7200 00e6 3B6A     		ldr	r3, [r7, #32]
 7201 00e8 DA6A     		ldr	r2, [r3, #44]
 7202 00ea 1E4B     		ldr	r3, .L464
 7203 00ec 1B68     		ldr	r3, [r3]
 7204 00ee 9A42     		cmp	r2, r3
 7205 00f0 03D9     		bls	.L458
 7206              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7207 00f2 3B6A     		ldr	r3, [r7, #32]
 7208 00f4 DB6A     		ldr	r3, [r3, #44]
 7209 00f6 1B4A     		ldr	r2, .L464
 7210 00f8 1360     		str	r3, [r2]
 7211              	.L458:
 7212              		.loc 1 4850 5 discriminator 3
 7213 00fa 3B6A     		ldr	r3, [r7, #32]
 7214 00fc DA6A     		ldr	r2, [r3, #44]
 7215 00fe 1346     		mov	r3, r2
 7216 0100 9B00     		lsls	r3, r3, #2
 7217 0102 1344     		add	r3, r3, r2
 7218 0104 9B00     		lsls	r3, r3, #2
 7219 0106 184A     		ldr	r2, .L464+4
 7220 0108 1A44     		add	r2, r2, r3
 7221 010a 3B6A     		ldr	r3, [r7, #32]
 7222 010c 0433     		adds	r3, r3, #4
 7223 010e 1946     		mov	r1, r3
 7224 0110 1046     		mov	r0, r2
 7225 0112 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7226              		.loc 1 4853 5 is_stmt 1
 7227 0116 3B6A     		ldr	r3, [r7, #32]
 7228 0118 9B6A     		ldr	r3, [r3, #40]
 7229 011a 002B     		cmp	r3, #0
 7230 011c 0BD0     		beq	.L459
 7231              	.LBB220:
 7232              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7233              		.loc 2 195 2
 7234              		.syntax unified
 7235              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7236 011e 4FF05003 			mov r3, #80												
 7237 0122 83F31188 		msr basepri, r3											
 7238 0126 BFF36F8F 		isb														
 7239 012a BFF34F8F 		dsb														
 7240              	
 7241              	@ 0 "" 2
 7242              		.thumb
 7243              		.syntax unified
 7244 012e 3B61     		str	r3, [r7, #16]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 217


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7245              		.loc 2 203 1
 7246 0130 00BF     		nop
 7247              	.L460:
 7248              	.LBE221:
 7249              	.LBE220:
 7250              		.loc 1 4853 5
 7251 0132 00BF     		nop
 7252 0134 FDE7     		b	.L460
 7253              	.L459:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7254              		.loc 1 4871 14
 7255 0136 3B6A     		ldr	r3, [r7, #32]
 7256 0138 DA6A     		ldr	r2, [r3, #44]
 7257              		.loc 1 4871 41
 7258 013a 0C4B     		ldr	r3, .L464+8
 7259 013c 1B68     		ldr	r3, [r3]
 7260 013e DB6A     		ldr	r3, [r3, #44]
 7261              		.loc 1 4871 7
 7262 0140 9A42     		cmp	r2, r3
 7263 0142 07D9     		bls	.L457
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7264              		.loc 1 4875 6
 7265 0144 0A4B     		ldr	r3, .L464+12
 7266 0146 4FF08052 		mov	r2, #268435456
 7267 014a 1A60     		str	r2, [r3]
 7268              		.syntax unified
 7269              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7270 014c BFF34F8F 		dsb
 7271              	@ 0 "" 2
 7272              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7273 0150 BFF36F8F 		isb
 7274              	@ 0 "" 2
 7275              		.thumb
 7276              		.syntax unified
 7277              	.L457:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 218


4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7278              		.loc 1 4887 3
 7279 0154 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7280              		.loc 1 4889 10
 7281 0158 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7282              		.loc 1 4890 2
 7283 015a 1846     		mov	r0, r3
 7284 015c 2837     		adds	r7, r7, #40
 7285              	.LCFI289:
 7286              		.cfi_def_cfa_offset 8
 7287 015e BD46     		mov	sp, r7
 7288              	.LCFI290:
 7289              		.cfi_def_cfa_register 13
 7290              		@ sp needed
 7291 0160 80BD     		pop	{r7, pc}
 7292              	.L465:
 7293 0162 00BF     		.align	2
 7294              	.L464:
 7295 0164 00000000 		.word	uxTopReadyPriority
 7296 0168 00000000 		.word	pxReadyTasksLists
 7297 016c 00000000 		.word	pxCurrentTCB
 7298 0170 04ED00E0 		.word	-536810236
 7299              		.cfi_endproc
 7300              	.LFE60:
 7302              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7303              		.align	1
 7304              		.global	xTaskGenericNotifyFromISR
 7305              		.syntax unified
 7306              		.thumb
 7307              		.thumb_func
 7309              	xTaskGenericNotifyFromISR:
 7310              	.LFB61:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7311              		.loc 1 4898 2
 7312              		.cfi_startproc
 7313              		@ args = 4, pretend = 0, frame = 56
 7314              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 219


 7315 0000 80B5     		push	{r7, lr}
 7316              	.LCFI291:
 7317              		.cfi_def_cfa_offset 8
 7318              		.cfi_offset 7, -8
 7319              		.cfi_offset 14, -4
 7320 0002 8EB0     		sub	sp, sp, #56
 7321              	.LCFI292:
 7322              		.cfi_def_cfa_offset 64
 7323 0004 00AF     		add	r7, sp, #0
 7324              	.LCFI293:
 7325              		.cfi_def_cfa_register 7
 7326 0006 F860     		str	r0, [r7, #12]
 7327 0008 B960     		str	r1, [r7, #8]
 7328 000a 3B60     		str	r3, [r7]
 7329 000c 1346     		mov	r3, r2
 7330 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7331              		.loc 1 4901 13
 7332 0010 0123     		movs	r3, #1
 7333 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7334              		.loc 1 4904 3
 7335 0014 FB68     		ldr	r3, [r7, #12]
 7336 0016 002B     		cmp	r3, #0
 7337 0018 0BD1     		bne	.L467
 7338              	.LBB222:
 7339              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7340              		.loc 2 195 2
 7341              		.syntax unified
 7342              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7343 001a 4FF05003 			mov r3, #80												
 7344 001e 83F31188 		msr basepri, r3											
 7345 0022 BFF36F8F 		isb														
 7346 0026 BFF34F8F 		dsb														
 7347              	
 7348              	@ 0 "" 2
 7349              		.thumb
 7350              		.syntax unified
 7351 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7352              		.loc 2 203 1
 7353 002c 00BF     		nop
 7354              	.L468:
 7355              	.LBE223:
 7356              	.LBE222:
 7357              		.loc 1 4904 3
 7358 002e 00BF     		nop
 7359 0030 FDE7     		b	.L468
 7360              	.L467:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 220


4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7361              		.loc 1 4922 3
 7362 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7363              		.loc 1 4924 9
 7364 0036 FB68     		ldr	r3, [r7, #12]
 7365 0038 3B63     		str	r3, [r7, #48]
 7366              	.LBB224:
 7367              	.LBB225:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7368              		.loc 2 211 2
 7369              		.syntax unified
 7370              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7371 003a EFF31182 			mrs r2, basepri											
 7372 003e 4FF05003 		mov r3, #80												
 7373 0042 83F31188 		msr basepri, r3											
 7374 0046 BFF36F8F 		isb														
 7375 004a BFF34F8F 		dsb														
 7376              	
 7377              	@ 0 "" 2
 7378              		.thumb
 7379              		.syntax unified
 7380 004e 3A62     		str	r2, [r7, #32]
 7381 0050 FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7382              		.loc 2 223 9
 7383 0052 3B6A     		ldr	r3, [r7, #32]
 7384              	.LBE225:
 7385              	.LBE224:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7386              		.loc 1 4926 28
 7387 0054 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7388              		.loc 1 4928 6
 7389 0056 3B68     		ldr	r3, [r7]
 7390 0058 002B     		cmp	r3, #0
 7391 005a 03D0     		beq	.L470
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7392              		.loc 1 4930 42
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 221


 7393 005c 3B6B     		ldr	r3, [r7, #48]
 7394 005e 5A6D     		ldr	r2, [r3, #84]
 7395              		.loc 1 4930 35
 7396 0060 3B68     		ldr	r3, [r7]
 7397 0062 1A60     		str	r2, [r3]
 7398              	.L470:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7399              		.loc 1 4933 26
 7400 0064 3B6B     		ldr	r3, [r7, #48]
 7401 0066 93F85830 		ldrb	r3, [r3, #88]
 7402 006a 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7403              		.loc 1 4934 25
 7404 006e 3B6B     		ldr	r3, [r7, #48]
 7405 0070 0222     		movs	r2, #2
 7406 0072 83F85820 		strb	r2, [r3, #88]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7407              		.loc 1 4936 4
 7408 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7409 0078 042B     		cmp	r3, #4
 7410 007a 29D8     		bhi	.L471
 7411 007c 01A2     		adr	r2, .L473
 7412 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7413 0082 00BF     		.p2align 2
 7414              	.L473:
 7415 0084 F3000000 		.word	.L491+1
 7416 0088 99000000 		.word	.L476+1
 7417 008c A7000000 		.word	.L475+1
 7418 0090 B3000000 		.word	.L474+1
 7419 0094 BB000000 		.word	.L472+1
 7420              		.p2align 1
 7421              	.L476:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7422              		.loc 1 4939 11
 7423 0098 3B6B     		ldr	r3, [r7, #48]
 7424 009a 5A6D     		ldr	r2, [r3, #84]
 7425              		.loc 1 4939 29
 7426 009c BB68     		ldr	r3, [r7, #8]
 7427 009e 1A43     		orrs	r2, r2, r3
 7428 00a0 3B6B     		ldr	r3, [r7, #48]
 7429 00a2 5A65     		str	r2, [r3, #84]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7430              		.loc 1 4940 6
 7431 00a4 28E0     		b	.L478
 7432              	.L475:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7433              		.loc 1 4943 13
 7434 00a6 3B6B     		ldr	r3, [r7, #48]
 7435 00a8 5B6D     		ldr	r3, [r3, #84]
 7436              		.loc 1 4943 32
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 222


 7437 00aa 5A1C     		adds	r2, r3, #1
 7438 00ac 3B6B     		ldr	r3, [r7, #48]
 7439 00ae 5A65     		str	r2, [r3, #84]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7440              		.loc 1 4944 6
 7441 00b0 22E0     		b	.L478
 7442              	.L474:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7443              		.loc 1 4947 29
 7444 00b2 3B6B     		ldr	r3, [r7, #48]
 7445 00b4 BA68     		ldr	r2, [r7, #8]
 7446 00b6 5A65     		str	r2, [r3, #84]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7447              		.loc 1 4948 6
 7448 00b8 1EE0     		b	.L478
 7449              	.L472:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7450              		.loc 1 4951 8
 7451 00ba 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7452 00be 022B     		cmp	r3, #2
 7453 00c0 03D0     		beq	.L479
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7454              		.loc 1 4953 30
 7455 00c2 3B6B     		ldr	r3, [r7, #48]
 7456 00c4 BA68     		ldr	r2, [r7, #8]
 7457 00c6 5A65     		str	r2, [r3, #84]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7458              		.loc 1 4960 6
 7459 00c8 16E0     		b	.L478
 7460              	.L479:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7461              		.loc 1 4958 15
 7462 00ca 0023     		movs	r3, #0
 7463 00cc 7B63     		str	r3, [r7, #52]
 7464              		.loc 1 4960 6
 7465 00ce 13E0     		b	.L478
 7466              	.L471:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 223


4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7467              		.loc 1 4971 6
 7468 00d0 3B6B     		ldr	r3, [r7, #48]
 7469 00d2 5B6D     		ldr	r3, [r3, #84]
 7470 00d4 B3F1FF3F 		cmp	r3, #-1
 7471 00d8 0DD0     		beq	.L492
 7472              	.LBB226:
 7473              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7474              		.loc 2 195 2
 7475              		.syntax unified
 7476              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7477 00da 4FF05003 			mov r3, #80												
 7478 00de 83F31188 		msr basepri, r3											
 7479 00e2 BFF36F8F 		isb														
 7480 00e6 BFF34F8F 		dsb														
 7481              	
 7482              	@ 0 "" 2
 7483              		.thumb
 7484              		.syntax unified
 7485 00ea BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7486              		.loc 2 203 1
 7487 00ec 00BF     		nop
 7488              	.L482:
 7489              	.LBE227:
 7490              	.LBE226:
 7491              		.loc 1 4971 6
 7492 00ee 00BF     		nop
 7493 00f0 FDE7     		b	.L482
 7494              	.L491:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7495              		.loc 1 4965 6
 7496 00f2 00BF     		nop
 7497 00f4 00E0     		b	.L478
 7498              	.L492:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7499              		.loc 1 4972 6
 7500 00f6 00BF     		nop
 7501              	.L478:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7502              		.loc 1 4979 6
 7503 00f8 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7504 00fc 012B     		cmp	r3, #1
 7505 00fe 47D1     		bne	.L483
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7506              		.loc 1 4982 5
 7507 0100 3B6B     		ldr	r3, [r7, #48]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 224


 7508 0102 9B6A     		ldr	r3, [r3, #40]
 7509 0104 002B     		cmp	r3, #0
 7510 0106 0BD0     		beq	.L484
 7511              	.LBB228:
 7512              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7513              		.loc 2 195 2
 7514              		.syntax unified
 7515              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7516 0108 4FF05003 			mov r3, #80												
 7517 010c 83F31188 		msr basepri, r3											
 7518 0110 BFF36F8F 		isb														
 7519 0114 BFF34F8F 		dsb														
 7520              	
 7521              	@ 0 "" 2
 7522              		.thumb
 7523              		.syntax unified
 7524 0118 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7525              		.loc 2 203 1
 7526 011a 00BF     		nop
 7527              	.L485:
 7528              	.LBE229:
 7529              	.LBE228:
 7530              		.loc 1 4982 5
 7531 011c 00BF     		nop
 7532 011e FDE7     		b	.L485
 7533              	.L484:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7534              		.loc 1 4984 30
 7535 0120 214B     		ldr	r3, .L493
 7536 0122 1B68     		ldr	r3, [r3]
 7537              		.loc 1 4984 7
 7538 0124 002B     		cmp	r3, #0
 7539 0126 1DD1     		bne	.L486
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7540              		.loc 1 4986 15
 7541 0128 3B6B     		ldr	r3, [r7, #48]
 7542 012a 0433     		adds	r3, r3, #4
 7543 012c 1846     		mov	r0, r3
 7544 012e FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7545              		.loc 1 4987 6
 7546 0132 3B6B     		ldr	r3, [r7, #48]
 7547 0134 DA6A     		ldr	r2, [r3, #44]
 7548 0136 1D4B     		ldr	r3, .L493+4
 7549 0138 1B68     		ldr	r3, [r3]
 7550 013a 9A42     		cmp	r2, r3
 7551 013c 03D9     		bls	.L487
 7552              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7553 013e 3B6B     		ldr	r3, [r7, #48]
 7554 0140 DB6A     		ldr	r3, [r3, #44]
 7555 0142 1A4A     		ldr	r2, .L493+4
 7556 0144 1360     		str	r3, [r2]
 7557              	.L487:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 225


 7558              		.loc 1 4987 6 discriminator 3
 7559 0146 3B6B     		ldr	r3, [r7, #48]
 7560 0148 DA6A     		ldr	r2, [r3, #44]
 7561 014a 1346     		mov	r3, r2
 7562 014c 9B00     		lsls	r3, r3, #2
 7563 014e 1344     		add	r3, r3, r2
 7564 0150 9B00     		lsls	r3, r3, #2
 7565 0152 174A     		ldr	r2, .L493+8
 7566 0154 1A44     		add	r2, r2, r3
 7567 0156 3B6B     		ldr	r3, [r7, #48]
 7568 0158 0433     		adds	r3, r3, #4
 7569 015a 1946     		mov	r1, r3
 7570 015c 1046     		mov	r0, r2
 7571 015e FFF7FEFF 		bl	vListInsertEnd
 7572 0162 05E0     		b	.L488
 7573              	.L486:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7574              		.loc 1 4993 6 is_stmt 1
 7575 0164 3B6B     		ldr	r3, [r7, #48]
 7576 0166 1833     		adds	r3, r3, #24
 7577 0168 1946     		mov	r1, r3
 7578 016a 1248     		ldr	r0, .L493+12
 7579 016c FFF7FEFF 		bl	vListInsertEnd
 7580              	.L488:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7581              		.loc 1 4996 14
 7582 0170 3B6B     		ldr	r3, [r7, #48]
 7583 0172 DA6A     		ldr	r2, [r3, #44]
 7584              		.loc 1 4996 41
 7585 0174 104B     		ldr	r3, .L493+16
 7586 0176 1B68     		ldr	r3, [r3]
 7587 0178 DB6A     		ldr	r3, [r3, #44]
 7588              		.loc 1 4996 7
 7589 017a 9A42     		cmp	r2, r3
 7590 017c 08D9     		bls	.L483
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7591              		.loc 1 5000 8
 7592 017e 3B6C     		ldr	r3, [r7, #64]
 7593 0180 002B     		cmp	r3, #0
 7594 0182 02D0     		beq	.L489
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7595              		.loc 1 5002 34
 7596 0184 3B6C     		ldr	r3, [r7, #64]
 7597 0186 0122     		movs	r2, #1
 7598 0188 1A60     		str	r2, [r3]
 7599              	.L489:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 226


5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7600              		.loc 1 5008 20
 7601 018a 0C4B     		ldr	r3, .L493+20
 7602 018c 0122     		movs	r2, #1
 7603 018e 1A60     		str	r2, [r3]
 7604              	.L483:
 7605 0190 FB6A     		ldr	r3, [r7, #44]
 7606 0192 3B61     		str	r3, [r7, #16]
 7607              	.LBB230:
 7608              	.LBB231:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7609              		.loc 2 229 2
 7610 0194 3B69     		ldr	r3, [r7, #16]
 7611              		.syntax unified
 7612              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7613 0196 83F31188 			msr basepri, r3	
 7614              	@ 0 "" 2
 7615              		.loc 2 233 1
 7616              		.thumb
 7617              		.syntax unified
 7618 019a 00BF     		nop
 7619              	.LBE231:
 7620              	.LBE230:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7621              		.loc 1 5018 10
 7622 019c 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7623              		.loc 1 5019 2
 7624 019e 1846     		mov	r0, r3
 7625 01a0 3837     		adds	r7, r7, #56
 7626              	.LCFI294:
 7627              		.cfi_def_cfa_offset 8
 7628 01a2 BD46     		mov	sp, r7
 7629              	.LCFI295:
 7630              		.cfi_def_cfa_register 13
 7631              		@ sp needed
 7632 01a4 80BD     		pop	{r7, pc}
 7633              	.L494:
 7634 01a6 00BF     		.align	2
 7635              	.L493:
 7636 01a8 00000000 		.word	uxSchedulerSuspended
 7637 01ac 00000000 		.word	uxTopReadyPriority
 7638 01b0 00000000 		.word	pxReadyTasksLists
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 227


 7639 01b4 00000000 		.word	xPendingReadyList
 7640 01b8 00000000 		.word	pxCurrentTCB
 7641 01bc 00000000 		.word	xYieldPending
 7642              		.cfi_endproc
 7643              	.LFE61:
 7645              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7646              		.align	1
 7647              		.global	vTaskNotifyGiveFromISR
 7648              		.syntax unified
 7649              		.thumb
 7650              		.thumb_func
 7652              	vTaskNotifyGiveFromISR:
 7653              	.LFB62:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7654              		.loc 1 5027 2
 7655              		.cfi_startproc
 7656              		@ args = 0, pretend = 0, frame = 40
 7657              		@ frame_needed = 1, uses_anonymous_args = 0
 7658 0000 80B5     		push	{r7, lr}
 7659              	.LCFI296:
 7660              		.cfi_def_cfa_offset 8
 7661              		.cfi_offset 7, -8
 7662              		.cfi_offset 14, -4
 7663 0002 8AB0     		sub	sp, sp, #40
 7664              	.LCFI297:
 7665              		.cfi_def_cfa_offset 48
 7666 0004 00AF     		add	r7, sp, #0
 7667              	.LCFI298:
 7668              		.cfi_def_cfa_register 7
 7669 0006 7860     		str	r0, [r7, #4]
 7670 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7671              		.loc 1 5032 3
 7672 000a 7B68     		ldr	r3, [r7, #4]
 7673 000c 002B     		cmp	r3, #0
 7674 000e 0BD1     		bne	.L496
 7675              	.LBB232:
 7676              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7677              		.loc 2 195 2
 7678              		.syntax unified
 7679              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7680 0010 4FF05003 			mov r3, #80												
 7681 0014 83F31188 		msr basepri, r3											
 7682 0018 BFF36F8F 		isb														
 7683 001c BFF34F8F 		dsb														
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 228


 7684              	
 7685              	@ 0 "" 2
 7686              		.thumb
 7687              		.syntax unified
 7688 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7689              		.loc 2 203 1
 7690 0022 00BF     		nop
 7691              	.L497:
 7692              	.LBE233:
 7693              	.LBE232:
 7694              		.loc 1 5032 3
 7695 0024 00BF     		nop
 7696 0026 FDE7     		b	.L497
 7697              	.L496:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7698              		.loc 1 5050 3
 7699 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7700              		.loc 1 5052 9
 7701 002c 7B68     		ldr	r3, [r7, #4]
 7702 002e 7B62     		str	r3, [r7, #36]
 7703              	.LBB234:
 7704              	.LBB235:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7705              		.loc 2 211 2
 7706              		.syntax unified
 7707              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7708 0030 EFF31182 			mrs r2, basepri											
 7709 0034 4FF05003 		mov r3, #80												
 7710 0038 83F31188 		msr basepri, r3											
 7711 003c BFF36F8F 		isb														
 7712 0040 BFF34F8F 		dsb														
 7713              	
 7714              	@ 0 "" 2
 7715              		.thumb
 7716              		.syntax unified
 7717 0044 7A61     		str	r2, [r7, #20]
 7718 0046 3B61     		str	r3, [r7, #16]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 229


 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7719              		.loc 2 223 9
 7720 0048 7B69     		ldr	r3, [r7, #20]
 7721              	.LBE235:
 7722              	.LBE234:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7723              		.loc 1 5054 28
 7724 004a 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7725              		.loc 1 5056 26
 7726 004c 7B6A     		ldr	r3, [r7, #36]
 7727 004e 93F85830 		ldrb	r3, [r3, #88]
 7728 0052 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7729              		.loc 1 5057 25
 7730 0054 7B6A     		ldr	r3, [r7, #36]
 7731 0056 0222     		movs	r2, #2
 7732 0058 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7733              		.loc 1 5061 11
 7734 005c 7B6A     		ldr	r3, [r7, #36]
 7735 005e 5B6D     		ldr	r3, [r3, #84]
 7736              		.loc 1 5061 30
 7737 0060 5A1C     		adds	r2, r3, #1
 7738 0062 7B6A     		ldr	r3, [r7, #36]
 7739 0064 5A65     		str	r2, [r3, #84]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7740              		.loc 1 5067 6
 7741 0066 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7742 0068 012B     		cmp	r3, #1
 7743 006a 47D1     		bne	.L499
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7744              		.loc 1 5070 5
 7745 006c 7B6A     		ldr	r3, [r7, #36]
 7746 006e 9B6A     		ldr	r3, [r3, #40]
 7747 0070 002B     		cmp	r3, #0
 7748 0072 0BD0     		beq	.L500
 7749              	.LBB236:
 7750              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7751              		.loc 2 195 2
 7752              		.syntax unified
 7753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7754 0074 4FF05003 			mov r3, #80												
 7755 0078 83F31188 		msr basepri, r3											
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 230


 7756 007c BFF36F8F 		isb														
 7757 0080 BFF34F8F 		dsb														
 7758              	
 7759              	@ 0 "" 2
 7760              		.thumb
 7761              		.syntax unified
 7762 0084 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7763              		.loc 2 203 1
 7764 0086 00BF     		nop
 7765              	.L501:
 7766              	.LBE237:
 7767              	.LBE236:
 7768              		.loc 1 5070 5
 7769 0088 00BF     		nop
 7770 008a FDE7     		b	.L501
 7771              	.L500:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7772              		.loc 1 5072 30
 7773 008c 204B     		ldr	r3, .L506
 7774 008e 1B68     		ldr	r3, [r3]
 7775              		.loc 1 5072 7
 7776 0090 002B     		cmp	r3, #0
 7777 0092 1DD1     		bne	.L502
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7778              		.loc 1 5074 15
 7779 0094 7B6A     		ldr	r3, [r7, #36]
 7780 0096 0433     		adds	r3, r3, #4
 7781 0098 1846     		mov	r0, r3
 7782 009a FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7783              		.loc 1 5075 6
 7784 009e 7B6A     		ldr	r3, [r7, #36]
 7785 00a0 DA6A     		ldr	r2, [r3, #44]
 7786 00a2 1C4B     		ldr	r3, .L506+4
 7787 00a4 1B68     		ldr	r3, [r3]
 7788 00a6 9A42     		cmp	r2, r3
 7789 00a8 03D9     		bls	.L503
 7790              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7791 00aa 7B6A     		ldr	r3, [r7, #36]
 7792 00ac DB6A     		ldr	r3, [r3, #44]
 7793 00ae 194A     		ldr	r2, .L506+4
 7794 00b0 1360     		str	r3, [r2]
 7795              	.L503:
 7796              		.loc 1 5075 6 discriminator 3
 7797 00b2 7B6A     		ldr	r3, [r7, #36]
 7798 00b4 DA6A     		ldr	r2, [r3, #44]
 7799 00b6 1346     		mov	r3, r2
 7800 00b8 9B00     		lsls	r3, r3, #2
 7801 00ba 1344     		add	r3, r3, r2
 7802 00bc 9B00     		lsls	r3, r3, #2
 7803 00be 164A     		ldr	r2, .L506+8
 7804 00c0 1A44     		add	r2, r2, r3
 7805 00c2 7B6A     		ldr	r3, [r7, #36]
 7806 00c4 0433     		adds	r3, r3, #4
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 231


 7807 00c6 1946     		mov	r1, r3
 7808 00c8 1046     		mov	r0, r2
 7809 00ca FFF7FEFF 		bl	vListInsertEnd
 7810 00ce 05E0     		b	.L504
 7811              	.L502:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7812              		.loc 1 5081 6 is_stmt 1
 7813 00d0 7B6A     		ldr	r3, [r7, #36]
 7814 00d2 1833     		adds	r3, r3, #24
 7815 00d4 1946     		mov	r1, r3
 7816 00d6 1148     		ldr	r0, .L506+12
 7817 00d8 FFF7FEFF 		bl	vListInsertEnd
 7818              	.L504:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7819              		.loc 1 5084 14
 7820 00dc 7B6A     		ldr	r3, [r7, #36]
 7821 00de DA6A     		ldr	r2, [r3, #44]
 7822              		.loc 1 5084 41
 7823 00e0 0F4B     		ldr	r3, .L506+16
 7824 00e2 1B68     		ldr	r3, [r3]
 7825 00e4 DB6A     		ldr	r3, [r3, #44]
 7826              		.loc 1 5084 7
 7827 00e6 9A42     		cmp	r2, r3
 7828 00e8 08D9     		bls	.L499
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7829              		.loc 1 5088 8
 7830 00ea 3B68     		ldr	r3, [r7]
 7831 00ec 002B     		cmp	r3, #0
 7832 00ee 02D0     		beq	.L505
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7833              		.loc 1 5090 34
 7834 00f0 3B68     		ldr	r3, [r7]
 7835 00f2 0122     		movs	r2, #1
 7836 00f4 1A60     		str	r2, [r3]
 7837              	.L505:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7838              		.loc 1 5096 20
 7839 00f6 0B4B     		ldr	r3, .L506+20
 7840 00f8 0122     		movs	r2, #1
 7841 00fa 1A60     		str	r2, [r3]
 7842              	.L499:
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 232


 7843 00fc 3B6A     		ldr	r3, [r7, #32]
 7844 00fe BB60     		str	r3, [r7, #8]
 7845              	.LBB238:
 7846              	.LBB239:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7847              		.loc 2 229 2
 7848 0100 BB68     		ldr	r3, [r7, #8]
 7849              		.syntax unified
 7850              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7851 0102 83F31188 			msr basepri, r3	
 7852              	@ 0 "" 2
 7853              		.loc 2 233 1
 7854              		.thumb
 7855              		.syntax unified
 7856 0106 00BF     		nop
 7857              	.LBE239:
 7858              	.LBE238:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7859              		.loc 1 5105 2
 7860 0108 00BF     		nop
 7861 010a 2837     		adds	r7, r7, #40
 7862              	.LCFI299:
 7863              		.cfi_def_cfa_offset 8
 7864 010c BD46     		mov	sp, r7
 7865              	.LCFI300:
 7866              		.cfi_def_cfa_register 13
 7867              		@ sp needed
 7868 010e 80BD     		pop	{r7, pc}
 7869              	.L507:
 7870              		.align	2
 7871              	.L506:
 7872 0110 00000000 		.word	uxSchedulerSuspended
 7873 0114 00000000 		.word	uxTopReadyPriority
 7874 0118 00000000 		.word	pxReadyTasksLists
 7875 011c 00000000 		.word	xPendingReadyList
 7876 0120 00000000 		.word	pxCurrentTCB
 7877 0124 00000000 		.word	xYieldPending
 7878              		.cfi_endproc
 7879              	.LFE62:
 7881              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7882              		.align	1
 7883              		.global	xTaskNotifyStateClear
 7884              		.syntax unified
 7885              		.thumb
 7886              		.thumb_func
 7888              	xTaskNotifyStateClear:
 7889              	.LFB63:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 233


5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7890              		.loc 1 5113 2
 7891              		.cfi_startproc
 7892              		@ args = 0, pretend = 0, frame = 16
 7893              		@ frame_needed = 1, uses_anonymous_args = 0
 7894 0000 80B5     		push	{r7, lr}
 7895              	.LCFI301:
 7896              		.cfi_def_cfa_offset 8
 7897              		.cfi_offset 7, -8
 7898              		.cfi_offset 14, -4
 7899 0002 84B0     		sub	sp, sp, #16
 7900              	.LCFI302:
 7901              		.cfi_def_cfa_offset 24
 7902 0004 00AF     		add	r7, sp, #0
 7903              	.LCFI303:
 7904              		.cfi_def_cfa_register 7
 7905 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7906              		.loc 1 5119 11
 7907 0008 7B68     		ldr	r3, [r7, #4]
 7908 000a 002B     		cmp	r3, #0
 7909 000c 02D1     		bne	.L509
 7910              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7911 000e 0E4B     		ldr	r3, .L514
 7912 0010 1B68     		ldr	r3, [r3]
 7913 0012 00E0     		b	.L510
 7914              	.L509:
 7915              		.loc 1 5119 11 discriminator 2
 7916 0014 7B68     		ldr	r3, [r7, #4]
 7917              	.L510:
 7918              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7919 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7920              		.loc 1 5121 3
 7921 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7922              		.loc 1 5123 13
 7923 001c BB68     		ldr	r3, [r7, #8]
 7924 001e 93F85830 		ldrb	r3, [r3, #88]
 7925 0022 DBB2     		uxtb	r3, r3
 7926              		.loc 1 5123 6
 7927 0024 022B     		cmp	r3, #2
 7928 0026 06D1     		bne	.L511
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 234


 7929              		.loc 1 5125 26
 7930 0028 BB68     		ldr	r3, [r7, #8]
 7931 002a 0022     		movs	r2, #0
 7932 002c 83F85820 		strb	r2, [r3, #88]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7933              		.loc 1 5126 13
 7934 0030 0123     		movs	r3, #1
 7935 0032 FB60     		str	r3, [r7, #12]
 7936 0034 01E0     		b	.L512
 7937              	.L511:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7938              		.loc 1 5130 13
 7939 0036 0023     		movs	r3, #0
 7940 0038 FB60     		str	r3, [r7, #12]
 7941              	.L512:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7942              		.loc 1 5133 3
 7943 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7944              		.loc 1 5135 10
 7945 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7946              		.loc 1 5136 2
 7947 0040 1846     		mov	r0, r3
 7948 0042 1037     		adds	r7, r7, #16
 7949              	.LCFI304:
 7950              		.cfi_def_cfa_offset 8
 7951 0044 BD46     		mov	sp, r7
 7952              	.LCFI305:
 7953              		.cfi_def_cfa_register 13
 7954              		@ sp needed
 7955 0046 80BD     		pop	{r7, pc}
 7956              	.L515:
 7957              		.align	2
 7958              	.L514:
 7959 0048 00000000 		.word	pxCurrentTCB
 7960              		.cfi_endproc
 7961              	.LFE63:
 7963              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7964              		.align	1
 7965              		.global	ulTaskNotifyValueClear
 7966              		.syntax unified
 7967              		.thumb
 7968              		.thumb_func
 7970              	ulTaskNotifyValueClear:
 7971              	.LFB64:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 235


5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7972              		.loc 1 5144 2
 7973              		.cfi_startproc
 7974              		@ args = 0, pretend = 0, frame = 16
 7975              		@ frame_needed = 1, uses_anonymous_args = 0
 7976 0000 80B5     		push	{r7, lr}
 7977              	.LCFI306:
 7978              		.cfi_def_cfa_offset 8
 7979              		.cfi_offset 7, -8
 7980              		.cfi_offset 14, -4
 7981 0002 84B0     		sub	sp, sp, #16
 7982              	.LCFI307:
 7983              		.cfi_def_cfa_offset 24
 7984 0004 00AF     		add	r7, sp, #0
 7985              	.LCFI308:
 7986              		.cfi_def_cfa_register 7
 7987 0006 7860     		str	r0, [r7, #4]
 7988 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7989              		.loc 1 5150 11
 7990 000a 7B68     		ldr	r3, [r7, #4]
 7991 000c 002B     		cmp	r3, #0
 7992 000e 02D1     		bne	.L517
 7993              		.loc 1 5150 11 is_stmt 0 discriminator 1
 7994 0010 0C4B     		ldr	r3, .L520
 7995 0012 1B68     		ldr	r3, [r3]
 7996 0014 00E0     		b	.L518
 7997              	.L517:
 7998              		.loc 1 5150 11 discriminator 2
 7999 0016 7B68     		ldr	r3, [r7, #4]
 8000              	.L518:
 8001              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8002 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8003              		.loc 1 5152 3
 8004 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005              		.loc 1 5156 27
 8006 001e 094B     		ldr	r3, .L520
 8007 0020 1B68     		ldr	r3, [r3]
 8008              		.loc 1 5156 13
 8009 0022 5B6D     		ldr	r3, [r3, #84]
 8010 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8011              		.loc 1 5157 9
 8012 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 236


 8013 0028 5A6D     		ldr	r2, [r3, #84]
 8014              		.loc 1 5157 30
 8015 002a 3B68     		ldr	r3, [r7]
 8016 002c DB43     		mvns	r3, r3
 8017              		.loc 1 5157 27
 8018 002e 1A40     		ands	r2, r2, r3
 8019 0030 FB68     		ldr	r3, [r7, #12]
 8020 0032 5A65     		str	r2, [r3, #84]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8021              		.loc 1 5159 3
 8022 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8023              		.loc 1 5161 10
 8024 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8025              		.loc 1 5162 2
 8026 003a 1846     		mov	r0, r3
 8027 003c 1037     		adds	r7, r7, #16
 8028              	.LCFI309:
 8029              		.cfi_def_cfa_offset 8
 8030 003e BD46     		mov	sp, r7
 8031              	.LCFI310:
 8032              		.cfi_def_cfa_register 13
 8033              		@ sp needed
 8034 0040 80BD     		pop	{r7, pc}
 8035              	.L521:
 8036 0042 00BF     		.align	2
 8037              	.L520:
 8038 0044 00000000 		.word	pxCurrentTCB
 8039              		.cfi_endproc
 8040              	.LFE64:
 8042              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8043              		.align	1
 8044              		.syntax unified
 8045              		.thumb
 8046              		.thumb_func
 8048              	prvAddCurrentTaskToDelayedList:
 8049              	.LFB65:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8050              		.loc 1 5178 1
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 237


 8051              		.cfi_startproc
 8052              		@ args = 0, pretend = 0, frame = 16
 8053              		@ frame_needed = 1, uses_anonymous_args = 0
 8054 0000 80B5     		push	{r7, lr}
 8055              	.LCFI311:
 8056              		.cfi_def_cfa_offset 8
 8057              		.cfi_offset 7, -8
 8058              		.cfi_offset 14, -4
 8059 0002 84B0     		sub	sp, sp, #16
 8060              	.LCFI312:
 8061              		.cfi_def_cfa_offset 24
 8062 0004 00AF     		add	r7, sp, #0
 8063              	.LCFI313:
 8064              		.cfi_def_cfa_register 7
 8065 0006 7860     		str	r0, [r7, #4]
 8066 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8067              		.loc 1 5180 18
 8068 000a 214B     		ldr	r3, .L527
 8069 000c 1B68     		ldr	r3, [r3]
 8070 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8071              		.loc 1 5193 35
 8072 0010 204B     		ldr	r3, .L527+4
 8073 0012 1B68     		ldr	r3, [r3]
 8074              		.loc 1 5193 6
 8075 0014 0433     		adds	r3, r3, #4
 8076 0016 1846     		mov	r0, r3
 8077 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8078              		.loc 1 5206 5
 8079 001c 7B68     		ldr	r3, [r7, #4]
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 238


 8080 001e B3F1FF3F 		cmp	r3, #-1
 8081 0022 0AD1     		bne	.L523
 8082              		.loc 1 5206 41 discriminator 1
 8083 0024 3B68     		ldr	r3, [r7]
 8084 0026 002B     		cmp	r3, #0
 8085 0028 07D0     		beq	.L523
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8086              		.loc 1 5211 56
 8087 002a 1A4B     		ldr	r3, .L527+4
 8088 002c 1B68     		ldr	r3, [r3]
 8089              		.loc 1 5211 4
 8090 002e 0433     		adds	r3, r3, #4
 8091 0030 1946     		mov	r1, r3
 8092 0032 1948     		ldr	r0, .L527+8
 8093 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 239


5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8094              		.loc 1 5286 1
 8095 0038 26E0     		b	.L526
 8096              	.L523:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8097              		.loc 1 5218 16
 8098 003a FA68     		ldr	r2, [r7, #12]
 8099 003c 7B68     		ldr	r3, [r7, #4]
 8100 003e 1344     		add	r3, r3, r2
 8101 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8102              		.loc 1 5221 4
 8103 0042 144B     		ldr	r3, .L527+4
 8104 0044 1B68     		ldr	r3, [r3]
 8105 0046 BA68     		ldr	r2, [r7, #8]
 8106 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8107              		.loc 1 5223 6
 8108 004a BA68     		ldr	r2, [r7, #8]
 8109 004c FB68     		ldr	r3, [r7, #12]
 8110 004e 9A42     		cmp	r2, r3
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 240


 8111 0050 09D2     		bcs	.L525
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8112              		.loc 1 5227 5
 8113 0052 124B     		ldr	r3, .L527+12
 8114 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8115              		.loc 1 5227 60
 8116 0056 0F4B     		ldr	r3, .L527+4
 8117 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8118              		.loc 1 5227 5
 8119 005a 0433     		adds	r3, r3, #4
 8120 005c 1946     		mov	r1, r3
 8121 005e 1046     		mov	r0, r2
 8122 0060 FFF7FEFF 		bl	vListInsert
 8123              		.loc 1 5286 1
 8124 0064 10E0     		b	.L526
 8125              	.L525:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8126              		.loc 1 5233 5
 8127 0066 0E4B     		ldr	r3, .L527+16
 8128 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8129              		.loc 1 5233 52
 8130 006a 0A4B     		ldr	r3, .L527+4
 8131 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8132              		.loc 1 5233 5
 8133 006e 0433     		adds	r3, r3, #4
 8134 0070 1946     		mov	r1, r3
 8135 0072 1046     		mov	r0, r2
 8136 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8137              		.loc 1 5238 21
 8138 0078 0A4B     		ldr	r3, .L527+20
 8139 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8140              		.loc 1 5238 7
 8141 007c BA68     		ldr	r2, [r7, #8]
 8142 007e 9A42     		cmp	r2, r3
 8143 0080 02D2     		bcs	.L526
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8144              		.loc 1 5240 27
 8145 0082 084A     		ldr	r2, .L527+20
 8146 0084 BB68     		ldr	r3, [r7, #8]
 8147 0086 1360     		str	r3, [r2]
 8148              	.L526:
 8149              		.loc 1 5286 1
 8150 0088 00BF     		nop
 8151 008a 1037     		adds	r7, r7, #16
 8152              	.LCFI314:
 8153              		.cfi_def_cfa_offset 8
 8154 008c BD46     		mov	sp, r7
 8155              	.LCFI315:
 8156              		.cfi_def_cfa_register 13
 8157              		@ sp needed
 8158 008e 80BD     		pop	{r7, pc}
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 241


 8159              	.L528:
 8160              		.align	2
 8161              	.L527:
 8162 0090 00000000 		.word	xTickCount
 8163 0094 00000000 		.word	pxCurrentTCB
 8164 0098 00000000 		.word	xSuspendedTaskList
 8165 009c 00000000 		.word	pxOverflowDelayedTaskList
 8166 00a0 00000000 		.word	pxDelayedTaskList
 8167 00a4 00000000 		.word	xNextTaskUnblockTime
 8168              		.cfi_endproc
 8169              	.LFE65:
 8171              		.text
 8172              	.Letext0:
 8173              		.file 3 "D:/msys64/mingw64/lib/gcc/arm-none-eabi/13.3.0/include/stddef.h"
 8174              		.file 4 "D:/msys64/mingw64/arm-none-eabi/include/machine/_default_types.h"
 8175              		.file 5 "D:/msys64/mingw64/arm-none-eabi/include/sys/_stdint.h"
 8176              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8177              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8178              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8179              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 8180              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 8181              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 8182              		.file 12 "D:/msys64/mingw64/arm-none-eabi/include/string.h"
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 242


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
D:\msys64\tmp\cc7ixQxH.s:25     .bss.pxCurrentTCB:00000000 pxCurrentTCB
D:\msys64\tmp\cc7ixQxH.s:22     .bss.pxCurrentTCB:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:28     .bss.pxReadyTasksLists:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:31     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
D:\msys64\tmp\cc7ixQxH.s:34     .bss.xDelayedTaskList1:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:37     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
D:\msys64\tmp\cc7ixQxH.s:40     .bss.xDelayedTaskList2:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:43     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
D:\msys64\tmp\cc7ixQxH.s:46     .bss.pxDelayedTaskList:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:49     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
D:\msys64\tmp\cc7ixQxH.s:52     .bss.pxOverflowDelayedTaskList:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:55     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
D:\msys64\tmp\cc7ixQxH.s:58     .bss.xPendingReadyList:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:61     .bss.xPendingReadyList:00000000 xPendingReadyList
D:\msys64\tmp\cc7ixQxH.s:64     .bss.xTasksWaitingTermination:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:67     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
D:\msys64\tmp\cc7ixQxH.s:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:73     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
D:\msys64\tmp\cc7ixQxH.s:76     .bss.xSuspendedTaskList:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:79     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
D:\msys64\tmp\cc7ixQxH.s:82     .bss.uxCurrentNumberOfTasks:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:85     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
D:\msys64\tmp\cc7ixQxH.s:88     .bss.xTickCount:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:91     .bss.xTickCount:00000000 xTickCount
D:\msys64\tmp\cc7ixQxH.s:94     .bss.uxTopReadyPriority:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:97     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
D:\msys64\tmp\cc7ixQxH.s:100    .bss.xSchedulerRunning:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:103    .bss.xSchedulerRunning:00000000 xSchedulerRunning
D:\msys64\tmp\cc7ixQxH.s:106    .bss.xPendedTicks:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:109    .bss.xPendedTicks:00000000 xPendedTicks
D:\msys64\tmp\cc7ixQxH.s:112    .bss.xYieldPending:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:115    .bss.xYieldPending:00000000 xYieldPending
D:\msys64\tmp\cc7ixQxH.s:118    .bss.xNumOfOverflows:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:121    .bss.xNumOfOverflows:00000000 xNumOfOverflows
D:\msys64\tmp\cc7ixQxH.s:124    .bss.uxTaskNumber:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:127    .bss.uxTaskNumber:00000000 uxTaskNumber
D:\msys64\tmp\cc7ixQxH.s:130    .bss.xNextTaskUnblockTime:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:133    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
D:\msys64\tmp\cc7ixQxH.s:136    .bss.xIdleTaskHandle:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:139    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
D:\msys64\tmp\cc7ixQxH.s:142    .bss.uxSchedulerSuspended:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:145    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
D:\msys64\tmp\cc7ixQxH.s:148    .text.xTaskCreateStatic:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:154    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
D:\msys64\tmp\cc7ixQxH.s:441    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
D:\msys64\tmp\cc7ixQxH.s:659    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
D:\msys64\tmp\cc7ixQxH.s:322    .text.xTaskCreate:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:328    .text.xTaskCreate:00000000 xTaskCreate
D:\msys64\tmp\cc7ixQxH.s:436    .text.prvInitialiseNewTask:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:654    .text.prvAddNewTaskToReadyList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5162   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
D:\msys64\tmp\cc7ixQxH.s:809    .text.prvAddNewTaskToReadyList:000000c4 $d
D:\msys64\tmp\cc7ixQxH.s:820    .text.vTaskDelete:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:826    .text.vTaskDelete:00000000 vTaskDelete
D:\msys64\tmp\cc7ixQxH.s:5781   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 243


D:\msys64\tmp\cc7ixQxH.s:5876   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
D:\msys64\tmp\cc7ixQxH.s:986    .text.vTaskDelete:000000c8 $d
D:\msys64\tmp\cc7ixQxH.s:998    .text.vTaskDelayUntil:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1004   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
D:\msys64\tmp\cc7ixQxH.s:2792   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
D:\msys64\tmp\cc7ixQxH.s:8048   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
D:\msys64\tmp\cc7ixQxH.s:2838   .text.xTaskResumeAll:00000000 xTaskResumeAll
D:\msys64\tmp\cc7ixQxH.s:1214   .text.vTaskDelayUntil:000000f4 $d
D:\msys64\tmp\cc7ixQxH.s:1221   .text.vTaskDelay:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1227   .text.vTaskDelay:00000000 vTaskDelay
D:\msys64\tmp\cc7ixQxH.s:1321   .text.vTaskDelay:00000064 $d
D:\msys64\tmp\cc7ixQxH.s:1327   .text.eTaskGetState:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1333   .text.eTaskGetState:00000000 eTaskGetState
D:\msys64\tmp\cc7ixQxH.s:1492   .text.eTaskGetState:000000bc $d
D:\msys64\tmp\cc7ixQxH.s:1501   .text.uxTaskPriorityGet:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1507   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
D:\msys64\tmp\cc7ixQxH.s:1562   .text.uxTaskPriorityGet:00000030 $d
D:\msys64\tmp\cc7ixQxH.s:1567   .text.uxTaskPriorityGetFromISR:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1573   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
D:\msys64\tmp\cc7ixQxH.s:1664   .text.uxTaskPriorityGetFromISR:00000054 $d
D:\msys64\tmp\cc7ixQxH.s:1669   .text.vTaskPrioritySet:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1675   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
D:\msys64\tmp\cc7ixQxH.s:1906   .text.vTaskPrioritySet:0000012c $d
D:\msys64\tmp\cc7ixQxH.s:1914   .text.vTaskSuspend:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:1920   .text.vTaskSuspend:00000000 vTaskSuspend
D:\msys64\tmp\cc7ixQxH.s:3862   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
D:\msys64\tmp\cc7ixQxH.s:2093   .text.vTaskSuspend:000000d4 $d
D:\msys64\tmp\cc7ixQxH.s:2103   .text.prvTaskIsTaskSuspended:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2108   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
D:\msys64\tmp\cc7ixQxH.s:2202   .text.prvTaskIsTaskSuspended:0000005c $d
D:\msys64\tmp\cc7ixQxH.s:2208   .text.vTaskResume:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2214   .text.vTaskResume:00000000 vTaskResume
D:\msys64\tmp\cc7ixQxH.s:2354   .text.vTaskResume:000000b0 $d
D:\msys64\tmp\cc7ixQxH.s:2362   .text.xTaskResumeFromISR:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2368   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
D:\msys64\tmp\cc7ixQxH.s:2542   .text.xTaskResumeFromISR:000000d4 $d
D:\msys64\tmp\cc7ixQxH.s:2551   .rodata:00000000 $d
D:\msys64\tmp\cc7ixQxH.s:2555   .text.vTaskStartScheduler:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2561   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
D:\msys64\tmp\cc7ixQxH.s:2711   .text.vTaskStartScheduler:000000b8 $d
D:\msys64\tmp\cc7ixQxH.s:5106   .text.prvIdleTask:00000000 prvIdleTask
D:\msys64\tmp\cc7ixQxH.s:2721   .text.vTaskEndScheduler:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2727   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
D:\msys64\tmp\cc7ixQxH.s:2781   .text.vTaskEndScheduler:0000002c $d
D:\msys64\tmp\cc7ixQxH.s:2786   .text.vTaskSuspendAll:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:2827   .text.vTaskSuspendAll:00000018 $d
D:\msys64\tmp\cc7ixQxH.s:2832   .text.xTaskResumeAll:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3594   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
D:\msys64\tmp\cc7ixQxH.s:3058   .text.xTaskResumeAll:00000118 $d
D:\msys64\tmp\cc7ixQxH.s:3071   .text.xTaskGetTickCount:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3077   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
D:\msys64\tmp\cc7ixQxH.s:3117   .text.xTaskGetTickCount:0000001c $d
D:\msys64\tmp\cc7ixQxH.s:3122   .text.xTaskGetTickCountFromISR:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3128   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
D:\msys64\tmp\cc7ixQxH.s:3169   .text.xTaskGetTickCountFromISR:00000020 $d
D:\msys64\tmp\cc7ixQxH.s:3174   .text.uxTaskGetNumberOfTasks:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3180   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 244


D:\msys64\tmp\cc7ixQxH.s:3211   .text.uxTaskGetNumberOfTasks:00000014 $d
D:\msys64\tmp\cc7ixQxH.s:3216   .text.pcTaskGetName:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3222   .text.pcTaskGetName:00000000 pcTaskGetName
D:\msys64\tmp\cc7ixQxH.s:3301   .text.pcTaskGetName:00000048 $d
D:\msys64\tmp\cc7ixQxH.s:3306   .text.uxTaskGetSystemState:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3312   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
D:\msys64\tmp\cc7ixQxH.s:5512   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
D:\msys64\tmp\cc7ixQxH.s:3490   .text.uxTaskGetSystemState:00000104 $d
D:\msys64\tmp\cc7ixQxH.s:3500   .text.xTaskCatchUpTicks:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3506   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
D:\msys64\tmp\cc7ixQxH.s:3582   .text.xTaskCatchUpTicks:0000004c $d
D:\msys64\tmp\cc7ixQxH.s:3588   .text.xTaskIncrementTick:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:3841   .text.xTaskIncrementTick:00000148 $d
D:\msys64\tmp\cc7ixQxH.s:3856   .text.vTaskSwitchContext:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4003   .text.vTaskSwitchContext:000000a8 $d
D:\msys64\tmp\cc7ixQxH.s:4012   .text.vTaskPlaceOnEventList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4018   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
D:\msys64\tmp\cc7ixQxH.s:4089   .text.vTaskPlaceOnEventList:00000048 $d
D:\msys64\tmp\cc7ixQxH.s:4094   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4100   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
D:\msys64\tmp\cc7ixQxH.s:4206   .text.vTaskPlaceOnUnorderedEventList:00000074 $d
D:\msys64\tmp\cc7ixQxH.s:4212   .text.vTaskPlaceOnEventListRestricted:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4218   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
D:\msys64\tmp\cc7ixQxH.s:4298   .text.vTaskPlaceOnEventListRestricted:00000054 $d
D:\msys64\tmp\cc7ixQxH.s:4303   .text.xTaskRemoveFromEventList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4309   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
D:\msys64\tmp\cc7ixQxH.s:4450   .text.xTaskRemoveFromEventList:000000b0 $d
D:\msys64\tmp\cc7ixQxH.s:4460   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4466   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
D:\msys64\tmp\cc7ixQxH.s:4612   .text.vTaskRemoveFromUnorderedEventList:000000b4 $d
D:\msys64\tmp\cc7ixQxH.s:4621   .text.vTaskSetTimeOutState:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4627   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
D:\msys64\tmp\cc7ixQxH.s:4699   .text.vTaskSetTimeOutState:00000048 $d
D:\msys64\tmp\cc7ixQxH.s:4705   .text.vTaskInternalSetTimeOutState:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4711   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
D:\msys64\tmp\cc7ixQxH.s:4756   .text.vTaskInternalSetTimeOutState:00000024 $d
D:\msys64\tmp\cc7ixQxH.s:4762   .text.xTaskCheckForTimeOut:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4768   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
D:\msys64\tmp\cc7ixQxH.s:4936   .text.xTaskCheckForTimeOut:000000c0 $d
D:\msys64\tmp\cc7ixQxH.s:4942   .text.vTaskMissedYield:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4948   .text.vTaskMissedYield:00000000 vTaskMissedYield
D:\msys64\tmp\cc7ixQxH.s:4980   .text.vTaskMissedYield:00000014 $d
D:\msys64\tmp\cc7ixQxH.s:4985   .text.uxTaskGetTaskNumber:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:4991   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
D:\msys64\tmp\cc7ixQxH.s:5046   .text.vTaskSetTaskNumber:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5052   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
D:\msys64\tmp\cc7ixQxH.s:5101   .text.prvIdleTask:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5257   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
D:\msys64\tmp\cc7ixQxH.s:5151   .text.prvIdleTask:00000028 $d
D:\msys64\tmp\cc7ixQxH.s:5157   .text.prvInitialiseTaskLists:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5240   .text.prvInitialiseTaskLists:00000060 $d
D:\msys64\tmp\cc7ixQxH.s:5252   .text.prvCheckTasksWaitingTermination:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5329   .text.prvCheckTasksWaitingTermination:00000050 $d
D:\msys64\tmp\cc7ixQxH.s:5336   .text.vTaskGetInfo:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5342   .text.vTaskGetInfo:00000000 vTaskGetInfo
D:\msys64\tmp\cc7ixQxH.s:5644   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
D:\msys64\tmp\cc7ixQxH.s:5502   .text.vTaskGetInfo:000000c8 $d
ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 245


D:\msys64\tmp\cc7ixQxH.s:5507   .text.prvListTasksWithinSingleList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5639   .text.prvTaskCheckFreeStackSpace:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5708   .text.uxTaskGetStackHighWaterMark:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5714   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
D:\msys64\tmp\cc7ixQxH.s:5771   .text.uxTaskGetStackHighWaterMark:00000034 $d
D:\msys64\tmp\cc7ixQxH.s:5776   .text.prvDeleteTCB:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5871   .text.prvResetNextTaskUnblockTime:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5938   .text.prvResetNextTaskUnblockTime:00000038 $d
D:\msys64\tmp\cc7ixQxH.s:5944   .text.xTaskGetCurrentTaskHandle:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:5950   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
D:\msys64\tmp\cc7ixQxH.s:5990   .text.xTaskGetCurrentTaskHandle:0000001c $d
D:\msys64\tmp\cc7ixQxH.s:5995   .text.xTaskGetSchedulerState:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6001   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
D:\msys64\tmp\cc7ixQxH.s:6063   .text.xTaskGetSchedulerState:00000034 $d
D:\msys64\tmp\cc7ixQxH.s:6069   .text.xTaskPriorityInherit:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6075   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
D:\msys64\tmp\cc7ixQxH.s:6224   .text.xTaskPriorityInherit:000000c4 $d
D:\msys64\tmp\cc7ixQxH.s:6231   .text.xTaskPriorityDisinherit:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6237   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
D:\msys64\tmp\cc7ixQxH.s:6407   .text.xTaskPriorityDisinherit:000000d4 $d
D:\msys64\tmp\cc7ixQxH.s:6414   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6420   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
D:\msys64\tmp\cc7ixQxH.s:6616   .text.vTaskPriorityDisinheritAfterTimeout:000000fc $d
D:\msys64\tmp\cc7ixQxH.s:6623   .text.uxTaskResetEventItemValue:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6629   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
D:\msys64\tmp\cc7ixQxH.s:6679   .text.uxTaskResetEventItemValue:0000002c $d
D:\msys64\tmp\cc7ixQxH.s:6684   .text.pvTaskIncrementMutexHeldCount:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6690   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
D:\msys64\tmp\cc7ixQxH.s:6735   .text.pvTaskIncrementMutexHeldCount:00000024 $d
D:\msys64\tmp\cc7ixQxH.s:6740   .text.ulTaskNotifyTake:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6746   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
D:\msys64\tmp\cc7ixQxH.s:6860   .text.ulTaskNotifyTake:00000088 $d
D:\msys64\tmp\cc7ixQxH.s:6866   .text.xTaskNotifyWait:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:6872   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
D:\msys64\tmp\cc7ixQxH.s:7007   .text.xTaskNotifyWait:000000ac $d
D:\msys64\tmp\cc7ixQxH.s:7013   .text.xTaskGenericNotify:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:7019   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
D:\msys64\tmp\cc7ixQxH.s:7103   .text.xTaskGenericNotify:00000064 $d
D:\msys64\tmp\cc7ixQxH.s:7108   .text.xTaskGenericNotify:00000078 $t
D:\msys64\tmp\cc7ixQxH.s:7295   .text.xTaskGenericNotify:00000164 $d
D:\msys64\tmp\cc7ixQxH.s:7303   .text.xTaskGenericNotifyFromISR:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:7309   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
D:\msys64\tmp\cc7ixQxH.s:7415   .text.xTaskGenericNotifyFromISR:00000084 $d
D:\msys64\tmp\cc7ixQxH.s:7420   .text.xTaskGenericNotifyFromISR:00000098 $t
D:\msys64\tmp\cc7ixQxH.s:7636   .text.xTaskGenericNotifyFromISR:000001a8 $d
D:\msys64\tmp\cc7ixQxH.s:7646   .text.vTaskNotifyGiveFromISR:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:7652   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
D:\msys64\tmp\cc7ixQxH.s:7872   .text.vTaskNotifyGiveFromISR:00000110 $d
D:\msys64\tmp\cc7ixQxH.s:7882   .text.xTaskNotifyStateClear:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:7888   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
D:\msys64\tmp\cc7ixQxH.s:7959   .text.xTaskNotifyStateClear:00000048 $d
D:\msys64\tmp\cc7ixQxH.s:7964   .text.ulTaskNotifyValueClear:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:7970   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
D:\msys64\tmp\cc7ixQxH.s:8038   .text.ulTaskNotifyValueClear:00000044 $d
D:\msys64\tmp\cc7ixQxH.s:8043   .text.prvAddCurrentTaskToDelayedList:00000000 $t
D:\msys64\tmp\cc7ixQxH.s:8162   .text.prvAddCurrentTaskToDelayedList:00000090 $d

ARM GAS  D:\msys64\tmp\cc7ixQxH.s 			page 246


UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
